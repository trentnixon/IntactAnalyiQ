[{"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js":"1","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js":"2","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js":"3","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js":"4","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js":"5","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js":"6","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js":"7","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js":"8","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js":"9","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js":"10","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js":"11","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js":"12","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js":"13","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js":"14","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js":"15","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js":"16","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js":"17","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js":"18","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js":"19","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js":"20","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js":"21","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleMarkerBasedScan.js":"22","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleScanProcess.js":"23","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\authUser.js":"24","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Landing\\index.js":"25","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\AuthLogin\\index.js":"26","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\PrimaryFeature.js":"27","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkerBasedScan.js":"28","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkersCenterpoints.js":"29","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\ResidualLocationMarkers.js":"30","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkerBasedResults.js":"31","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\LocationMarkers.js":"32","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\Controls\\ScanStateBtn.js":"33","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\SelectRegionLayout.js":"34","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\ScanResultsLayout.js":"35","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\Results\\ClusterResults.js":"36","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\ScanResults.js":"37","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\Header.js":"38","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\MapFilterControls.js":"39","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\controls.js":"40","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\map.js":"41","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\ScanStateBtn.js":"42","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMaxWorkOrders.js":"43","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMinWorkOrders.js":"44","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMinSitesPerScan.js":"45","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectGridSpacing.js":"46","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectRaduis.js":"47","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\Results.js":"48","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\ScanBox.js":"49","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\AddNewRegion.js":"50","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\ClusterResults.js":"51","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\DeleteClusterBtn.js":"52","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\clustermap.js":"53","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\LocationMarkers.js":"54","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateRegion.js":"55","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\PerimeterBox.js":"56","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateState.js":"57","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateCountry.js":"58","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfo.js":"59","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\BacktoMapBtn.js":"60","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterBoundary.js":"61","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterScanRadius.js":"62","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ScannedRegionalBoundary.js":"63","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterMarkers.js":"64","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfoComponents\\ListTradeTypes.js":"65","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfoComponents\\ListSites.js":"66","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\index.js":"67","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\About\\about.js":"68","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Contact\\contact.js":"69","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\index.js":"70","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\unAuth\\UnAuth.js":"71","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\AUTH.js":"72","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\AUTH.js":"73","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\AuthDashboard.js":"74","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\PublicLayout.js":"75","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Public\\Navigation.js":"76","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\input.js":"77","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\LoginForm.js":"78","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Landing.js":"79","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Loading\\Loading.js":"80","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\DataDump.js":"81","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan.js":"82","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Map.js":"83","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\ResidualLocationMarkers.js":"84","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkerBasedResults.js":"85","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\LocationMarkers.js":"86","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkersCenterpoints.js":"87","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ColorKey.js":"88","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ClusterResults.js":"89","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ScanHistory.js":"90","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\HistoryRerfresh.js":"91","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ViewSingleResultBtn.js":"92","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan.js":"93","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateSingleScanBtn.js":"94","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\SelectandReview.js":"95","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\ScanSelectItems.js":"96","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\ScanReviewSelectedItems.js":"97","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoAddItemsSingleScan.js":"98","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoScanType.js":"99","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\SetSelectedBtn.js":"100","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\CreateScanoptions.js":"101","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateNewModel.js":"102"},{"size":1044,"mtime":1610974815814,"results":"103","hashOfConfig":"104"},{"size":517,"mtime":1610596234694,"results":"105","hashOfConfig":"104"},{"size":362,"mtime":499162500000,"results":"106","hashOfConfig":"104"},{"size":344,"mtime":1608627476978,"results":"107","hashOfConfig":"104"},{"size":285,"mtime":1610448608465,"results":"108","hashOfConfig":"104"},{"size":2039,"mtime":1609296641569,"results":"109","hashOfConfig":"104"},{"size":87,"mtime":1608627826907,"results":"110","hashOfConfig":"104"},{"size":8240,"mtime":1610947642011,"results":"111","hashOfConfig":"104"},{"size":1566,"mtime":1610594048498,"results":"112","hashOfConfig":"104"},{"size":2801,"mtime":1610963547809,"results":"113","hashOfConfig":"104"},{"size":2725,"mtime":1610933324596,"results":"114","hashOfConfig":"104"},{"size":12395,"mtime":1609822379196,"results":"115","hashOfConfig":"104"},{"size":1995,"mtime":1610967499605,"results":"116","hashOfConfig":"104"},{"size":698,"mtime":1609215777391,"results":"117","hashOfConfig":"104"},{"size":4865,"mtime":1610861016698,"results":"118","hashOfConfig":"104"},{"size":6141,"mtime":1610857334737,"results":"119","hashOfConfig":"104"},{"size":702,"mtime":1609226083528,"results":"120","hashOfConfig":"104"},{"size":1610,"mtime":1609678200319,"results":"121","hashOfConfig":"104"},{"size":959,"mtime":1609677692743,"results":"122","hashOfConfig":"104"},{"size":11114,"mtime":1610973115875,"results":"123","hashOfConfig":"104"},{"size":257,"mtime":1609657333309,"results":"124","hashOfConfig":"104"},{"size":11435,"mtime":1609916596721,"results":"125","hashOfConfig":"104"},{"size":2444,"mtime":1610947638260,"results":"126","hashOfConfig":"104"},{"size":6475,"mtime":1610963554969,"results":"127","hashOfConfig":"104"},{"size":405,"mtime":1610502856130,"results":"128","hashOfConfig":"104"},{"size":577,"mtime":1610513529720,"results":"129","hashOfConfig":"104"},{"size":776,"mtime":1610446904650,"results":"130","hashOfConfig":"104"},{"size":4494,"mtime":1610867423942,"results":"131","hashOfConfig":"104"},{"size":2257,"mtime":1610864267110,"results":"132","hashOfConfig":"104"},{"size":3176,"mtime":1610939862744,"results":"133","hashOfConfig":"104"},{"size":4454,"mtime":1610974719920,"results":"134","hashOfConfig":"104"},{"size":4674,"mtime":1610939417303,"results":"135","hashOfConfig":"104"},{"size":1101,"mtime":1610446791394,"results":"136","hashOfConfig":"104"},{"size":427,"mtime":1609218167015,"results":"137","hashOfConfig":"104"},{"size":631,"mtime":1609675155513,"results":"138","hashOfConfig":"104"},{"size":1609,"mtime":1610939701193,"results":"139","hashOfConfig":"104"},{"size":255,"mtime":1609312415883,"results":"140","hashOfConfig":"104"},{"size":2851,"mtime":1610446475297,"results":"141","hashOfConfig":"104"},{"size":1090,"mtime":1609394380269,"results":"142","hashOfConfig":"104"},{"size":715,"mtime":1610446636482,"results":"143","hashOfConfig":"104"},{"size":5498,"mtime":1610446694369,"results":"144","hashOfConfig":"104"},{"size":1116,"mtime":1610446415282,"results":"145","hashOfConfig":"104"},{"size":2281,"mtime":1610446481690,"results":"146","hashOfConfig":"104"},{"size":2284,"mtime":1610446479866,"results":"147","hashOfConfig":"104"},{"size":2241,"mtime":1610446480746,"results":"148","hashOfConfig":"104"},{"size":2262,"mtime":1610447184737,"results":"149","hashOfConfig":"104"},{"size":2310,"mtime":1610446479226,"results":"150","hashOfConfig":"104"},{"size":1119,"mtime":1610446735362,"results":"151","hashOfConfig":"104"},{"size":4649,"mtime":1610446721023,"results":"152","hashOfConfig":"104"},{"size":3139,"mtime":1610446474630,"results":"153","hashOfConfig":"104"},{"size":1929,"mtime":1610446471874,"results":"154","hashOfConfig":"104"},{"size":889,"mtime":1610446252170,"results":"155","hashOfConfig":"104"},{"size":1193,"mtime":1610446555227,"results":"156","hashOfConfig":"104"},{"size":4232,"mtime":1610446690793,"results":"157","hashOfConfig":"104"},{"size":2987,"mtime":1610446477122,"results":"158","hashOfConfig":"104"},{"size":899,"mtime":1610446670794,"results":"159","hashOfConfig":"104"},{"size":2425,"mtime":1610446476482,"results":"160","hashOfConfig":"104"},{"size":2475,"mtime":1610446478066,"results":"161","hashOfConfig":"104"},{"size":2459,"mtime":1610446559802,"results":"162","hashOfConfig":"104"},{"size":646,"mtime":1609679215014,"results":"163","hashOfConfig":"104"},{"size":653,"mtime":1609377328531,"results":"164","hashOfConfig":"104"},{"size":1199,"mtime":1610446520465,"results":"165","hashOfConfig":"104"},{"size":475,"mtime":1610446528025,"results":"166","hashOfConfig":"104"},{"size":3337,"mtime":1609721569914,"results":"167","hashOfConfig":"104"},{"size":856,"mtime":1610446558682,"results":"168","hashOfConfig":"104"},{"size":821,"mtime":1609641116942,"results":"169","hashOfConfig":"104"},{"size":3313,"mtime":1610963936481,"results":"170","hashOfConfig":"104"},{"size":149,"mtime":1610502909105,"results":"171","hashOfConfig":"104"},{"size":155,"mtime":1610502916347,"results":"172","hashOfConfig":"104"},{"size":1737,"mtime":1610585738270,"results":"173","hashOfConfig":"104"},{"size":160,"mtime":1610448527461,"results":"174","hashOfConfig":"104"},{"size":1396,"mtime":1610779434340,"results":"175","hashOfConfig":"104"},{"size":654,"mtime":1610861163069,"results":"176","hashOfConfig":"104"},{"size":2620,"mtime":1610933245101,"results":"177","hashOfConfig":"104"},{"size":1974,"mtime":1610596261079,"results":"178","hashOfConfig":"104"},{"size":1028,"mtime":1610585645670,"results":"179","hashOfConfig":"104"},{"size":882,"mtime":1610504872791,"results":"180","hashOfConfig":"104"},{"size":2323,"mtime":1610515887760,"results":"181","hashOfConfig":"104"},{"size":1313,"mtime":1610939382500,"results":"182","hashOfConfig":"104"},{"size":1267,"mtime":1610595337354,"results":"183","hashOfConfig":"104"},{"size":2206,"mtime":1610967484114,"results":"184","hashOfConfig":"104"},{"size":1303,"mtime":1610663593262,"results":"185","hashOfConfig":"104"},{"size":1608,"mtime":1610663621777,"results":"186","hashOfConfig":"104"},{"size":3188,"mtime":1610663963605,"results":"187","hashOfConfig":"104"},{"size":2038,"mtime":1610664023283,"results":"188","hashOfConfig":"104"},{"size":3497,"mtime":1610663939346,"results":"189","hashOfConfig":"104"},{"size":2253,"mtime":1610663954934,"results":"190","hashOfConfig":"104"},{"size":1573,"mtime":1610663989010,"results":"191","hashOfConfig":"104"},{"size":1608,"mtime":1610663984928,"results":"192","hashOfConfig":"104"},{"size":3431,"mtime":1610939310893,"results":"193","hashOfConfig":"104"},{"size":651,"mtime":1610779172499,"results":"194","hashOfConfig":"104"},{"size":2682,"mtime":1610939843368,"results":"195","hashOfConfig":"104"},{"size":1064,"mtime":1610853087284,"results":"196","hashOfConfig":"104"},{"size":882,"mtime":1610852063749,"results":"197","hashOfConfig":"104"},{"size":1222,"mtime":1610852875295,"results":"198","hashOfConfig":"104"},{"size":3993,"mtime":1610967477165,"results":"199","hashOfConfig":"104"},{"size":2648,"mtime":1610854994559,"results":"200","hashOfConfig":"104"},{"size":627,"mtime":1610446826665,"results":"201","hashOfConfig":"104"},{"size":620,"mtime":1610852099113,"results":"202","hashOfConfig":"104"},{"size":617,"mtime":1610446813361,"results":"203","hashOfConfig":"104"},{"size":2254,"mtime":1610852700808,"results":"204","hashOfConfig":"104"},{"size":620,"mtime":1610854957862,"results":"205","hashOfConfig":"104"},{"filePath":"206","messages":"207","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"i3jrvt",{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"210"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"244"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"210"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"210"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"210"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"210"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"210"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"210"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"210"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"210"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"244"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"210"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"244"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"244"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"244"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"244"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"244"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"244"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"244"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"244"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"244"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"244"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"244"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"244"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"244"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"244"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"244"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"244"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"244"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"244"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"244"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"244"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"244"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"244"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"389","messages":"390","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"210"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"210"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"401","messages":"402","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"210"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"406","messages":"407","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"408","messages":"409","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"210"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"210"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"210"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"210"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"210"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"210"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"210"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"210"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"210"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"210"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js",["458","459"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js",[],["460","461"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js",["462"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js",["463","464","465"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js",["466","467","468","469","470","471","472","473"],"import { Circle } from '@react-google-maps/api';\r\nimport store from \"../store/index\"\r\nimport {ClusterAnalysis} from \"./ClusterAnalysis\";\r\n\r\n\r\n\r\n/*\r\n    This class should deal with Geolocation Processes ONLY\r\n    all result filtering to be handled in phase two\r\n\r\n*/\r\n\r\n\r\n// find the distance in KM from 1 point to another\r\nexport function distancetoPoint(lat1, lon1, lat2, lon2, unit) {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1/180;\r\n        var radlat2 = Math.PI * lat2/180;\r\n        var theta = lon1-lon2;\r\n        var radtheta = Math.PI * theta/180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit==\"K\") { dist = dist * 1.609344 }\r\n        if (unit==\"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\n// use to find the scan box area.\r\n// this function return the corosponding lnglat to a given point\r\n\r\n\r\nexport  function llFromDistance(latitude, longitude, distance, bearing) {\r\n    // taken from: https://stackoverflow.com/a/46410871/13549 \r\n    // distance in KM, bearing in degrees\r\n  \r\n    const R = 6378.1; // Radius of the Earth\r\n    const brng = bearing * Math.PI / 180; // Convert bearing to radian\r\n    let lat = latitude * Math.PI / 180; // Current coords to radians\r\n    let lon = longitude * Math.PI / 180;\r\n  \r\n    // Do the math magic\r\n    lat = Math.asin(Math.sin(lat) * Math.cos(distance / R) + Math.cos(lat) * Math.sin(distance / R) * Math.cos(brng));\r\n    lon += Math.atan2(Math.sin(brng) * Math.sin(distance / R) * Math.cos(lat), Math.cos(distance / R) - Math.sin(lat) * Math.sin(lat));\r\n  \r\n    // Coords back to degrees and return\r\n    return [(lat * 180 / Math.PI), (lon * 180 / Math.PI)];\r\n  \r\n  }\r\n\r\n\r\n  export const TestBoundaries = (site, Area)=>{\r\n    let found=false;\r\n    if(site.lat <=  Area.north && site.lat >= Area.south && site.long >= Area.west && site.long <= Area.east ){found=true}\r\n    return found\r\n}\r\n\r\n\r\n\r\n\r\n\r\n \r\n// Main Scan Class\r\nexport function PreformScan(){\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Variables */\r\n    /* *************************************************************************************************************** */        \r\n    \r\n    //this.Area=.5\r\n    //this.ScanDistanceArea=this.Area;\r\n    //this.SearchRadius = .5\r\n    //this.minSites=2\r\n    //this.WorkOrderVariants = [500,1500];\r\n    this.FilterVariables=null\r\n\r\n\r\n    this.Boundaries=null;\r\n    this.setGridpoints=null;\r\n    this.setGridPointer=null;\r\n\r\n    this.TestAgainstSites=null;\r\n    this.ScanResults=[];\r\n    this.setScanResults=null\r\n    this.sleepFor=10;\r\n    this.NESW={ north: null, south: null, east: null,  west: null }\r\n    \r\n    \r\n    this.PointOptions={\r\n        strokeColor: '#FF0000',\r\n        strokeOpacity: 0.5,\r\n        strokeWeight: 1,\r\n        fillColor: '#FF0000',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 10,\r\n        zIndex: 1\r\n      }\r\n         \r\n     this.GridPointerOptions = {\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 100,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.GridResultOptions={\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 1000,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.recOptions={\r\n        strokeColor: '#6094ff',\r\n        strokeOpacity: 0.9,\r\n        strokeWeight: 1,\r\n        fillColor: '#6094ff',\r\n        fillOpacity: 0.15,\r\n      }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /*  AUX Functions*/\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.sleep = ()=>{  return new Promise(resolve => setTimeout(resolve, this.sleepFor)) }\r\n    \r\n    this.BreakBoundaries=(Boundaries)=>{\r\n        this.NESW = {  north: Boundaries[1], south: Boundaries[0], east: Boundaries[3], west: Boundaries[2] }\r\n    }\r\n\r\n    this.arePointsNear = (checkPoint, centerPoint, km) => {\r\n                var ky = 40000 / 360;\r\n                var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\r\n                var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\r\n                var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\r\n                return Math.sqrt(dx * dx + dy * dy) <= km;\r\n            }\r\n\r\n    this.RemoveDuplicates =()=>{\r\n\r\n    }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Process */\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.Scan=()=>{\r\n            console.log(\"START SCAN \")\r\n            console.log(\"Scan Filters\", this.FilterVariables)\r\n            \r\n            this.BreakBoundaries(this.Boundaries)\r\n            //console.log(this.NESW)\r\n            \r\n            \r\n            //console.log(this.FilterVariables.Area, this.FilterVariables);\r\n            let Xiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.north, this.NESW.east,'K')/this.FilterVariables.GridSpacing;\r\n            let Yiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.south, this.NESW.west,'K')/this.FilterVariables.GridSpacing;\r\n\r\n            //console.log( Xiterations, Yiterations);\r\n            //let ScanBoxStartingPosition = llFromDistance(this.NESW.north, this.NESW.west, Math.sqrt(2)*this.Area, 135)\r\n            \r\n            //let LargestSurfaceArea = Math.max(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: this.NESW.north, lng: this.NESW.west }} />)\r\n            this.FindScanPoints(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n            \r\n        }\r\n\r\n\r\n\r\n    this.FindScanPoints = (Xiterations, Yiterations)=>{\r\n\r\n        //console.log(Xiterations, Yiterations);\r\n\r\n        let LargestSurfaceArea = Math.max(Xiterations, Yiterations)\r\n        let i=0;\r\n        let Points = []\r\n        let ReturnedLngLat;\r\n\r\n      \r\n        while( i < LargestSurfaceArea){\r\n           \r\n            ReturnedLngLat = llFromDistance(this.NESW.north, this.NESW.west, (Math.sqrt(2)*(i*this.FilterVariables.GridSpacing)), 135)\r\n            //console.log(ReturnedLngLat[0],ReturnedLngLat[1])\r\n            Points.push([ReturnedLngLat[0],ReturnedLngLat[1]]) \r\n            \r\n            i++\r\n        }\r\n\r\n        //console.log(Points);\r\n        this.MapScanPoints(Points, Xiterations, Yiterations)\r\n    }\r\n\r\n\r\n\r\n    this.MapScanPoints=(Points, Xiterations, Yiterations)=>{\r\n\r\n        let MapGrid=[]\r\n        let createCircles=[];\r\n\r\n\r\n        let ii=0;\r\n\r\n        while(ii < Yiterations){\r\n            let Row=0, Col=0, iii=0\r\n            while(iii < Xiterations){\r\n                Row=ii;\r\n                Col=iii\r\n                    //console.log([Row,Col])\r\n                    MapGrid.push([Points[Row][0], Points[Col][1]])\r\n                    createCircles.push(<Circle key={ii+iii} options={this.PointOptions}  center={{ lat: Points[Row][0], lng: Points[Col][1] }} />)\r\n                    iii++\r\n            }\r\n            ii++\r\n        }\r\n        //console.log(MapGrid);\r\n        this.setGridpoints(createCircles)\r\n        this.RunScanTest (MapGrid)\r\n    }\r\n\r\n\r\n    this.RunScanTest = async(MapGrid)=>{\r\n        \r\n        // Variables\r\n        this.setScanResults(null)\r\n        let i=0\r\n        // run loop to scan through Grid points\r\n        while(i<MapGrid.length){\r\n            // Hold scan point for FE show only\r\n            await this.sleep()\r\n            // find\r\n          //  let ScanBoxNewPosition = llFromDistance(MapGrid[i][0], MapGrid[i][1], Math.sqrt(2)*this.Area, 135)\r\n          //  south: ScanBoxNewPosition[0],east: ScanBoxNewPosition[1],\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: MapGrid[i][0], lng: MapGrid[i][1] }} />)\r\n            \r\n            // Create Circle Center point to scan in next function hand off.\r\n            let ScanBoundary = { north: MapGrid[i][0],  west: MapGrid[i][1] }\r\n            \r\n            this.scanTestDiameter(ScanBoundary)\r\n            \r\n            i++\r\n        }\r\n\r\n        this.setGridPointer(<Circle visible={false} options={this.GridPointerOptions}   />)\r\n        this.StoreResults()\r\n        ClusterAnalysis(this.ScanResults)\r\n        \r\n    }\r\n\r\n\r\n\r\n    this.scanTestDiameter = (ScanBoundary)=>{\r\n\r\n        // This function checks to see if a site is within the Radius of the center point in the scan\r\n        // it should check each site lng/lst. if true then store in array this.ScanResults;\r\n       \r\n        // Outer Global Variables\r\n        let CollectSites=[];\r\n        let long=[],lat=[],GroupedBoxBoundaryLimits=[];\r\n       // Variables\r\n       let WorkOrderCount = 0;\r\n\r\n        // Loop known sites in this area for matches\r\n        this.TestAgainstSites.map((site,i)=>{\r\n            \r\n            \r\n            if(this.arePointsNear({ lat: site.lat, lng: site.long}, { lat: ScanBoundary.north, lng: ScanBoundary.west }, this.FilterVariables.SearchRadius)){\r\n\r\n                //console.log(site)\r\n\r\n                // Push Values into Arrays\r\n                long.push(site.long);\r\n                lat.push(site.lat)\r\n                CollectSites.push(site);\r\n                \r\n                //console.log(site)\r\n                //if(site.count[0] !== null) WorkOrderCount = WorkOrderCount + site.count[0].WorkOrders;\r\n               \r\n              \r\n            } // close if true\r\n           \r\n          })  // close Map\r\n\r\n            // Limit Boundaries to outer most\r\n            GroupedBoxBoundaryLimits.push([Math.max(...long), Math.min(...long), Math.max(...lat), Math.min(...lat)])\r\n            // if work orders !0 ship it off for processing\r\n            /*\r\n            if( WorkOrderCount >= this.FilterVariables.MinWorkOrder \r\n                && WorkOrderCount <= this.FilterVariables.MaxOrderOrders \r\n                && CollectSites.length>=this.FilterVariables.minSites)\r\n                { }\r\n            */\r\n                this.ProcessGridBoundary(CollectSites, GroupedBoxBoundaryLimits, ScanBoundary)\r\n        }\r\n\r\n \r\n\r\n    this.ProcessGridBoundary=(Sites, GroupedBoxBoundaryLimits, ScanBoundary)=>{\r\n     \r\n        // Variables\r\n        let tmp = [];\r\n        let remove=[];\r\n        let removeDuplicateBoundaryLimits;\r\n        \r\n        // remove any dupliactes from arrays\r\n        removeDuplicateBoundaryLimits = GroupedBoxBoundaryLimits.filter(function (v, i) {\r\n            if (tmp.indexOf(v.toString()) < 0) \r\n                { \r\n                    tmp.push(v.toString());\r\n                    return v;\r\n                }else{\r\n                    remove.push(i)\r\n                }\r\n        });\r\n\r\n        remove.map((id,i)=>{ Sites.splice(id, 1);})\r\n\r\n        // only add items with a site count\r\n        if(Sites.length>0){\r\n            this.ScanResults.push({\r\n                Sites:Sites,\r\n                SiteCount:Sites.length,\r\n                Boundary:ScanBoundary,\r\n                //WorkOrderCount:WorkOrderCount,\r\n                GroupedBoxBoundaryLimits:removeDuplicateBoundaryLimits[0]\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    this.StoreResults = ()=>{\r\n\r\n\r\n        //console.log(\"Scan End Num\", this.ScanResults.length)\r\n        // Store Results\r\n        store.dispatch({ type:'SCANSTATE', payload:false}); \r\n        \r\n        \r\n        //store.dispatch({ type:'STORERESULTS', payload:this.ScanResults});        \r\n \r\n    }\r\n\r\n} ","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js",["474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js",[],["496","497"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js",["498"],"import React  from 'react';\r\nimport {\r\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n} from 'recharts';\r\n\r\n/*\r\nexample\r\nconst data = [\r\n  {\r\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n  },\r\n];\r\n*/\r\n\r\nconst SimpleBarChart = (props)=>{\r\n\r\n    const {Data} = props\r\n    return (\r\n      <div style={{ width: '100%', height: 400 }}>\r\n      <ResponsiveContainer>\r\n          <BarChart\r\n            width={600}\r\n            height={400}\r\n            data={Data}\r\n            margin={{\r\n              top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Bar dataKey=\"value\" fill=\"#ffbf00\" />\r\n          \r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default SimpleBarChart;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js",["499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js",["521","522"],"\r\nimport React  from 'react'\r\n\r\nexport const LogoMain=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group.png\" />)\r\n}\r\n\r\nexport const LogoMainWhite=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group-white.png\" />)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleMarkerBasedScan.js",["523","524","525","526","527","528","529","530","531","532","533","534","535","536"],"import store from \"../store/index\"\r\nimport { orderBy, findIndex, inRange} from 'lodash'; \r\n\r\n// find the distance in KM from 1 point to another\r\nfunction distancetoPoint(lat1, lon1, lat2, lon2, unit) {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1/180;\r\n        var radlat2 = Math.PI * lat2/180;\r\n        var theta = lon1-lon2;\r\n        var radtheta = Math.PI * theta/180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit==\"K\") { dist = dist * 1.609344 }\r\n        if (unit==\"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\n\r\nexport function ScanSites(){\r\n\r\n    /* ***************************************************************************************** */\r\n    // Arrays and Variable set up\r\n    this.SiteList=null;\r\n    this.SearchThisList=null\r\n    this.GlobalCluster=[]\r\n    this.GlobalCenterpoints=[]\r\n    this.CatchNoLongLat=[]\r\n    this.clusterCount=0\r\n    this.ProcessPointer=0;\r\n\r\n    this.ScanAreas=[\r\n        { name:'SameBuilding',  range: [0,0.2], allocation:0.4, maxAllocation:null, feather:0.1,restrict:[] },\r\n        { name:'CBD',           range: [0,2],   allocation:0.4, maxAllocation:null, feather:10, restrict:[]   },\r\n        { name:'InnerCity',     range: [0,10],  allocation:0.4, maxAllocation:null, feather:5,  restrict:[]   },\r\n        { name:'Metro',         range: [0,50],  allocation:0.4, maxAllocation:1, feather:1 , restrict:[]  },\r\n        { name:'OuterMetro',    range: [0,100], allocation:0.4, maxAllocation:1, feather:0 , restrict:[]  },\r\n        { name:'Regional',      range: [0,200], allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]]  },\r\n        { name:'Remote',        range: [0,500], allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]]  },\r\n        { name:'ExtremeRemote', range: [0,2000],allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]] },\r\n    ]\r\n   \r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // AUX Functions\r\n    /* ***************************************************************************************** */\r\n    this.JSONparse = ()=>{\r\n    \r\n        this.SiteList.map((site,i)=>{\r\n            if(typeof site.siteweighting === 'string')\r\n                site.siteweighting = orderBy(JSON.parse(site.siteweighting), ['name'], ['asc', 'desc']); \r\n            else\r\n                site.siteweighting = orderBy(site.siteweighting, ['name'], ['asc', 'desc']);\r\n        })\r\n        this.SiteList = orderBy(this.SiteList, item => item.count[0].WorkOrders, ['desc']);\r\n        this.SearchThisList = JSON.parse(JSON.stringify(this.SiteList));\r\n    }\r\n\r\n\r\n    this.CheckGlobalKeys=(NameKey)=>{\r\n        if(this.GlobalCluster[NameKey] === undefined)\r\n            this.GlobalCluster[NameKey] = []\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // Rules\r\n    /* ***************************************************************************************** */\r\n\r\n    this.ArrayState = ()=>{\r\n        if((this.ScanAreas.length-1) === this.ProcessPointer || this.SearchThisList.length  === 0){\r\n            console.log(\"SCAN COMPLETE\")\r\n            this.Global();\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    this.PointerState=(int)=>{\r\n        if(int === (this.SearchThisList.length-1) && int > 0){\r\n            console.log(\"Int and Arr are the Same\")\r\n            this.ProcessPointer = this.ProcessPointer + 1\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n    // Rule : is Site in radius Rule\r\n    this.IsInDistance=(SiteInFocus,site,Range)=>{\r\n        let Distance = distancetoPoint(SiteInFocus.lat, SiteInFocus.long, site.lat,site.long, \"K\")\r\n\r\n        if( Distance === 0 || Distance >= Range.range[0] && Distance <= Range.range[1] || (Distance-((Range.feather/100)*Distance)) <= Range.range[1]) \r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n\r\n    // Rule : Restrict Postcode if in restricted Category\r\n    this.sitePostCodeCheck = (postcode,region, int)=>{\r\n        let Retrict = false\r\n\r\n            region.restrict.map((range,i)=>{ Retrict = inRange(postcode, range[0], range[1])})\r\n        \r\n            if(!Retrict)\r\n                return Retrict;\r\n            else\r\n                this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n                return Retrict;\r\n        \r\n    }\r\n\r\n    // check cluster integity\r\n    this.clusterintegrity =(SiteCluster)=>{\r\n        // check to see if the cluster should be handed over to a quota\r\n        if(SiteCluster.length === 0)\r\n           return false\r\n        else\r\n            return true\r\n    }\r\n\r\n\r\n    // Cluster Rules\r\n\r\n\r\n    this.ClusterQuota = (cluster, int)=>{\r\n        let resourceQuota=[]\r\n        let MaxAllocation = this.ScanAreas[this.ProcessPointer].maxAllocation;\r\n        cluster.map((site,i)=>{\r\n            site.siteweighting.map((weight,ii)=>{  \r\n                \r\n                if(MaxAllocation === null){\r\n                    resourceQuota.push(weight[this.ScanAreas[this.ProcessPointer].name]) \r\n                }else{\r\n                    if(resourceQuota.reduce((a, b) => a + b, 0) < this.ScanAreas[this.ProcessPointer].maxAllocation){\r\n                        resourceQuota.push(weight[this.ScanAreas[this.ProcessPointer].name]) \r\n                    }\r\n                    else{\r\n                        console.log(\"Max Quota Hit for this cluster in this Category. remove the existing sites\")\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        if(resourceQuota.reduce((a, b) => a + b, 0) >=  this.ScanAreas[this.ProcessPointer].allocation){\r\n           //console.log(\"resourceQuota\", resourceQuota.reduce((a, b) => a + b, 0), this.ScanAreas[this.ProcessPointer].name, this.ScanAreas[this.ProcessPointer].allocation)\r\n            return resourceQuota.reduce((a, b) => a + b, 0)\r\n        }else{\r\n            //console.log(\"Cluster Failed to reach min resources\")\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // Power Functions \r\n    // Start Here\r\n    this.Search=()=>{\r\n        console.log(\"Begin Marker Search\")\r\n        // 1. OrderSites on site weighting\r\n        this.JSONparse();\r\n        // 2,\r\n        this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n        // 3 Rules\r\n            // Site Rules\r\n            // CLuster Rules\r\n            // State of Search Array\r\n    }\r\n    \r\n\r\n    this.ProcessScan = (Range, int)=>{\r\n\r\n        // Scan Function Variables\r\n        let SiteCluster=[]\r\n        let CenterPoints=[]\r\n        \r\n\r\n        // Scan State Rules\r\n        // If State Complete\r\n        if(this.ArrayState())   \r\n            return true\r\n        // If Pointer exhusted\r\n        if(this.PointerState(int))\r\n            return true\r\n      \r\n        // Data Collection House Keeping\r\n            // check to see if region exists in this.global\r\n            this.CheckGlobalKeys(Range.name);\r\n\r\n\r\n        let SiteInFocus = this.SearchThisList[int];\r\n       \r\n        if(SiteInFocus.combined != null){\r\n            \r\n            // Rule. Check if post code is restricted to the current scan category\r\n            if(this.sitePostCodeCheck(SiteInFocus.postcode.name, Range, int))\r\n                return false\r\n\r\n            // Create an instance of a cluster center point, should cluster exist\r\n            CenterPoints.push({\r\n                name:`${SiteInFocus.region.name}-${Range.name}-${SiteInFocus.name}`,\r\n                center:{ lat: SiteInFocus.lat, lng: SiteInFocus.long },\r\n                range:Range.range[1],\r\n                scanCategory:Range.name,\r\n                feather:Range.feather,\r\n                region:SiteInFocus.region.name,\r\n                postcode:SiteInFocus.postcode.name\r\n            })\r\n\r\n\r\n            this.SearchThisList.map((site,ii)=>{\r\n               \r\n                // 1 rule for sites.\r\n                // Do they fit into the Radius of the center point?\r\n                if(this.IsInDistance(SiteInFocus, site, Range))\r\n                    SiteCluster.push(site)\r\n                else\r\n                    return false\r\n            })\r\n\r\n\r\n        }\r\n        else{\r\n            // CATCH ALL SITES NOT INCLUDED IN SCAN\r\n            let NoLngLat = findIndex(this.CatchNoLongLat, function(o) { return o.name == SiteInFocus.name; });\r\n            if(NoLngLat === -1)\r\n                this.CatchNoLongLat.push(SiteInFocus)\r\n            \r\n            \r\n        }\r\n\r\n        // should i push to Quota or fail this cluster nad move on?\r\n        if(this.clusterintegrity(SiteCluster))\r\n            this.findResourceQuota(SiteCluster, CenterPoints, int);\r\n        else\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n       \r\n    }\r\n\r\n\r\n\r\n    this.findResourceQuota=(cluster, CenterPoints, int)=>{\r\n            //let resourceQuota=[]\r\n\r\n             // is cluster Quote over the current threshold?\r\n             let QuoteThreshold  = this.ClusterQuota(cluster, int) \r\n            \r\n             if(QuoteThreshold)\r\n                {\r\n                \r\n                    CenterPoints[0].resourceQuota = QuoteThreshold;\r\n                    CenterPoints[0].sites = cluster;\r\n                    \r\n                    this.GlobalCluster[this.ScanAreas[this.ProcessPointer].name].push(cluster);\r\n                    this.GlobalCenterpoints.push(CenterPoints[0])\r\n                    \r\n                    this.removeSites(cluster)\r\n             }\r\n\r\n           return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.removeSites=(cluster)=>{\r\n        //console.log(\"Cluster REMOVAL\")\r\n        \r\n        \r\n        let Index;\r\n        cluster.map((site,i)=>{\r\n            //console.log(site);\r\n            Index = findIndex(this.SearchThisList, function(o) { return o.name == site.name; });\r\n            //console.log(\"Index\", Index, site.name)\r\n            this.SearchThisList.splice(Index , 1)\r\n        })\r\n        this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n        //console.log(this.GlobalCluster);\r\n        //console.log(this.SearchThisList.length);\r\n        \r\n    }\r\n\r\n    this.Global = ()=>{\r\n\r\n        console.log(\"this.GlobalCluster\", this.GlobalCluster.length);\r\n        console.log(\"this.CatchNoLongLat\", this.CatchNoLongLat.length);\r\n        console.log(\"this.SearchThisList\", this.SearchThisList.length);\r\n\r\n\r\n        store.dispatch({ type:'SCANSTATE', payload:false}); \r\n        store.dispatch({ type:'STOREMARKERRESULTS', payload:this.GlobalCluster});\r\n        store.dispatch({ type:'STOREMARKERCENTERPOINTS', payload:this.GlobalCenterpoints}); \r\n        store.dispatch({ type:'STORERESIDUALMARKERS', payload:this.SearchThisList});\r\n        store.dispatch({ type:'STORENOLONGLAT', payload:this.CatchNoLongLat}); \r\n        \r\n        \r\n        \r\n    }\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleScanProcess.js",["537"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\authUser.js",["538"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Landing\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\AuthLogin\\index.js",["539"],"import React, { useEffect } from 'react';\r\nimport {useContext_AUTH_FULL} from \"../../../Context/AUTH\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport LoginForm from \"../../../venders/MaterialUI/Forms/LoginForm\"\r\n\r\n\r\nconst AuthLogin = ()=>{\r\n\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const Pushhistory = useHistory();\r\n    \r\n \r\n    \r\n    useEffect(()=>{ if(AUTH.jwt !== false){Pushhistory.push(\"/auth\");}},[AUTH])\r\n    return(\r\n        <>\r\n            <h1>Login</h1>\r\n            <LoginForm />\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthLogin;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\PrimaryFeature.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkerBasedScan.js",["540","541","542","543","544","545","546"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_STRAPI_FULL} from \"../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\nimport {RegionColor} from \"../../../actions/HandleUX\"\r\nimport {ScanSites} from \"../../../actions/HandleMarkerBasedScan\";\r\n\r\nimport { GoogleMap, LoadScript ,Marker} from '@react-google-maps/api';\r\n\r\n// Components\r\nimport Markers from \"./LocationMarkers\";\r\nimport ResidualMarkers from \"./ResidualLocationMarkers\";\r\nimport CenterPoints from \"./MarkersCenterpoints\";\r\nimport MarkerBasedResults from \"./MarkerBasedResults\";\r\n\r\nimport ScanBtn from \"./Controls/ScanStateBtn\";\r\n\r\nconst RenderScamSites = new ScanSites();\r\nconst MarkerBasedScan = ()=>{\r\n\r\n    \r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n\r\n\r\n    const Scan = ()=>{\r\n        //console.log(STRAPI.sites);\r\n        // Pass only fully loaded sites\r\n        let SiteList=[]\r\n        STRAPI.sites.map((site)=>{\r\n                console.log(site.count)\r\n    \r\n                // Add any new rules if required\r\n                if(site.count.length!== 0){\r\n                    SiteList.push(site)\r\n                }\r\n        })\r\n        RenderScamSites.SiteList=SiteList;\r\n        RenderScamSites.Search();\r\n    }\r\n\r\n \r\n    useEffect(()=>{ \r\n      \r\n        //if(SCAN.active){Scan() }\r\n     \r\n    },[SCAN.active])\r\n\r\n    useEffect(()=>{ \r\n      \r\n      console.log(SCAN.SelectedModel)\r\n      //SCANCOMPLETE\r\n     \r\n    },[SCAN])\r\n\r\n    return(\r\n        <div>\r\n            {SCAN.SelectedModel.SCANCOMPLETE?  <Map />: false}\r\n           \r\n        </div>\r\n    )\r\n}\r\n//  <ScanBtn />\r\nexport default MarkerBasedScan;\r\n\r\n\r\n\r\n\r\n\r\nconst containerStyle = { height: \"600px\", width: \"auto\" };\r\nconst Map=()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    useEffect(()=>{\r\n        console.log(SCAN.SelectedModel)\r\n    },[SCAN])\r\nreturn(\r\n    <div className=\"ScanMapMain\" id=\"MainMap\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={{\r\n                    lat: -37.813629,\r\n                    lng: 144.963058\r\n                  }}\r\n                zoom={14}\r\n               \r\n            >\r\n            { /* Child components, such as markers, info windows, etc. */ }\r\n            \r\n                <CenterPoints />\r\n                <ResidualMarkers />\r\n                <Markers />\r\n            </GoogleMap>\r\n            <ColorKey />\r\n            <MarkerBasedResults />\r\n        </div>\r\n)\r\n}\r\n\r\n\r\n// \r\n//\r\n\r\n\r\n\r\nconst ColorKey = ()=>{\r\n    return (\r\n        <div>\r\n        <div className=\"MapColorKey\">\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('SameBuilding')}}></span>\r\n                  <h2>SameBuilding</h2>\r\n              </div>\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('CBD')}}></span>\r\n                  <h2>CBD</h2>\r\n              </div>\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('InnerCity')}}></span>\r\n                  <h2>InnerCity</h2>\r\n              </div>\r\n              <div>\r\n                  <span  style={{backgroundColor:RegionColor('Metro')}}></span>\r\n                  <h2>Metro</h2>\r\n              </div>\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('OuterMetro')}}></span>\r\n                  <h2>OuterMetro</h2>\r\n              </div>\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('Regional')}}></span>\r\n                  <h2>Regional</h2>\r\n              </div>\r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('Remote')}}></span>\r\n                  <h2>Remote</h2>\r\n              </div>\r\n              \r\n              <div >\r\n                  <span style={{backgroundColor:RegionColor('ExtremeRemote')}}></span>\r\n                  <h2>ExtremeRemote</h2>\r\n              </div>\r\n        </div>\r\n  </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n/*\r\n {\r\n                STRAPI.sites.map((site, i)=>{\r\n                    return(\r\n                        <li key={i}>{i}. {site.name}</li>\r\n                        \r\n                    )\r\n                })\r\n            }\r\n onLoad={onLoad}\r\n                onUnmount={onUnmount}\r\n                <PerimeterBox />\r\n            <LocationMarkers />\r\n            <ScanBox />\r\n            <AddNewRegion />\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkersCenterpoints.js",["547","548"],"\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Circle } from '@react-google-maps/api';\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\n\r\nimport {RegionColor} from \"../../../actions/HandleUX\"\r\n\r\n\r\n\r\nconst MarkerCenterpoints = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [Centerpoints, setCenterpoints] = useState(null)\r\n    \r\n    const CreateCenterpoints = ()=>{\r\n        let StorePoints=[]       \r\n        SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((center,i)=>{\r\n        \r\n/*\r\n                        {\r\n                            name:site.name,\r\n                            center:{\r\n                                lat: site.lat,\r\n                                lng: site.long\r\n                              },\r\n                            range:Range.range[1]\r\n                        }\r\n            */\r\n           //console.log(center.center, center.range)\r\n           \r\n           \r\n\r\n           let options = {\r\n               strokeColor: RegionColor(center.scanCategory),\r\n               strokeOpacity: 0.9,\r\n               strokeWeight: 1,\r\n               fillColor: RegionColor(center.scanCategory),\r\n               fillOpacity: 0.2,\r\n               radius: ((center.range*1000)),\r\n               zIndex: 1\r\n             }\r\n            let Featheroptions = {\r\n                strokeColor: RegionColor(center.scanCategory),\r\n                strokeOpacity: 0.7,\r\n                strokeWeight: 3,\r\n                fillColor: RegionColor(center.scanCategory),\r\n                fillOpacity: 0.01,\r\n                radius: (( (center.range+((center.feather/100)*center.range)) *1000)),  \r\n                zIndex: 1\r\n              }\r\n           StorePoints.push(\r\n                <span key={i}>\r\n                    <Circle center={center.center} options={options}/>\r\n                    <Circle center={center.center} options={Featheroptions}/>\r\n                </span>\r\n           )\r\n            \r\n        })\r\n        setCenterpoints(StorePoints)\r\n        \r\n    }\r\n    \r\n    \r\n    useEffect(()=>{  CreateCenterpoints() },[SCAN.SelectedModel])\r\n\r\n    useEffect(()=>{},[ Centerpoints])\r\n\r\n    return(\r\n        <>\r\n            {Centerpoints}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerCenterpoints;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\ResidualLocationMarkers.js",["549","550","551","552","553","554","555","556","557"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkersALL = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n       // console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        \r\n        let StoreMarkers=[]         \r\n                markers.map((site,i)=>{\r\n                    Targeticon = {\r\n                        path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                        fillColor: '#3D3D3D',\r\n                        fillOpacity: .9,\r\n                        anchor: new window.google.maps.Point(0,0),\r\n                        strokeWeight: 0,\r\n                        scale: .5,\r\n                        zIndex:10\r\n                    };\r\n                    StoreMarkers.push( \r\n                        \r\n                            <Marker\r\n                                key={i}\r\n                                onLoad={onLoadMarker}\r\n                                title={site.name}\r\n                                label={site.name}\r\n                                icon={Targeticon}\r\n                                onClick={()=>{OnMarkerClick(site.name)}}\r\n                                position={{\r\n                                        lat: parseFloat(site.lat),\r\n                                        lng: parseFloat(site.long)\r\n                                    }}\r\n                            />\r\n                    )\r\n                })\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{  CreateMarkers(SCAN.SelectedModel.STORERESIDUALMARKERS)},[SCAN.SelectedModel])\r\n\r\n      return(  <>{DisplayMarkers}</>) \r\n\r\n}\r\n\r\nexport default MarkerBasedLocationMarkersALL;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\MarkerBasedResults.js",["558","559"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\LocationMarkers.js",["560","561","562","563","564","565","566","567","568","569","570","571"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker, MarkerClusterer  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\nimport {RegionColor} from \"../../../actions/HandleUX\"\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n  const mcOptions = {\r\n    styles: [{\r\n        height: 53,\r\n        url: \"/clusters/m1.png\",\r\n        width: 53,\r\n\r\n      },\r\n      {\r\n        height: 56,\r\n        url: \"/clusters/m2.png\",\r\n        width: 56,\r\n      },\r\n      {\r\n        height: 66,\r\n        url: \"/clusters/m3.png\",\r\n        width: 66,\r\n      },\r\n      {\r\n        height: 78,\r\n        url: \"/clusters/m4.png\",\r\n        width: 78,\r\n      },\r\n      {\r\n        height: 90,\r\n        url: \"/clusters/m5.png\",\r\n        width: 90,\r\n      }\r\n    ]\r\n  }\r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name, Region)=>{console.log(\"Marker Clicked\", name, Region) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers,  clusterer)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        let StoreMarkers=[];\r\n\r\n        markers.map((centerPoint,i)=>{\r\n          //console.log(centerPoint.sites)\r\n          centerPoint.sites.map((site,ii)=>{\r\n\r\n              Targeticon = {\r\n                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                fillColor: RegionColor(centerPoint.scanCategory),\r\n                fillOpacity: .9,\r\n                anchor: new window.google.maps.Point(0,0),\r\n                strokeWeight: 0,\r\n                scale: 1\r\n            }; \r\n          \r\n            \r\n            StoreMarkers.push( \r\n                \r\n                    <Marker\r\n                        clusterer={clusterer}\r\n                        key={site.name}\r\n                        onLoad={onLoadMarker}\r\n                        title={site.name}\r\n                        label={site.name}\r\n                        icon={Targeticon}\r\n                        onClick={()=>{OnMarkerClick(site.name, centerPoint.scanCategory)}}\r\n                        position={{\r\n                                lat: parseFloat(site.lat),\r\n                                lng: parseFloat(site.long)\r\n                            }}\r\n                    />\r\n                \r\n            )\r\n            })\r\n        })\r\n        /*\r\n        Object.keys(markers).map((key, value)=>{\r\n            //console.log(markers[key], value)\r\n              markers[key].map((sites,i)=>{\r\n                  sites.map((site,ii)=>{\r\n\r\n                  \r\n                  })\r\n              })\r\n          })*/\r\n     //   setDisplayMarkers(StoreMarkers);\r\n        return StoreMarkers;\r\n        }\r\n\r\n\r\n \r\n   \r\n\r\n      useEffect(()=>{ \r\n        if(CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS) != undefined)\r\n          CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS)\r\n      },[SCAN.SelectedModel])\r\n\r\n      return(  <>\r\n               \r\n                 <MarkerClusterer options={mcOptions} maxZoom={12} minimumClusterSize={30}>\r\n                    {(clusterer) =>\r\n                       CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS, clusterer)\r\n                    }\r\n                  </MarkerClusterer>\r\n                </>\r\n                )\r\n\r\n}\r\n\r\n\r\nexport default MarkerBasedLocationMarkers;\r\n\r\n//  {DisplayMarkers}\r\n/*\r\nlocations.map((location) => (\r\n                        <Marker key={createKey(location)} position={location} clusterer={clusterer} />\r\n                      ))\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\Controls\\ScanStateBtn.js",["572"],"import React, { useEffect,useState } from 'react'\r\nimport {ScanState} from \"../../../../actions/HandleUX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst btnPara={\r\n    label:'Scan Now',\r\n    disabled:false\r\n}\r\n\r\nconst btnActivePara={\r\n    label:'Scanning',\r\n    disabled:true\r\n}\r\n\r\nconst ScanSwitch = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [btn,setbtn] = useState(btnPara)\r\n    \r\n    const handle=()=>{  \r\n        ScanState(true);\r\n        console.log(\"Scan NOW!!!!! true\");\r\n    }\r\n\r\n    useEffect(()=>{ \r\n     \r\n        console.log(SCAN.active)\r\n        if(SCAN.active)\r\n            setbtn(btnActivePara)\r\n        if(!SCAN.active)\r\n            setbtn(btnPara)\r\n\r\n    },[SCAN])\r\n    return(\r\n        <div className=\"ScanBtnContainer\">\r\n             <Button variant=\"contained\" onClick={handle} disabled={btn.disabled} >\r\n                {btn.label}\r\n            </Button>\r\n        \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ScanSwitch;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\SelectRegionLayout.js",["573","574"],"import React, {useEffect, useState} from 'react'\r\n//import { useSelector } from \"react-redux\";\r\n//import store from \"../../../../store/index\"\r\n\r\n\r\nimport Controls from \"../Controls/controls\"\r\n\r\nconst SelectARegion = ()=>{\r\n\r\n    return(\r\n        <div className=\"Main\">\r\n            <Controls />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectARegion;\r\n//\r\n//<Controls  STRAPI={STRAPI} Filters={Filters} onHandle={onHandle}/>","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\ScanResultsLayout.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\MarkerBasedScan\\Results\\ClusterResults.js",["575","576","577","578"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport{NumberReducer} from \"../../../../actions/HandleUX\";\r\n\r\n//import DeleteClusterBtn from \"../Controls/buttons/DeleteClusterBtn\";\r\n//import BacktoMap from \"../Controls/buttons/BacktoMapBtn\";\r\n//import ClusterMap from \"../../Prototype/Components/Map/clusterMap/clustermap\"\r\n//import MoreInfo from \"./MoreInfo\";\r\n\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [Multiplier, setMultiplier]= useState(1000)\r\n    const [ClusterTotal, setClusterTotal] = useState(0)\r\n\r\n\r\n    const FindClusterTotal = (result)=>{\r\n        let total=0;\r\n        result.ClusterCost.map((type,i)=>{ total = total + type[1] })\r\n        \r\n        setClusterTotal(NumberReducer(parseFloat((total*Multiplier).toFixed(2))))\r\n    }\r\n\r\n\r\n    useEffect(()=>{ \r\n        //FindClusterTotal(result) \r\n        //console.log(result)\r\n    },[result])\r\n\r\n    return(\r\n        <>\r\n            <h3><LocationCityIcon /> Cluster { (i+1) }  - <strong>{result.scanCategory}</strong></h3>\r\n            <h3>Cluster Resource Quota : <strong>{result.resourceQuota.toFixed(2)}</strong></h3> \r\n            <h3>est Cluster Cost : <strong>${0}</strong></h3>\r\n            <div className=\"ListResultContainer\">\r\n                <div className=\"Title\">\r\n                <h3> {result.name}</h3>\r\n                </div>\r\n                Add Map and Cluster Details once Data dump has been completed\r\n \r\n            </div>\r\n                \r\n               \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClusterResult;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\ScanResults.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\Header.js",["579","580","581","582","583"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"../../../../../Context/STRAPI\";\r\nimport {useContext_STRAPI_Regions} from \"../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\nimport {SelectedRegion, CreateMapParameters} from \"../../../../../actions/HandleUX\"\r\nimport { findIndex} from 'lodash'; \r\nconst FeatureHeader = ()=>{\r\n    const STRAPI = useContext_STRAPI_FULL()\r\n    const Regions = useContext_STRAPI_Regions();\r\n\r\n    const UX = useContext_UX_FULL()\r\n    //const [SelectedRegion,setSelectedRegion] = useState(UX.SelectedArea);\r\n\r\n   const  [WorkOrderCount,setWorkOrderCount ] = useState(0)\r\n   const  [Sites,setSites ] = useState(0)\r\n   const  [Cities,setCities ] = useState(0)\r\n  \r\n    \r\n   const WorkorderCount =()=>{\r\n       let WO=0, Cities=0, Sites=0\r\n       \r\n        UX.SelectedArea.map((region,i)=>{\r\n           \r\n            WO = WO+region.count[0].WorkOrders\r\n            Cities = Cities + region.cities.length\r\n            Sites = Sites + region.sites.length\r\n        });\r\n        setWorkOrderCount(WO)\r\n        setSites(Sites)\r\n        setCities(Cities)\r\n   }\r\n   \r\n\r\n   const handleRemove = (item)=>{\r\n        console.log(\"Remove this item\", item.id, UX.SelectedArea)\r\n        let index = findIndex( UX.SelectedArea, function(o) { return o.id === item.id; })\r\n        UX.SelectedArea.splice(index, 1);\r\n        CreateMapParameters(UX.SelectedArea)\r\n   }\r\n\r\n\r\n   useEffect(()=>{\r\n       console.log(\"UX.SelectedArea\", UX.SelectedArea)\r\n        WorkorderCount()\r\n    },[UX.MapParameters])\r\n\r\n    return( \r\n        <>\r\n        <div>\r\n                <ul className=\"RegionRoundup\">\r\n                    <li><h2>{UX.SelectedArea.length}</h2><p>Regions</p> </li>\r\n                    <li><h2>{Sites}</h2><p>Sites</p> </li>\r\n                    <li><h2>{Cities}</h2><p>Cities</p> </li>\r\n                    <li><h2>{WorkOrderCount}</h2><p>Work orders</p></li>\r\n                </ul>\r\n            </div>\r\n            \r\n        <div id=\"FeatureHeader\">\r\n            <div className=\"SelectedCenter\">\r\n                <h2> Centered Region: </h2>\r\n                <h3> {UX.AreaSelectFilter.region.name} </h3>\r\n            </div>\r\n\r\n            <div className=\"AdditionalRegions\">\r\n                <h3>Regions Included in these results</h3>\r\n                <ul className=\"RegionsInScan\">\r\n                    { UX.SelectedArea.map((region,i)=>{\r\n                          return( <li key={i}>\r\n                                    <p>{region.name}</p> \r\n                                    <button onClick={()=>{handleRemove(region)}}>Remove</button>\r\n                                </li>)  \r\n                    })}\r\n                </ul>\r\n            </div>    \r\n           \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\nexport default FeatureHeader;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Layout\\MapFilterControls.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\controls.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\map.js",["584","585","586","587","588","589"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\nimport {CreateMapParameters} from \"../../../../../actions/HandleUX\"\r\n\r\nimport { GoogleMap, LoadScript ,Marker} from '@react-google-maps/api';\r\n\r\n// Components\r\nimport LocationMarkers from \"./LocationMarkers\";\r\nimport PerimeterBox from \"./PerimeterBox\";\r\nimport ScanBox from \"./ScanBox\"; \r\nimport AddNewRegion from \"./AddNewRegion\";\r\n\r\nlet _ = require('lodash');\r\nconst iconBase =\"/icons/\";\r\nconst containerStyle = { height: \"600px\", width: \"auto\" };\r\nlet Targeticon = {};\r\nconst MapSwitch = ()=>{\r\n    \r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    \r\n    // USe function pulls the Meta data from UX.SelectedArea. Its !IMPORTANT\r\n    useEffect(()=>{ CreateMapParameters(UX.SelectedArea) },[UX.AreaSelectFilter])\r\n\r\n    useEffect(()=>{ CreateMapParameters(UX.SelectedArea) },[UX.SelectedArea])\r\n    return( \r\n        <>\r\n            {\r\n                UX.MapParameters.SetMap ? <DisplayMap />:<div>Switch</div>\r\n            }\r\n        </>\r\n    )\r\n\r\n   \r\n}\r\n\r\n\r\nexport default MapSwitch;\r\n\r\n\r\n\r\nconst DisplayMap=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [MapParameters, setMapParameters] = useState(UX.MapParameters)\r\n    const onLoad = React.useCallback(function callback(map) {\r\n\r\n        Targeticon = {\r\n            url: iconBase + \"target.png\", // url\r\n            scaledSize: new window.google.maps.Size(50, 50), // scaled size\r\n            origin: new window.google.maps.Point(0,0), // origin\r\n            anchor: new window.google.maps.Point(25, 25) // anchor\r\n        }; \r\n\r\n                const bounds = new window.google.maps.LatLngBounds(\r\n                    //bottom left\r\n                    new window.google.maps.LatLng(MapParameters.LatLngBoundaries[0], MapParameters.LatLngBoundaries[2]),\r\n                    //top right\r\n                    new window.google.maps.LatLng(MapParameters.LatLngBoundaries[1], MapParameters.LatLngBoundaries[3])\r\n                    )\r\n                    map.fitBounds(bounds)\r\n                    //setMap(map);\r\n                \r\n      }, [])\r\n      \r\n      \r\n      const onUnmount = React.useCallback(function callback(map) {\r\n        //setMap(null)\r\n  }, []);\r\n\r\n\r\n  useEffect(()=>{\r\n      setMapParameters(UX.MapParameters);},[UX.MapParameters])\r\n\r\n    return(\r\n       <div className=\"ScanMapMain\" id=\"MainMap\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={{\r\n                    lat: MapParameters.BoundaryCenterPoint[0],\r\n                    lng: MapParameters.BoundaryCenterPoint[1]\r\n                  }}\r\n                zoom={MapParameters.zoom}\r\n                onLoad={onLoad}\r\n                onUnmount={onUnmount}\r\n            >\r\n            { /* Child components, such as markers, info windows, etc. */ }\r\n            <PerimeterBox />\r\n            <LocationMarkers />\r\n            <ScanBox />\r\n            <AddNewRegion />\r\n        </GoogleMap>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n\r\n      \r\n             \r\n             \r\n\r\n\r\n      const ReverseGeoCode = (OBJ)=>{\r\n\r\n        axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${OBJ.lat},${OBJ.lng}&key=AIzaSyCfjTtkNqCy9J_CTva17nVpWqRff8CeCjI`)\r\n        .then((res)=>{ \r\n                console.log(res);\r\n                if(res.data.results.length > 0 ){\r\n                    console.log(res.formatted_address)\r\n                    setCenteredLocation(res.data.results[0].formatted_address)\r\n                }\r\n                else{\r\n                    setCenteredLocation(\"No Result Returned!\")\r\n                }\r\n                \r\n            })\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\nconst GeoSourceResources = (props)=>{\r\n\r\n\r\n\r\n    // collection infomation from Feature\r\n    const {SelectedRegion} = props\r\n    const [center,setCenter] = useState({ lat: 37.090240, lng: -95.712891 })\r\n    const [LatLngBounds, setLatLngBounds] = useState([])\r\n    const [zoom, setZoom] = useState(2)\r\n    const [Markerset, setMarkerset]= useState(null)\r\n    \r\n    // Display Map when true\r\n    const [LoadingMapDetails, setLoadingMapDetails] = useState(false)\r\n    \r\n\r\n    const findBoundary = (Data)=>{\r\n\r\n            let centerLatArray = [];\r\n            let centerLngArray = [];\r\n            Data.map((marker, i)=>{\r\n                if(!isNaN(parseFloat(marker.lat))){\r\n                    centerLatArray.push(parseFloat(marker.lat))\r\n                    centerLngArray.push(parseFloat(marker.long))\r\n                }\r\n            })\r\n\r\n            var centerLat = ((Math.min(...centerLatArray) + Math.max(...centerLatArray))/2)\r\n            var centerLng = ((Math.min(...centerLngArray) + Math.max(...centerLngArray))/2)\r\n\r\n            //console.log(centerLat);\r\n            //console.log(centerLng);\r\n            \r\n            setLatLngBounds([Math.min(...centerLatArray),Math.max(...centerLatArray),Math.min(...centerLngArray),Math.max(...centerLngArray)])\r\n            setZoom(14)\r\n            setCenter({lat:centerLat, lng:centerLng})\r\n            setLoadingMapDetails(true)\r\n          \r\n      }\r\n\r\n\r\n\r\n      useEffect(()=>{ \r\n          console.log(\"New Location Selected\")\r\n            findBoundary(SelectedRegion.sites); \r\n        }, [SelectedRegion])\r\n\r\n    return (\r\n        <div>\r\n            { LoadingMapDetails ? <DisplayMap LatLngBounds={LatLngBounds} center={center} zoom={zoom} {...props}/>: 'Loading Map'  }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\ScanStateBtn.js",["590"],"import React, { useEffect,useState } from 'react'\r\nimport {ScanState} from \"../../../../../../actions/HandleUX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst btnPara={\r\n    label:'Scan Now',\r\n    disabled:''\r\n}\r\n\r\nconst btnActivePara={\r\n    label:'Scanning',\r\n    disabled:'disabled'\r\n}\r\n\r\nconst ScanSwitch = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [btn,setbtn] = useState(btnPara)\r\n    \r\n    const handle=()=>{  \r\n        ScanState(true);\r\n        console.log(\"Scan NOW!!!!! true\");\r\n    }\r\n\r\n    useEffect(()=>{ \r\n     \r\n        console.log(SCAN.active)\r\n        if(SCAN.active)\r\n            setbtn(btnActivePara)\r\n        if(!SCAN.active)\r\n            setbtn(btnPara)\r\n\r\n    },[SCAN])\r\n    return(\r\n        <div className=\"ScanBtnContainer\">\r\n             <Button variant=\"contained\" onClick={handle} disabled={btn.disabled} >\r\n                {btn.label}\r\n            </Button>\r\n        \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ScanSwitch;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMaxWorkOrders.js",["591","592"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.MaxOrderOrders);\r\n    const [Label, setLabel]= useState('W/O Max')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[500,1000, 2000, 3000, 5000, 10000, 100000, 10000000]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMAXWORKORDERS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMinWorkOrders.js",["593","594"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.MinWorkOrder);\r\n    const [Label, setLabel]= useState('W/O Min')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[0, 1,20,50,100,150,200,500,1000, 2000, 3000, 5000, 10000]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMINWORKORDERS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectMinSitesPerScan.js",["595","596"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.minSites);\r\n    const [Label, setLabel]= useState('Min Sites')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[1,2,5,10,20,30,40,50]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMINSITES', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectGridSpacing.js",["597","598"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.GridSpacing);\r\n    const [Label, setLabel]= useState('Set Grid Spacing')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[.5,1,1.5,2,2.5,3,3.5,4,4.5,5]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEGRIDSPACING', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectRaduis.js",["599","600"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(SCAN.LocationFilter.SearchRadius);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Scan Radius')\r\n  \r\n  \r\n    const Radui=[.5,1,1.5,2,2.5,3,3.5,4,4.5,5]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGERADIUS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\Results.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\ScanBox.js",["601","602","603","604","605"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport {PreformScan} from \"../../../../../actions/GeoLocationActions\";\r\nimport { Rectangle } from '@react-google-maps/api';\r\n\r\n\r\n//\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport DeleteCluster from \"../Controls/buttons/DeleteClusterBtn\";\r\nimport ClusterMap from \"../Map/clusterMap/clustermap\"\r\n//\r\nconst RenderScan = new PreformScan();\r\n\r\nconst recOptions={\r\n    strokeColor: '#6094ff',\r\n    strokeOpacity: 1,\r\n    strokeWeight: 1.5,\r\n    fillColor: '#6094ff',\r\n    fillOpacity: 0.35,\r\n  }\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nconst ScanBox = ()=>{\r\n\r\n    // Dialouge Box\r\n    const [open, setOpen] = useState(false);\r\n    const [clusterId, setclusterId]= useState(null)\r\n    const [DeleteClusterRow, setDeleteClusterRow] = useState(null)\r\n\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [ScanResults, setScanResults] = useState([])\r\n    \r\n    // Region Grid\r\n    const [Gridpoints, setGridpoints] = useState(null)\r\n    const [GridPointer, setGridPointer] = useState(null)\r\n\r\n\r\n\r\n\r\n\r\n    const ScrolltoCluster=()=>{\r\n        console.log(clusterId)\r\n       \r\n       \r\n        setOpen(false);\r\n        setTimeout(()=>{document.getElementById(clusterId).scrollIntoView({ behavior: 'smooth' });},500)\r\n    }\r\n    const handleClickOpen = (cluster, i) => {\r\n\r\n       \r\n        setDeleteClusterRow(SCAN.Results[i])\r\n        setclusterId(cluster)\r\n        setOpen(true);\r\n      };\r\n    \r\n      const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n   const TestScan = ()=>{\r\n            RenderScan.Boundaries=UX.MapParameters.LatLngBoundaries;\r\n            RenderScan.FilterVariables = SCAN.LocationFilter\r\n            RenderScan.setGridpoints= setGridpoints;\r\n            RenderScan.setGridPointer= setGridPointer\r\n            RenderScan.TestAgainstSites =  UX.MapParameters.markers;\r\n            RenderScan.ScanResults=[]\r\n            RenderScan.setScanResults= setScanResults\r\n            RenderScan.Scan();\r\n   }\r\n\r\n   const CreateBorders = (Data)=>{\r\n\r\n    let DisplayBorderResults=[];\r\n    Data.map((border,i)=>{\r\n        let position = border.GroupedBoxBoundaryLimits;\r\n        DisplayBorderResults.push(<Rectangle key={i} onClick={()=>{handleClickOpen(`Cluster${i}`, `${i}`)}} visible={true} options={recOptions} bounds={{north: position[3],south: position[2],east: position[0],west: position[1]}} />)\r\n    })\r\n        setScanResults(DisplayBorderResults)\r\n   }\r\n\r\n\r\n    useEffect(()=>{ \r\n        //console.log('SCAN', SCAN.active) \r\n        if(SCAN.active){TestScan() }\r\n     \r\n    },[SCAN])\r\n\r\n    useEffect(()=>{ \r\n        if(SCAN.Results.length != 0 ){ CreateBorders(SCAN.Results); } },[SCAN])\r\n\r\n    return(\r\n        <>\r\n            {Gridpoints}\r\n            {GridPointer}\r\n            {ScanResults}\r\n\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Selected Cluster\"}</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    <ClusterMap Data={DeleteClusterRow} />\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={()=>{ScrolltoCluster()}} color=\"primary\">\r\n                    View to Cluster\r\n                </Button>\r\n            \r\n                <DeleteCluster  Data={DeleteClusterRow}/>\r\n                \r\n                <Button onClick={handleClose} color=\"primary\">\r\n                   Close Box\r\n                </Button>\r\n                \r\n                </DialogActions>\r\n      </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ScanBox;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\AddNewRegion.js",["606","607","608","609","610","611"],"import React, {useEffect, useMemo, useState} from 'react'\r\nimport {useContext_STRAPI_Regions} from \"../../../../../Context/STRAPI\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\nimport {SelectedRegion, CreateMapParameters} from \"../../../../../actions/HandleUX\"\r\nimport { find} from 'lodash'; \r\n\r\nconst AddNewRegion = ()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const Regions = useContext_STRAPI_Regions();\r\n    const [NewRegions, setNewRegions] = useState(null)\r\n    const [markerRemoved,setmarkerRemoved] = useState([])\r\n    \r\n    const onLoadMarker=(name)=>{\r\n       // console.log(name)\r\n    }\r\n\r\n    const OnMarkerClick=(region,e)=>{\r\n        \r\n        \r\n        setNewRegions(null);\r\n        console.log(\"Add new Region : \", region.name, region.id)\r\n       \r\n        let FindRegion = find(Regions, function(o) { return o.id === region.id; });\r\n        UX.SelectedArea.push(FindRegion);\r\n\r\n        SelectedRegion(UX.SelectedArea);\r\n        CreateMapParameters(UX.SelectedArea);\r\n        \r\n    }\r\n\r\n    const CreateAddNewRegion = (Data)=>{\r\n          \r\n       \r\n        let StoreMarkers=[]\r\n        //console.log(UX.SelectedArea, StoreMarkers);\r\n\r\n            Data.map((region,i)=>{\r\n                if(find(UX.SelectedArea, {id: region.id}) === undefined){\r\n\r\n                let Targeticon = {\r\n                    path: \"M25 1c-13.234 0-24 10.766-24 24 0 13.233 10.766 24 24 24 13.233 0 24-10.767 24-24 0-13.234-10.767-24-24-24zm3 43.75v-8.75h-6v8.75c-8.625-1.307-15.443-8.125-16.75-16.75h8.75v-6h-8.75c1.307-8.625 8.125-15.443 16.75-16.75v8.75h6v-8.75c8.625 1.307 15.443 8.125 16.75 16.75h-8.75v6h8.75c-1.307 8.625-8.125 15.443-16.75 16.75z\",\r\n                    fillColor: '#FF0000',\r\n                    fillOpacity: .9,\r\n                    anchor: new window.google.maps.Point(0,0),\r\n                    strokeWeight: 0,\r\n                    scale: 1\r\n                }; \r\n                   \r\n\r\n                StoreMarkers.push( \r\n                    <>\r\n                        <Marker\r\n                            key={i}\r\n                            onLoad={onLoadMarker(region.name)}\r\n                            title={region.name}\r\n                            label={region.name}\r\n                            icon={Targeticon}\r\n                           \r\n                            onClick={OnMarkerClick.bind(this,region)}\r\n                            position={{\r\n                                    lat: parseFloat(region.lat),\r\n                                    lng: parseFloat(region.long)\r\n                                }}\r\n                                visible={true}\r\n                        />\r\n                    </>\r\n                )\r\n\r\n                } // close lodash if\r\n            })// close Map\r\n            setNewRegions(StoreMarkers)\r\n    }\r\n\r\n\r\n    useEffect(()=>{ CreateAddNewRegion(UX.AreaSelectFilter.state.regions); },[UX.AreaSelectFilter])\r\n    useEffect(()=>{ CreateAddNewRegion(UX.AreaSelectFilter.state.regions);},[UX.MapParameters])\r\n    return(<> {NewRegions} </>)\r\n}\r\n\r\nexport default AddNewRegion;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\ClusterResults.js",["612","613","614"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport{NumberReducer} from \"../../../../../actions/HandleUX\";\r\n\r\nimport DeleteClusterBtn from \"../Controls/buttons/DeleteClusterBtn\";\r\nimport BacktoMap from \"../Controls/buttons/BacktoMapBtn\";\r\nimport ClusterMap from \"../Map/clusterMap/clustermap\";\r\nimport MoreInfo from \"./MoreInfo\";\r\n\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [Multiplier, setMultiplier]= useState(1000)\r\n    const [ClusterTotal, setClusterTotal] = useState(0)\r\n\r\n\r\n    const FindClusterTotal = (result)=>{\r\n        let total=0;\r\n        result.ClusterCost.map((type,i)=>{ total = total + type[1] })\r\n        \r\n        setClusterTotal(NumberReducer(parseFloat((total*Multiplier).toFixed(2))))\r\n    }\r\n\r\n\r\n    useEffect(()=>{ FindClusterTotal(result) },[result])\r\n\r\n    return(\r\n        <>\r\n        <h3><LocationCityIcon /> Cluster { (i+1) }</h3> \r\n        <h3>Resources Required : <strong>{result.TradeTypeCount[0].length}</strong></h3>\r\n        <h3>est Cluster Cost : <strong>${ClusterTotal}</strong></h3>\r\n        <div className=\"ListResultContainer\">\r\n                <div className=\"Title\">\r\n                    \r\n                    <div className=\"metaData\">\r\n                        <BacktoMap />\r\n                        <h3> Work order Count : <strong>{result.WorkOrderCount}</strong></h3>\r\n                        <h3> Sites in this Region : <strong>{result.SiteCount}</strong></h3>\r\n                        <DeleteClusterBtn Data={result}/> \r\n                    </div>\r\n                    \r\n                </div>\r\n              \r\n                <ClusterMap Data={result}/>\r\n                <MoreInfo result={result}/>\r\n        </div>\r\n        </>\r\n    )\r\n} \r\n\r\nexport default ClusterResult;\r\n\r\n/*\r\n  <div className=\"ClusterOverview\">\r\n                    \r\n                    </div>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\DeleteClusterBtn.js",["615"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {useContext_SCAN_FULL} from \"../../../../../../Context/SCAN\";\r\nimport {RemoveClusterItem} from \"../../../../../../actions/HandleUX\";\r\n\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nconst ScanSwitch = (props)=>{\r\n    const {Data} = props\r\n    const SCAN = useContext_SCAN_FULL();\r\n    return(\r\n        <IconButton aria-label=\"delete\" className=\"DeleteCluster\" onClick={()=>{ RemoveClusterItem(SCAN.Results, Data.Boundary)}} >\r\n            <DeleteForeverIcon fontSize=\"inherit\" />\r\n        </IconButton>\r\n             \r\n    )\r\n}\r\n\r\nexport default ScanSwitch;\r\n\r\n/*\r\n<Button variant=\"contained\" onClick={()=>{ RemoveClusterItem(SCAN.Results, Data.Boundary)}}  >\r\n                   <DeleteForeverIcon />\r\n            </Button>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\clustermap.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\LocationMarkers.js",["616","617","618","619","620","621"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst LocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    \r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n    const [StarMarker, setStarMarker] = useState(null)\r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n        console.log(\"markers\", markers)\r\n         let MinMax = FindMinMax(markers);\r\n         let NewMarkers =    uniqBy(markers, 'combined');\r\n         let StoreMarkers=[]\r\n         \r\n         console.log('CreateMarkers', markers.length, NewMarkers.length);\r\n         \r\n         NewMarkers.map((marker, i)=>{\r\n                     let fillVariable;\r\n         \r\n                    if(!isNaN(parseFloat(marker.lat)) && marker.count[0] != null){\r\n\r\n                            //Find the WO percetage value based on highest and lowest range\r\n                            let int = ((marker.count[0].WorkOrders - MinMax[0]) * 100) / (MinMax[1] - MinMax[0])\r\n                            fillVariable = ColorMe((int.toFixed(2)/10));\r\n\r\n                            Targeticon = {\r\n                                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                                fillColor: fillVariable,\r\n                                fillOpacity: .9,\r\n                                anchor: new window.google.maps.Point(0,0),\r\n                                strokeWeight: 0,\r\n                                scale: 1,\r\n                                zIndex:100\r\n                            }; \r\n                               \r\n\r\n                            StoreMarkers.push( \r\n                                \r\n                                    <Marker\r\n                                        key={i}\r\n                                        onLoad={onLoadMarker}\r\n                                        title={marker.name}\r\n                                        label={marker.name}\r\n                                        icon={Targeticon}\r\n                                        onClick={()=>{OnMarkerClick(marker.name)}}\r\n                                        position={{\r\n                                                lat: parseFloat(marker.lat),\r\n                                                lng: parseFloat(marker.long)\r\n                                            }}\r\n                                    />\r\n                                \r\n                            )\r\n                    }                   \r\n            })\r\n            setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ CreateMarkers(UX.MapParameters.markers)},[UX.MapParameters])\r\n\r\n      return(  <>{DisplayMarkers} {StarMarker}</>)\r\n\r\n}\r\n\r\n\r\nexport default LocationMarkers;\r\n\r\n\r\n\r\nconst MarkerIcon  = ()=>{\r\n    return(<svg baseProfile=\"basic\" xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n<path d=\"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\"/>\r\n</svg>)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateRegion.js",["622","623"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_Regions} from \"../../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter, SelectedRegion} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { find, orderBy} from 'lodash'; \r\n\r\n\r\n/*  SWITCH ***************** */\r\nconst SwitchOnSelect = ()=>{\r\n    const UX = useContext_UX_FULL();\r\n  \r\n    const [Show, setShow]= useState(false);\r\n\r\n    useEffect(()=>{\r\n        UX.AreaSelectFilter.state === null ? setShow(false):setShow(true)\r\n    },[UX.AreaSelectFilter.state])\r\n\r\n    if(Show) return( <MaterialUISelectRegion />) \r\n   \r\n    return( <div> <p>Awaiting Regions.</p> </div>)    \r\n}\r\n\r\nexport default SwitchOnSelect;\r\n\r\n\r\n/* SELECT ********** */\r\n\r\nconst  MaterialUISelectRegion = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const Regions = useContext_STRAPI_Regions();\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.region);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Select Regions')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n      \r\n        let FindRegion = find(Regions, function(o) { return o.id === event.target.value.id; });\r\n        AreaFilter('AREAFILTERREGION', event.target.value);\r\n        \r\n        setValue(event.target.value);\r\n        SelectedRegion([FindRegion])\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n    useEffect(()=>{},[UX.AreaSelectFilter.state])\r\n    return (\r\n      <div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n              labelId=\"demo\"\r\n              id=\"demo\"\r\n              open={open}\r\n              onClose={handleClose}\r\n              onOpen={handleOpen}\r\n              value={Value}\r\n              onChange={handleChange}\r\n              disabled={Disabled}\r\n          >\r\n              {\r\n                \r\n                orderBy(UX.AreaSelectFilter.state.regions, ['name'], ['asc', 'desc']).map((item, i)=>{\r\n                    return(<MenuItem key={i} value={item} >{item.name} </MenuItem>)\r\n                  })\r\n                }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n//({item.count[0].WorkOrders})\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\PerimeterBox.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateState.js",["624","625","626"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_States} from \"../../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport {  orderBy} from 'lodash'; \r\nconst  MaterialUISelectState = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const STATES= useContext_STRAPI_States();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.state);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Select State')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n        AreaFilter('AREAFILTERSTATE', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n    useEffect(()=>{},[Value]);\r\n    useEffect(()=>{ console.log(STATES)},[])\r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n              labelId=\"demo\"\r\n              id=\"demo\"\r\n              open={open}\r\n              onClose={handleClose}\r\n              onOpen={handleOpen}\r\n              value={Value}\r\n              onChange={handleChange}\r\n              disabled={Disabled}\r\n          >\r\n              {\r\n                \r\n              orderBy(STATES, ['name'], ['asc', 'desc']).map((item, i)=>{\r\n                    return(<MenuItem key={i} value={item} >{item.name} ({item.count[0].WorkOrders})</MenuItem>)\r\n                  })\r\n                }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectState;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\inputs\\SelectStateCountry.js",["627","628"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_Countries} from \"../../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter} from \"../../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const COUNTRIES= useContext_STRAPI_Countries();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.country);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Country')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n        AreaFilter('AREAFILTERCOUNTRY', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n\r\n  useEffect(()=>{\r\n    console.log(COUNTRIES)\r\n  },[COUNTRIES]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      COUNTRIES.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item.country} ({item.count[0].WorkOrders})</MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfo.js",["629"],"import React, { useEffect } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n// COmponents\r\nimport ClusterSites from \"./MoreInfoComponents/ListSites\"\r\nimport ClusterTradeTypes from \"./MoreInfoComponents/ListTradeTypes\";\r\n\r\n\r\nimport Piechart from \"../../../../../venders/apexCharts/SimplePie\"\r\nimport BarChart from \"../../../../../venders/apexCharts/BarChart\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst MoreInfo = (props)=>{\r\n\r\n    const {result} = props\r\n    const classes = useStyles();\r\n\r\n    useEffect(()=>{\r\n        //console.log(result)\r\n    },[result])\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n          <Accordion>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n              className=\"MoreInfoCTA\"\r\n            >\r\n              <h3>Additional Cluster Information</h3>\r\n            </AccordionSummary>\r\n            \r\n\r\n            <AccordionDetails>\r\n                <div className=\"ListtheData\">\r\n                     <ClusterSites Data={result.Sites}/>\r\n                     <ClusterTradeTypes Data={result}/>\r\n                </div>\r\n              \r\n                <div className=\"ResultCharts\">\r\n                    <div>\r\n                        <h3>Occurances of Job type in cluster</h3>\r\n                        <Piechart Data={result.Charts.JobTypeName}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Work orders by Trade Type</h3>\r\n                        <Piechart Data={result.Charts.TradeType}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Job type totals over the year</h3>\r\n                        <BarChart Data={result.Charts.JobTypeWorkOrderCount}/>\r\n                    </div>\r\n                </div>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </div>\r\n      );\r\n}\r\nexport default MoreInfo;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Controls\\buttons\\BacktoMapBtn.js",["630"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nconst ScanSwitch = ()=>{\r\n    const BacktoMap = ()=>{setTimeout(()=>{document.getElementById(\"MainMap\").scrollIntoView({ behavior: 'smooth' });},500)}\r\n    return( \r\n    \r\n    <IconButton aria-label=\"To Top\" className=\"BackToTop\" onClick={()=>{ BacktoMap()}} >\r\n        <ArrowUpwardIcon fontSize=\"inherit\" />\r\n    </IconButton>\r\n    )\r\n}\r\n\r\nexport default ScanSwitch;\r\n//<Button variant=\"contained\" onClick={()=>{ BacktoMap()}}  >Back to Map</Button>\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterBoundary.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterScanRadius.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ScannedRegionalBoundary.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Map\\clusterMap\\ClusterMarkers.js",["631","632","633"],"import React, {useEffect, useState} from 'react'\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n\r\nimport {uniqBy} from 'lodash';\r\n\r\n\r\n/** Loop Markers */ \r\nconst LocationMarkers = (props)=>{ \r\n    const {Data} = props\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n\r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[];\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n        \r\n         let MinMax = FindMinMax(markers);\r\n         let NewMarkers = uniqBy(markers, 'combined');\r\n         let StoreMarkers=[]\r\n         \r\n         //console.log('CreateMarkers', markers.length, NewMarkers.length);\r\n         \r\n         NewMarkers.map((marker, i)=>{\r\n                     let fillVariable;\r\n         \r\n                    if(!isNaN(parseFloat(marker.lat)) && marker.count[0] != null){\r\n\r\n                            //Find the WO percetage value based on highest and lowest range\r\n                            let int = ((marker.count[0].WorkOrders - MinMax[0]) * 100) / (MinMax[1] - MinMax[0])\r\n                            fillVariable = ColorMe((int.toFixed(2)/10));\r\n\r\n                            Targeticon = {\r\n                                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                                fillColor: fillVariable,\r\n                                fillOpacity: .9,\r\n                                anchor: new window.google.maps.Point(0,0),\r\n                                strokeWeight: 0,\r\n                                scale: 1\r\n                            }; \r\n                               \r\n\r\n                            StoreMarkers.push( \r\n                                <>\r\n                                    <Marker\r\n                                        key={i}\r\n                                        onLoad={onLoadMarker}\r\n                                        title={marker.name}\r\n                                        label={marker.name}\r\n                                        icon={Targeticon}\r\n                                        onClick={()=>{OnMarkerClick(marker.name)}}\r\n                                        position={{\r\n                                                lat: parseFloat(marker.lat),\r\n                                                lng: parseFloat(marker.long)\r\n                                            }}\r\n                                    />\r\n                                </>\r\n                            )\r\n                    }                   \r\n            })\r\n            setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ CreateMarkers(Data.Sites)},[Data])\r\n\r\n      return(  <>{DisplayMarkers}</>)\r\n\r\n}\r\n\r\n\r\nexport default LocationMarkers;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfoComponents\\ListTradeTypes.js",["634","635"],"import React, { useEffect, useState } from 'react'\r\nimport Piechart from \"../../../../../../venders/apexCharts/SimplePie\"\r\nconst ClusterTradeTypes = (props)=>{\r\n\r\n    const {Data} = props;\r\n\r\n    useEffect(()=>{ },[Data])\r\n    return(\r\n        <div className=\"LocationList\">\r\n            <h3>Work orders by Trade Type</h3>\r\n            <ul className=\"SiteBreakdown\">\r\n                {\r\n                    Data.SplitTradeTypeCount.map((trade,i)=>{\r\n                        return(\r\n                            <li key={i}>\r\n                                <div>{trade.name}</div>\r\n                                <div><strong>{ trade.count}</strong></div>\r\n                            </li>\r\n                            )\r\n                    })\r\n                }\r\n            </ul> \r\n            \r\n    </div>\r\n    )\r\n}\r\nexport default ClusterTradeTypes;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Prototype\\Components\\Results\\MoreInfoComponents\\ListSites.js",["636","637"],"import React, { useEffect, useState } from 'react'\r\n\r\nconst ClusterSites = (props)=>{\r\n\r\n    const {Data} = props;\r\n\r\n    return(\r\n        <div className=\"LocationList\">\r\n            <h3>Cluster Locations vs Work orders</h3>\r\n                <ul className=\"SiteBreakdown\">\r\n                        {\r\n                            Data.map((site,i)=>{\r\n                                return(\r\n                                    <li key={i}>\r\n                                        <div>{site.name}</div>\r\n                                        <div><strong>{site.count[0].WorkOrders}</strong></div>\r\n                                    </li>\r\n                                    )\r\n                            })\r\n                        }\r\n                </ul> \r\n        </div>\r\n    )\r\n}\r\nexport default ClusterSites;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\index.js",["638","639","640","641","642","643","644"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\About\\about.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Contact\\contact.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\unAuth\\UnAuth.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\AUTH.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\AUTH.js",["645"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\AuthDashboard.js",["646"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\PublicLayout.js",["647","648"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\n\r\n// Components\r\nimport PublicNavigation from \"./Public/Navigation\"\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n   // width: `calc(100% - ${drawerWidth}px)`,\r\n    //marginLeft: drawerWidth,\r\n    zIndex:999\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    backgroundColor:'#ffc20e',\r\n    zIndex:99\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor:'#ffc20e'\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function PermanentDrawerRight(props) {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <h1>Intact AnaltyiQ </h1>\r\n            <p>Front end Portal</p>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n    \r\n    \r\n      \r\n      <main className=\"Public\">  \r\n        <div className={classes.toolbar} />\r\n            <PublicNavigation />\r\n            <div  className=\"InnerFrame\">\r\n                {props.children}\r\n            </div>\r\n\r\n            \r\n      </main>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n\r\n  <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <div className={classes.toolbar} />\r\n      \r\n      </Drawer>\r\n\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Public\\Navigation.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\input.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\LoginForm.js",["649"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_AUTH_FULL} from \"../../../Context/AUTH\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport {StrapiAuth} from \"../../../actions/authUser\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicTextFields() {\r\n    const AUTH = useContext_AUTH_FULL();\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{},[AUTH])\r\n  return (\r\n        <>\r\n            {\r\n                AUTH.process ? <Processing />:<LoginForm />\r\n            }\r\n        </>\r\n  );\r\n}\r\n\r\n\r\nconst Processing = ()=>{\r\n   \r\n    return(\r\n        <>\r\n            processing\r\n        </>\r\n    )\r\n}\r\n\r\nconst Error = ()=>{\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const ErrorTrue='There was an Error in the Username or Password when processing your details'\r\n    const ErrorFalse=''\r\n    useEffect(()=>{},[AUTH])\r\n    return(\r\n        <>{\r\n            AUTH.error ? <h3>{ErrorTrue}</h3>:<h3>{ErrorFalse}</h3>\r\n            }\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nconst LoginForm = ()=>{\r\n    const classes = useStyles();\r\n    const [USERNAME, setUsername] = useState('')\r\n    const [PASSWORD, setPassword] = useState('')\r\n\r\n    const handleClick=()=>{\r\n\r\n        StrapiAuth(USERNAME,PASSWORD)\r\n    }\r\n\r\n    const handleEmail=(e)=>{setUsername(e.target.value)}\r\n    const handlePassword=(e)=>{setPassword(e.target.value)}\r\n\r\n    return(\r\n        <div className=\"LoginContainer\">\r\n            <Error />\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                label=\"e-mail\" \r\n                variant=\"outlined\" \r\n                onChange={handleEmail}\r\n            />\r\n            <TextField\r\n                id=\"standard-password-input\"\r\n                label=\"password\"\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                variant=\"outlined\"\r\n                onChange={handlePassword}\r\n            />\r\n            <button onClick={()=>{handleClick()}}>Login</button>\r\n                \r\n        </div>\r\n        )\r\n}\r\n\r\n/*\r\n\r\n<TextField id=\"standard-basic\" label=\"Standard\" />\r\n      <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Landing.js",["650"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Loading\\Loading.js",["651","652"],"import React, { useEffect } from 'react'\r\nimport {useContext_UX_FULL} from \"../../../Context/UX\";\r\nimport {LogoMainWhite} from \"../../../Assets/logo\"\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nconst Loading=()=>{\r\n    const UX = useContext_UX_FULL();\r\n    const Pushhistory = useHistory();\r\n    useEffect(()=>{\r\n        console.log(UX)\r\n        if(UX.STRAPIRECEIVED){ Pushhistory.push(\"/demo\");}\r\n    },[UX])\r\n    return(\r\n        <div className=\"App\">\r\n            <div className=\"LoadThis\">\r\n                \r\n                <LoadingCopy />\r\n                <div className=\"loader\">\r\n                <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>\r\n                <LogoMainWhite />\r\n              <Disclaimer />\r\n        </div>\r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n\r\n\r\n\r\nconst LoadingCopy=()=>{\r\n    return(\r\n      <div>\r\n           <h1>Intact AnalytiQ</h1>\r\n            <h2>Fetching Data</h2>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const Disclaimer = ()=>{\r\n      return(\r\n            <div className=\"disclaimer\">\r\n                <p>This is a prototype build of Intact Analyiq alpha v0.1 </p>\r\n                <p>Please wait whilst we fire up the Dyno's</p>\r\n            </div>\r\n      )\r\n  }","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\DataDump.js",["653","654","655"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan.js",["656","657","658","659"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Map.js",["660","661"],"import React, {useEffect, useState} from 'react'\r\n//import {useContext_STRAPI_FULL} from \"../../../Context/STRAPI\";\r\n//import {useContext_UX_FULL} from \"../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\nimport {ScanSites} from \"../../../actions/HandleMarkerBasedScan\";\r\nimport { GoogleMap,} from '@react-google-maps/api';\r\n\r\n// Components\r\nimport Markers from \"./MapComponents/LocationMarkers\";\r\nimport ResidualMarkers from \"./MapComponents/ResidualLocationMarkers\";\r\nimport CenterPoints from \"./MapComponents/MarkersCenterpoints\";\r\nimport MarkerBasedResults from \"./MapComponents/MarkerBasedResults\";\r\nimport ColorKey from \"./Results/ColorKey\"\r\n\r\nconst RenderScamSites = new ScanSites();\r\n\r\nconst containerStyle = { height: \"600px\", width: \"auto\" };\r\n\r\n\r\nconst ResourceAllocationMap=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    useEffect(()=>{\r\n        console.log(SCAN.MarkerScanResults)\r\n    },[SCAN])\r\nreturn(\r\n    <div className=\"ScanMapMain\" id=\"MainMap\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={{\r\n                    lat: -37.813629,\r\n                    lng: 144.963058\r\n                  }}\r\n                zoom={14}\r\n               \r\n            >\r\n            { /* Child components, such as markers, info windows, etc. */ }\r\n            \r\n                <Markers />\r\n                <CenterPoints />\r\n                <ResidualMarkers />\r\n            </GoogleMap>\r\n\r\n            <ColorKey />\r\n            <MarkerBasedResults />\r\n        </div>\r\n)\r\n}\r\n\r\nexport default ResourceAllocationMap;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\ResidualLocationMarkers.js",["662","663","664","665","666","667","668","669","670"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkersALL = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        console.log(\"markers\", markers)\r\n        \r\n        let StoreMarkers=[]         \r\n                markers.map((site,i)=>{\r\n                    Targeticon = {\r\n                        path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                        fillColor: '#fff',\r\n                        fillOpacity: .9,\r\n                        anchor: new window.google.maps.Point(0,0),\r\n                        strokeWeight: 0,\r\n                        scale: 1,\r\n                        zIndex:10\r\n                    };\r\n                    StoreMarkers.push( \r\n                        \r\n                            <Marker\r\n                                key={i}\r\n                                onLoad={onLoadMarker}\r\n                                title={site.name}\r\n                                label={site.name}\r\n                                icon={Targeticon}\r\n                                onClick={()=>{OnMarkerClick(site.name)}}\r\n                                position={{\r\n                                        lat: parseFloat(site.lat),\r\n                                        lng: parseFloat(site.long)\r\n                                    }}\r\n                            />\r\n                    )\r\n                })\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ \r\n         \r\n          CreateMarkers(SCAN.MarkerScanResidual)},[SCAN.MarkerScanResidual])\r\n\r\n      return(  <>{DisplayMarkers}</>) \r\n\r\n}\r\n\r\nexport default MarkerBasedLocationMarkersALL;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkerBasedResults.js",["671"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\nimport ClusterResults from \"../Results/ClusterResults\";\r\nimport {GroupArrayByOccurances} from \"../../../../actions/HandleUX\";\r\n\r\nconst MarkerBasedResults = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n\r\n    const [Results, setResults] = useState(null)\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]])\r\n    const extractResults=()=>{\r\n        console.log(SCAN.MarkerScanCenterPoints);\r\n\r\n        let ResultArr=[];\r\n        let CategoryInt=[]\r\n            SCAN.MarkerScanCenterPoints.map((result,i)=>{\r\n                ResultArr.push( <li key={i}> <ClusterResults  result={result} i={i}/></li>)\r\n                CategoryInt.push(result.scanCategory)\r\n                return true\r\n            })\r\n            setResults(ResultArr);\r\n            setCategoryOccurance(GroupArrayByOccurances(CategoryInt))\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        if(SCAN.MarkerScanCenterPoints !==null)\r\n            extractResults()\r\n\r\n    },[SCAN]);\r\n\r\n    return(\r\n        <>\r\n            <div className=\"ResultsHeader\">\r\n            <h2>Results</h2>\r\n            <h3>Clusters : <strong>{SCAN.MarkerScanCenterPoints.length}</strong></h3>\r\n            <h4>By Category:</h4>\r\n            <ul className=\"ClustersbyCategory\">\r\n            {\r\n                CategoryOccurance[0].map((cat,i)=>{\r\n                    return(\r\n                        <li key={i}>\r\n                                {cat} : {CategoryOccurance[1][i]}\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n            <h3>Sites were not allocated a Cluster : <strong>{SCAN.MarkerScanResidual.length} </strong></h3>\r\n            <h3>Sites were not included in this scan : <strong>{SCAN.NoLongLat.length} </strong></h3>\r\n            </div>\r\n\r\n            <ul className=\"ListResults\">\r\n                    {Results}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerBasedResults;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\LocationMarkers.js",["672","673","674","675","676","677","678","679","680","681"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\nimport {RegionColor} from \"../../../../actions/HandleUX\"\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name, Region)=>{console.log(\"Marker Clicked\", name, Region) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        console.log(\"markers\", markers)\r\n        let StoreMarkers=[];\r\n\r\n        markers.map((centerPoint,i)=>{\r\n          console.log(centerPoint.sites)\r\n          centerPoint.sites.map((site,ii)=>{\r\n\r\n              Targeticon = {\r\n                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                fillColor: RegionColor(centerPoint.scanCategory),\r\n                fillOpacity: .9,\r\n                anchor: new window.google.maps.Point(0,0),\r\n                strokeWeight: 0,\r\n                scale: 1\r\n            }; \r\n          \r\n            StoreMarkers.push( \r\n                \r\n                    <Marker\r\n                        key={site.name}\r\n                        onLoad={onLoadMarker}\r\n                        title={site.name}\r\n                        label={site.name}\r\n                        icon={Targeticon}\r\n                        onClick={()=>{OnMarkerClick(site.name, centerPoint.scanCategory)}}\r\n                        position={{\r\n                                lat: parseFloat(site.lat),\r\n                                lng: parseFloat(site.long)\r\n                            }}\r\n                    />\r\n                \r\n            )\r\n            })\r\n        })\r\n        /*\r\n        Object.keys(markers).map((key, value)=>{\r\n            //console.log(markers[key], value)\r\n              markers[key].map((sites,i)=>{\r\n                  sites.map((site,ii)=>{\r\n\r\n                  \r\n                  })\r\n              })\r\n          })*/\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ \r\n        if(CreateMarkers(SCAN.MarkerScanCenterPoints) != undefined)\r\n          CreateMarkers(SCAN.MarkerScanCenterPoints)\r\n      },[SCAN.MarkerScanCenterPoints])\r\n\r\n      return(  <>{DisplayMarkers}</>)\r\n\r\n}\r\n\r\n\r\nexport default MarkerBasedLocationMarkers;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkersCenterpoints.js",["682","683"],"\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Circle } from '@react-google-maps/api';\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport {RegionColor} from \"../../../../actions/HandleUX\"\r\n\r\n\r\n\r\nconst MarkerCenterpoints = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [Centerpoints, setCenterpoints] = useState(null)\r\n    \r\n    const CreateCenterpoints = ()=>{\r\n        let StorePoints=[]       \r\n        SCAN.MarkerScanCenterPoints.map((center,i)=>{\r\n        \r\n/*\r\n                        {\r\n                            name:site.name,\r\n                            center:{\r\n                                lat: site.lat,\r\n                                lng: site.long\r\n                              },\r\n                            range:Range.range[1]\r\n                        }\r\n            */\r\n           //console.log(center.center, center.range)\r\n           \r\n           \r\n\r\n           let options = {\r\n               strokeColor: RegionColor(center.scanCategory),\r\n               strokeOpacity: 0.9,\r\n               strokeWeight: 1,\r\n               fillColor: RegionColor(center.scanCategory),\r\n               fillOpacity: 0.2,\r\n               radius: ((center.range*1000)),\r\n               zIndex: 1\r\n             }\r\n            let Featheroptions = {\r\n                strokeColor: RegionColor(center.scanCategory),\r\n                strokeOpacity: 0.7,\r\n                strokeWeight: 3,\r\n                fillColor: RegionColor(center.scanCategory),\r\n                fillOpacity: 0.01,\r\n                radius: (( (center.range+((center.feather/100)*center.range)) *1000)),  \r\n                zIndex: 1\r\n              }\r\n           StorePoints.push(\r\n                <span key={i}>\r\n                    <Circle center={center.center} options={options}/>\r\n                    <Circle center={center.center} options={Featheroptions}/>\r\n                </span>\r\n           )\r\n            \r\n        })\r\n        setCenterpoints(StorePoints)\r\n        \r\n    }\r\n    \r\n    \r\n    useEffect(()=>{  CreateCenterpoints() },[SCAN.MarkerScanCenterPoints])\r\n\r\n    useEffect(()=>{},[ Centerpoints])\r\n\r\n    return(\r\n        <>\r\n        {Centerpoints}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerCenterpoints;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ColorKey.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ClusterResults.js",["684","685","686","687"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport{NumberReducer} from \"../../../../actions/HandleUX\";\r\n\r\n//import DeleteClusterBtn from \"../Controls/buttons/DeleteClusterBtn\";\r\n//import BacktoMap from \"../Controls/buttons/BacktoMapBtn\";\r\n//import ClusterMap from \"../../Prototype/Components/Map/clusterMap/clustermap\"\r\n//import MoreInfo from \"./MoreInfo\";\r\n\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [Multiplier, setMultiplier]= useState(1000)\r\n    const [ClusterTotal, setClusterTotal] = useState(0)\r\n\r\n\r\n    const FindClusterTotal = (result)=>{\r\n        let total=0;\r\n        result.ClusterCost.map((type,i)=>{ total = total + type[1] })\r\n        \r\n        setClusterTotal(NumberReducer(parseFloat((total*Multiplier).toFixed(2))))\r\n    }\r\n\r\n\r\n    useEffect(()=>{ \r\n        //FindClusterTotal(result) \r\n        //console.log(result)\r\n    },[result])\r\n\r\n    return(\r\n        <>\r\n            <h3><LocationCityIcon /> Cluster { (i+1) }  - <strong>{result.scanCategory}</strong></h3>\r\n            <h3>Cluster Resource Quota : <strong>{result.resourceQuota.toFixed(2)}</strong></h3> \r\n            <h3>est Cluster Cost : <strong>${0}</strong></h3>\r\n            <div className=\"ListResultContainer\">\r\n                <div className=\"Title\">\r\n                <h3> {result.name}</h3>\r\n                </div>\r\n                Add Map and Cluster Details once Data dump has been completed\r\n\r\n            </div>\r\n                \r\n               \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClusterResult;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ScanHistory.js",["688","689"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\HistoryRerfresh.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ViewSingleResultBtn.js",["690"],"import React, {useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\nimport { Link} from \"react-router-dom\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport{FetchSingleScanResult} from \"../../../../actions/authUser\"\r\n\r\n\r\n// this button has 3 states\r\n// Falsey .. nothign downloaded ot process\r\n// Active .. there is a active result in memory\r\n// processing .. system is downloading a result\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function IconButtons(props) {\r\n    const {scanID} = props\r\n    const SCAN = useContext_SCAN_FULL();\r\n    useEffect(()=>{\r\n      //console.log(SCAN.SelectedModelUI, scanID)\r\n    },[SCAN])\r\n\r\n    return (\r\n          <>\r\n            {\r\n              SCAN.SelectedModelUI.active ? <ActiveTrue scanID={scanID} />:<ActiveFalse scanID={scanID} />\r\n            }\r\n          </>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst ActiveTrue = (props)=>{\r\n  const {scanID} = props\r\n  const SCAN = useContext_SCAN_FULL();\r\n  useEffect(()=>{\r\n      //console.log(scanID,SCAN.SelectedModelUI.activeID )\r\n  },[])\r\n    return(\r\n      <>\r\n        {\r\n          SCAN.SelectedModelUI.activeID === scanID ? <ViewResult /> : <DownloadResult scanID={scanID} />\r\n        }\r\n      </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ActiveFalse = (props)=>{\r\n  const {scanID} = props\r\n  const SCAN = useContext_SCAN_FULL();\r\n  useEffect(()=>{\r\n      //console.log(scanID,SCAN.SelectedModelUI.activeID )\r\n  },[])\r\n  return(\r\n    <>\r\n      {\r\n          SCAN.SelectedModelUI.processing  ? <Processing /> : <DownloadResult scanID={scanID} />\r\n        }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nconst DownloadResult = (props)=>{\r\n  const {scanID} = props\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton aria-label=\"refresh\" onClick={()=>{FetchSingleScanResult(scanID)}}>\r\n        <GetAppIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst ViewResult = (props)=>{\r\n  const {scanID} = props\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton aria-label=\"refresh\"\r\n       component={Link}\r\n       to='/results'\r\n       >\r\n        <VisibilityIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst Processing = ()=>{\r\n  return(\r\n    <>\r\n        <div className=\"loader\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    </>\r\n  )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan.js",["691"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateSingleScanBtn.js",["692"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CreateNewScan} from \"../../../../actions/HandleScanProcess\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ContainedButtons() {\r\n  const classes = useStyles();\r\n\r\n\r\n    const HandleSingle=()=>{ console.log(\"Create Single\", CreateNewScan(0));}\r\n    const HandleCompare=()=>{ console.log(\"Create Single\", CreateNewScan(1));}\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <Button variant=\"contained\" onClick={HandleSingle} color=\"primary\">\r\n            Select Clients\r\n        </Button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n\r\n        <Button variant=\"contained\" color=\"secondary\">\r\n            Comparison Scan\r\n        </Button>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\SelectandReview.js",["693","694","695","696","697"],"import React, { useEffect, useState } from 'react'\r\nimport {useContext_STRAPI_FULL} from \"../../../Context/STRAPI\";\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\nimport { orderBy,  remove} from 'lodash'; \r\nimport ReviewSelectionBtn from \"../Components/buttons/SetSelectedBtn\";\r\n\r\nimport SelectScanItems from \"./ScanSelectItems\";\r\nimport ReviewSelection from \"./ScanReviewSelectedItems\";\r\n\r\n\r\nconst SelectandReview = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{},[SCAN])\r\n \r\n        return(\r\n            <>\r\n                { USERSCAN.ScanOptionSelected === 0?<Single />:<Compare /> }\r\n            </>\r\n        )\r\n}\r\n\r\n\r\n\r\nconst Single = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{ },[SCAN]);\r\n\r\n    return(\r\n        <div>\r\n  \r\n            {\r\n                USERSCAN.SetSelectedDatabase ? <ReviewSelection />:<SelectScanItems />\r\n            }    \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Compare = ()=>{\r\n    return(\r\n        <div>\r\n            Compare\r\n        </div>\r\n    )\r\n}\r\n/*\r\n \r\n*/\r\nexport default SelectandReview;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\ScanSelectItems.js",["698","699","700"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateNewScan\\ScanReviewSelectedItems.js",["701","702","703","704","705"],"import React, { useEffect, useState } from 'react'\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\nimport { orderBy,  remove} from 'lodash'; \r\n//import {FetchSelectedItems} from \"../../../actions/HandleScanProcess\";\r\nimport BacktoSelectItems from \"../Components/buttons/BacktoAddItemsSingleScan\"\r\nimport ScanForm from \"../../../venders/MaterialUI/Forms/CreateScanoptions\";\r\nimport CreateNewModelBtn from \"../Components/buttons/CreateNewModel\";\r\n\r\nconst ReviewSelected = ()=>{\r\n\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    \r\n    const [Fetching, setFetching] = useState('Review items')\r\n\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{\r\n    \r\n        if(USERSCAN.UserWorkingDataSet_Single.length === 0){\r\n          //  FetchSelectedItems(USERSCAN.UserScanSingleDataSets)\r\n        }\r\n        \r\n        console.log(USERSCAN.processing)\r\n        \r\n    },[USERSCAN])\r\n    \r\n    return(\r\n        <>\r\n            {\r\n                USERSCAN.processing ? <ReviewSent />:<ReviewScanContnt />\r\n            }\r\n               \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ReviewSelected; \r\n\r\n\r\nconst ReviewScanContnt = ()=>{\r\n    \r\n    const SCAN = useContext_SCAN_FULL();\r\n    \r\n    const [Fetching, setFetching] = useState('Review items')\r\n\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{\r\n    \r\n        if(USERSCAN.UserWorkingDataSet_Single.length === 0){\r\n          //  FetchSelectedItems(USERSCAN.UserScanSingleDataSets)\r\n        }\r\n        \r\n        console.log(USERSCAN.processing)\r\n        \r\n    },[USERSCAN])\r\n    return(\r\n        <div>\r\n                <h2>Review Scan</h2>\r\n                <BacktoSelectItems />\r\n\r\n                <h3>{Fetching}</h3>\r\n                <ScanForm \r\n                    DataSet={USERSCAN.UserScanSingleDataSets}\r\n                />\r\n\r\n                <ul> \r\n                    {\r\n                        USERSCAN.UserScanSingleDataSets.map((item,i)=>{\r\n                            return(\r\n                                <li key={i}>\r\n                                    {item.name}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReviewSent=()=>{\r\n    return(\r\n        <>\r\n            <h2>Building new Model</h2>\r\n            <p>We are currently building the new model as requested.</p>\r\n            <p>You can check the progess of the model under the \"Resource Models\" page</p>\r\n            <p>Once the model status has changed to 'complete' your results will be viewable</p>\r\n            <CreateNewModelBtn />\r\n        </>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoAddItemsSingleScan.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoScanType.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\SetSelectedBtn.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\CreateScanoptions.js",["706","707","708"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateNewModel.js",[],{"ruleId":"709","severity":1,"message":"710","line":15,"column":7,"nodeType":"711","messageId":"712","endLine":15,"endColumn":15},{"ruleId":"713","severity":2,"message":"714","line":20,"column":38,"nodeType":"711","messageId":"715","endLine":20,"endColumn":44},{"ruleId":"716","replacedBy":"717"},{"ruleId":"718","replacedBy":"719"},{"ruleId":"720","severity":1,"message":"721","line":159,"column":42,"nodeType":"722","messageId":"723","endLine":159,"endColumn":44},{"ruleId":"709","severity":1,"message":"724","line":11,"column":8,"nodeType":"711","messageId":"712","endLine":11,"endColumn":16},{"ruleId":"709","severity":1,"message":"725","line":12,"column":8,"nodeType":"711","messageId":"712","endLine":12,"endColumn":23},{"ruleId":"709","severity":1,"message":"726","line":13,"column":8,"nodeType":"711","messageId":"712","endLine":13,"endColumn":15},{"ruleId":"727","severity":1,"message":"728","line":16,"column":15,"nodeType":"729","messageId":"730","endLine":16,"endColumn":17},{"ruleId":"727","severity":1,"message":"728","line":16,"column":33,"nodeType":"729","messageId":"730","endLine":16,"endColumn":35},{"ruleId":"727","severity":1,"message":"728","line":31,"column":17,"nodeType":"729","messageId":"730","endLine":31,"endColumn":19},{"ruleId":"727","severity":1,"message":"728","line":32,"column":17,"nodeType":"729","messageId":"730","endLine":32,"endColumn":19},{"ruleId":"709","severity":1,"message":"731","line":287,"column":12,"nodeType":"711","messageId":"712","endLine":287,"endColumn":26},{"ruleId":"720","severity":1,"message":"721","line":290,"column":43,"nodeType":"722","messageId":"723","endLine":290,"endColumn":45},{"ruleId":"720","severity":1,"message":"732","line":332,"column":73,"nodeType":"733","messageId":"734","endLine":332,"endColumn":82},{"ruleId":"720","severity":1,"message":"721","line":342,"column":26,"nodeType":"722","messageId":"723","endLine":342,"endColumn":28},{"ruleId":"720","severity":1,"message":"721","line":49,"column":33,"nodeType":"722","messageId":"723","endLine":49,"endColumn":35},{"ruleId":"720","severity":1,"message":"721","line":51,"column":44,"nodeType":"722","messageId":"723","endLine":51,"endColumn":46},{"ruleId":"735","severity":1,"message":"736","line":94,"column":11,"nodeType":"737","messageId":"738","endLine":94,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":97,"column":11,"nodeType":"737","messageId":"738","endLine":97,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":100,"column":11,"nodeType":"737","messageId":"738","endLine":100,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":103,"column":11,"nodeType":"737","messageId":"738","endLine":103,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":106,"column":11,"nodeType":"737","messageId":"738","endLine":106,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":109,"column":11,"nodeType":"737","messageId":"738","endLine":109,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":112,"column":11,"nodeType":"737","messageId":"738","endLine":112,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":115,"column":11,"nodeType":"737","messageId":"738","endLine":115,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":118,"column":11,"nodeType":"737","messageId":"738","endLine":118,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":121,"column":11,"nodeType":"737","messageId":"738","endLine":121,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":124,"column":11,"nodeType":"737","messageId":"738","endLine":124,"endColumn":17},{"ruleId":"739","severity":1,"message":"740","line":159,"column":3,"nodeType":"741","messageId":"742","endLine":185,"endColumn":4},{"ruleId":"735","severity":1,"message":"736","line":162,"column":9,"nodeType":"737","messageId":"738","endLine":162,"endColumn":15},{"ruleId":"735","severity":1,"message":"736","line":165,"column":9,"nodeType":"737","messageId":"738","endLine":165,"endColumn":15},{"ruleId":"735","severity":1,"message":"736","line":168,"column":11,"nodeType":"737","messageId":"738","endLine":168,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":171,"column":11,"nodeType":"737","messageId":"738","endLine":171,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":174,"column":11,"nodeType":"737","messageId":"738","endLine":174,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":177,"column":11,"nodeType":"737","messageId":"738","endLine":177,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":180,"column":11,"nodeType":"737","messageId":"738","endLine":180,"endColumn":17},{"ruleId":"735","severity":1,"message":"736","line":183,"column":11,"nodeType":"737","messageId":"738","endLine":183,"endColumn":17},{"ruleId":"716","replacedBy":"743"},{"ruleId":"718","replacedBy":"744"},{"ruleId":"709","severity":1,"message":"745","line":3,"column":18,"nodeType":"711","messageId":"712","endLine":3,"endColumn":22},{"ruleId":"720","severity":1,"message":"721","line":33,"column":26,"nodeType":"722","messageId":"723","endLine":33,"endColumn":28},{"ruleId":"709","severity":1,"message":"746","line":66,"column":11,"nodeType":"711","messageId":"712","endLine":66,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":68,"column":29,"nodeType":"722","messageId":"723","endLine":68,"endColumn":31},{"ruleId":"720","severity":1,"message":"721","line":100,"column":24,"nodeType":"722","messageId":"723","endLine":100,"endColumn":26},{"ruleId":"720","severity":1,"message":"721","line":101,"column":35,"nodeType":"722","messageId":"723","endLine":101,"endColumn":37},{"ruleId":"720","severity":1,"message":"721","line":107,"column":53,"nodeType":"722","messageId":"723","endLine":107,"endColumn":55},{"ruleId":"720","severity":1,"message":"721","line":120,"column":29,"nodeType":"722","messageId":"723","endLine":120,"endColumn":31},{"ruleId":"709","severity":1,"message":"747","line":130,"column":7,"nodeType":"711","messageId":"712","endLine":130,"endColumn":22},{"ruleId":"720","severity":1,"message":"721","line":132,"column":24,"nodeType":"722","messageId":"723","endLine":132,"endColumn":26},{"ruleId":"720","severity":1,"message":"721","line":140,"column":40,"nodeType":"722","messageId":"723","endLine":140,"endColumn":42},{"ruleId":"727","severity":1,"message":"748","line":143,"column":19,"nodeType":"729","messageId":"730","endLine":143,"endColumn":21},{"ruleId":"709","severity":1,"message":"749","line":158,"column":9,"nodeType":"711","messageId":"712","endLine":158,"endColumn":17},{"ruleId":"720","severity":1,"message":"721","line":172,"column":34,"nodeType":"722","messageId":"723","endLine":172,"endColumn":36},{"ruleId":"720","severity":1,"message":"721","line":176,"column":37,"nodeType":"722","messageId":"723","endLine":176,"endColumn":39},{"ruleId":"727","severity":1,"message":"728","line":193,"column":94,"nodeType":"729","messageId":"730","endLine":193,"endColumn":96},{"ruleId":"727","severity":1,"message":"748","line":195,"column":30,"nodeType":"729","messageId":"730","endLine":195,"endColumn":32},{"ruleId":"709","severity":1,"message":"750","line":247,"column":9,"nodeType":"711","messageId":"712","endLine":247,"endColumn":27},{"ruleId":"720","severity":1,"message":"721","line":249,"column":28,"nodeType":"722","messageId":"723","endLine":249,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":267,"column":27,"nodeType":"722","messageId":"723","endLine":267,"endColumn":29},{"ruleId":"720","severity":1,"message":"721","line":269,"column":37,"nodeType":"722","messageId":"723","endLine":269,"endColumn":39},{"ruleId":"720","severity":1,"message":"721","line":283,"column":25,"nodeType":"722","messageId":"723","endLine":283,"endColumn":27},{"ruleId":"720","severity":1,"message":"721","line":285,"column":35,"nodeType":"722","messageId":"723","endLine":285,"endColumn":37},{"ruleId":"751","severity":1,"message":"752","line":5,"column":13,"nodeType":"753","endLine":5,"endColumn":73},{"ruleId":"751","severity":1,"message":"752","line":9,"column":13,"nodeType":"753","endLine":9,"endColumn":79},{"ruleId":"727","severity":1,"message":"728","line":6,"column":15,"nodeType":"729","messageId":"730","endLine":6,"endColumn":17},{"ruleId":"727","severity":1,"message":"728","line":6,"column":33,"nodeType":"729","messageId":"730","endLine":6,"endColumn":35},{"ruleId":"727","severity":1,"message":"728","line":21,"column":17,"nodeType":"729","messageId":"730","endLine":21,"endColumn":19},{"ruleId":"727","severity":1,"message":"728","line":22,"column":17,"nodeType":"729","messageId":"730","endLine":22,"endColumn":19},{"ruleId":"720","severity":1,"message":"721","line":59,"column":35,"nodeType":"722","messageId":"723","endLine":59,"endColumn":37},{"ruleId":"754","severity":1,"message":"755","line":108,"column":28,"nodeType":"756","messageId":"757","endLine":108,"endColumn":30},{"ruleId":"754","severity":1,"message":"755","line":108,"column":58,"nodeType":"756","messageId":"757","endLine":108,"endColumn":60},{"ruleId":"720","severity":1,"message":"721","line":119,"column":42,"nodeType":"722","messageId":"723","endLine":119,"endColumn":44},{"ruleId":"720","severity":1,"message":"721","line":145,"column":29,"nodeType":"722","messageId":"723","endLine":145,"endColumn":31},{"ruleId":"720","severity":1,"message":"721","line":146,"column":47,"nodeType":"722","messageId":"723","endLine":146,"endColumn":49},{"ruleId":"720","severity":1,"message":"758","line":231,"column":46,"nodeType":"722","messageId":"734","endLine":231,"endColumn":48},{"ruleId":"727","severity":1,"message":"728","line":245,"column":87,"nodeType":"729","messageId":"730","endLine":245,"endColumn":89},{"ruleId":"720","severity":1,"message":"721","line":295,"column":29,"nodeType":"722","messageId":"723","endLine":295,"endColumn":31},{"ruleId":"727","severity":1,"message":"728","line":297,"column":80,"nodeType":"729","messageId":"730","endLine":297,"endColumn":82},{"ruleId":"720","severity":1,"message":"721","line":56,"column":26,"nodeType":"722","messageId":"723","endLine":56,"endColumn":28},{"ruleId":"709","severity":1,"message":"759","line":159,"column":7,"nodeType":"711","messageId":"712","endLine":159,"endColumn":15},{"ruleId":"760","severity":1,"message":"761","line":16,"column":73,"nodeType":"762","endLine":16,"endColumn":79,"suggestions":"763"},{"ruleId":"709","severity":1,"message":"764","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":35},{"ruleId":"709","severity":1,"message":"765","line":8,"column":21,"nodeType":"711","messageId":"712","endLine":8,"endColumn":31},{"ruleId":"709","severity":1,"message":"766","line":8,"column":33,"nodeType":"711","messageId":"712","endLine":8,"endColumn":39},{"ruleId":"709","severity":1,"message":"767","line":16,"column":8,"nodeType":"711","messageId":"712","endLine":16,"endColumn":15},{"ruleId":"709","severity":1,"message":"768","line":23,"column":11,"nodeType":"711","messageId":"712","endLine":23,"endColumn":13},{"ruleId":"709","severity":1,"message":"769","line":27,"column":11,"nodeType":"711","messageId":"712","endLine":27,"endColumn":15},{"ruleId":"720","severity":1,"message":"721","line":31,"column":32,"nodeType":"722","messageId":"723","endLine":31,"endColumn":34},{"ruleId":"720","severity":1,"message":"721","line":16,"column":66,"nodeType":"722","messageId":"723","endLine":16,"endColumn":68},{"ruleId":"760","severity":1,"message":"770","line":63,"column":45,"nodeType":"762","endLine":63,"endColumn":65,"suggestions":"771"},{"ruleId":"709","severity":1,"message":"772","line":11,"column":9,"nodeType":"711","messageId":"712","endLine":11,"endColumn":15},{"ruleId":"709","severity":1,"message":"773","line":14,"column":7,"nodeType":"711","messageId":"712","endLine":14,"endColumn":15},{"ruleId":"709","severity":1,"message":"774","line":23,"column":11,"nodeType":"711","messageId":"712","endLine":23,"endColumn":17},{"ruleId":"709","severity":1,"message":"768","line":24,"column":11,"nodeType":"711","messageId":"712","endLine":24,"endColumn":13},{"ruleId":"709","severity":1,"message":"775","line":34,"column":13,"nodeType":"711","messageId":"712","endLine":34,"endColumn":20},{"ruleId":"709","severity":1,"message":"776","line":39,"column":13,"nodeType":"711","messageId":"712","endLine":39,"endColumn":23},{"ruleId":"720","severity":1,"message":"721","line":43,"column":28,"nodeType":"722","messageId":"723","endLine":43,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":60,"column":37,"nodeType":"722","messageId":"723","endLine":60,"endColumn":39},{"ruleId":"760","severity":1,"message":"777","line":89,"column":80,"nodeType":"762","endLine":89,"endColumn":100,"suggestions":"778"},{"ruleId":"709","severity":1,"message":"779","line":6,"column":10,"nodeType":"711","messageId":"712","endLine":6,"endColumn":14},{"ruleId":"760","severity":1,"message":"780","line":45,"column":7,"nodeType":"762","endLine":45,"endColumn":13,"suggestions":"781"},{"ruleId":"709","severity":1,"message":"772","line":10,"column":9,"nodeType":"711","messageId":"712","endLine":10,"endColumn":15},{"ruleId":"709","severity":1,"message":"773","line":13,"column":7,"nodeType":"711","messageId":"712","endLine":13,"endColumn":15},{"ruleId":"709","severity":1,"message":"768","line":52,"column":11,"nodeType":"711","messageId":"712","endLine":52,"endColumn":13},{"ruleId":"709","severity":1,"message":"782","line":54,"column":12,"nodeType":"711","messageId":"712","endLine":54,"endColumn":26},{"ruleId":"709","severity":1,"message":"783","line":54,"column":27,"nodeType":"711","messageId":"712","endLine":54,"endColumn":44},{"ruleId":"709","severity":1,"message":"775","line":62,"column":13,"nodeType":"711","messageId":"712","endLine":62,"endColumn":20},{"ruleId":"709","severity":1,"message":"776","line":67,"column":13,"nodeType":"711","messageId":"712","endLine":67,"endColumn":23},{"ruleId":"720","severity":1,"message":"721","line":71,"column":28,"nodeType":"722","messageId":"723","endLine":71,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":88,"column":36,"nodeType":"722","messageId":"723","endLine":88,"endColumn":38},{"ruleId":"720","severity":1,"message":"721","line":90,"column":42,"nodeType":"722","messageId":"723","endLine":90,"endColumn":44},{"ruleId":"727","severity":1,"message":"748","line":140,"column":70,"nodeType":"729","messageId":"730","endLine":140,"endColumn":72},{"ruleId":"760","severity":1,"message":"777","line":142,"column":9,"nodeType":"762","endLine":142,"endColumn":29,"suggestions":"784"},{"ruleId":"709","severity":1,"message":"785","line":5,"column":10,"nodeType":"711","messageId":"712","endLine":5,"endColumn":20},{"ruleId":"709","severity":1,"message":"786","line":1,"column":16,"nodeType":"711","messageId":"712","endLine":1,"endColumn":25},{"ruleId":"709","severity":1,"message":"764","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":35},{"ruleId":"709","severity":1,"message":"787","line":15,"column":24,"nodeType":"711","messageId":"712","endLine":15,"endColumn":37},{"ruleId":"709","severity":1,"message":"788","line":16,"column":12,"nodeType":"711","messageId":"712","endLine":16,"endColumn":24},{"ruleId":"709","severity":1,"message":"789","line":19,"column":11,"nodeType":"711","messageId":"712","endLine":19,"endColumn":27},{"ruleId":"720","severity":1,"message":"721","line":21,"column":40,"nodeType":"722","messageId":"723","endLine":21,"endColumn":42},{"ruleId":"709","severity":1,"message":"790","line":6,"column":9,"nodeType":"711","messageId":"712","endLine":6,"endColumn":23},{"ruleId":"709","severity":1,"message":"774","line":9,"column":11,"nodeType":"711","messageId":"712","endLine":9,"endColumn":17},{"ruleId":"709","severity":1,"message":"791","line":10,"column":11,"nodeType":"711","messageId":"712","endLine":10,"endColumn":18},{"ruleId":"720","severity":1,"message":"721","line":23,"column":39,"nodeType":"722","messageId":"723","endLine":23,"endColumn":41},{"ruleId":"760","severity":1,"message":"792","line":46,"column":7,"nodeType":"762","endLine":46,"endColumn":25,"suggestions":"793"},{"ruleId":"709","severity":1,"message":"765","line":6,"column":21,"nodeType":"711","messageId":"712","endLine":6,"endColumn":31},{"ruleId":"709","severity":1,"message":"766","line":6,"column":33,"nodeType":"711","messageId":"712","endLine":6,"endColumn":39},{"ruleId":"709","severity":1,"message":"794","line":14,"column":5,"nodeType":"711","messageId":"712","endLine":14,"endColumn":6},{"ruleId":"760","severity":1,"message":"795","line":24,"column":60,"nodeType":"762","endLine":24,"endColumn":81,"suggestions":"796"},{"ruleId":"709","severity":1,"message":"797","line":49,"column":9,"nodeType":"711","messageId":"712","endLine":49,"endColumn":19},{"ruleId":"760","severity":1,"message":"798","line":65,"column":10,"nodeType":"762","endLine":65,"endColumn":12,"suggestions":"799"},{"ruleId":"709","severity":1,"message":"785","line":5,"column":10,"nodeType":"711","messageId":"712","endLine":5,"endColumn":20},{"ruleId":"709","severity":1,"message":"800","line":22,"column":19,"nodeType":"711","messageId":"712","endLine":22,"endColumn":27},{"ruleId":"709","severity":1,"message":"801","line":23,"column":22,"nodeType":"711","messageId":"712","endLine":23,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":22,"column":19,"nodeType":"711","messageId":"712","endLine":22,"endColumn":27},{"ruleId":"709","severity":1,"message":"801","line":23,"column":22,"nodeType":"711","messageId":"712","endLine":23,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":22,"column":19,"nodeType":"711","messageId":"712","endLine":22,"endColumn":27},{"ruleId":"709","severity":1,"message":"801","line":23,"column":22,"nodeType":"711","messageId":"712","endLine":23,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":22,"column":19,"nodeType":"711","messageId":"712","endLine":22,"endColumn":27},{"ruleId":"709","severity":1,"message":"801","line":23,"column":22,"nodeType":"711","messageId":"712","endLine":23,"endColumn":33},{"ruleId":"709","severity":1,"message":"801","line":24,"column":22,"nodeType":"711","messageId":"712","endLine":24,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":26,"column":19,"nodeType":"711","messageId":"712","endLine":26,"endColumn":27},{"ruleId":"709","severity":1,"message":"802","line":6,"column":10,"nodeType":"711","messageId":"712","endLine":6,"endColumn":21},{"ruleId":"720","severity":1,"message":"721","line":90,"column":24,"nodeType":"722","messageId":"723","endLine":90,"endColumn":26},{"ruleId":"760","severity":1,"message":"803","line":102,"column":7,"nodeType":"762","endLine":102,"endColumn":13,"suggestions":"804"},{"ruleId":"727","severity":1,"message":"748","line":105,"column":32,"nodeType":"729","messageId":"730","endLine":105,"endColumn":34},{"ruleId":"760","severity":1,"message":"805","line":105,"column":73,"nodeType":"762","endLine":105,"endColumn":79,"suggestions":"806"},{"ruleId":"709","severity":1,"message":"807","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":34},{"ruleId":"709","severity":1,"message":"808","line":13,"column":12,"nodeType":"711","messageId":"712","endLine":13,"endColumn":25},{"ruleId":"709","severity":1,"message":"809","line":13,"column":26,"nodeType":"711","messageId":"712","endLine":13,"endColumn":42},{"ruleId":"720","severity":1,"message":"721","line":39,"column":32,"nodeType":"722","messageId":"723","endLine":39,"endColumn":34},{"ruleId":"760","severity":1,"message":"810","line":77,"column":78,"nodeType":"762","endLine":77,"endColumn":99,"suggestions":"811"},{"ruleId":"760","severity":1,"message":"812","line":78,"column":77,"nodeType":"762","endLine":78,"endColumn":95,"suggestions":"813"},{"ruleId":"709","severity":1,"message":"787","line":15,"column":24,"nodeType":"711","messageId":"712","endLine":15,"endColumn":37},{"ruleId":"720","severity":1,"message":"721","line":21,"column":40,"nodeType":"722","messageId":"723","endLine":21,"endColumn":42},{"ruleId":"760","severity":1,"message":"814","line":27,"column":48,"nodeType":"762","endLine":27,"endColumn":56,"suggestions":"815"},{"ruleId":"709","severity":1,"message":"816","line":2,"column":8,"nodeType":"711","messageId":"712","endLine":2,"endColumn":14},{"ruleId":"709","severity":1,"message":"773","line":12,"column":7,"nodeType":"711","messageId":"712","endLine":12,"endColumn":15},{"ruleId":"709","severity":1,"message":"817","line":25,"column":24,"nodeType":"711","messageId":"712","endLine":25,"endColumn":37},{"ruleId":"720","severity":1,"message":"721","line":41,"column":28,"nodeType":"722","messageId":"723","endLine":41,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":61,"column":36,"nodeType":"722","messageId":"723","endLine":61,"endColumn":38},{"ruleId":"760","severity":1,"message":"777","line":102,"column":64,"nodeType":"762","endLine":102,"endColumn":82,"suggestions":"818"},{"ruleId":"709","severity":1,"message":"819","line":113,"column":7,"nodeType":"711","messageId":"712","endLine":113,"endColumn":17},{"ruleId":"709","severity":1,"message":"801","line":47,"column":22,"nodeType":"711","messageId":"712","endLine":47,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":49,"column":19,"nodeType":"711","messageId":"712","endLine":49,"endColumn":27},{"ruleId":"709","severity":1,"message":"801","line":26,"column":22,"nodeType":"711","messageId":"712","endLine":26,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":28,"column":19,"nodeType":"711","messageId":"712","endLine":28,"endColumn":27},{"ruleId":"760","severity":1,"message":"820","line":40,"column":42,"nodeType":"762","endLine":40,"endColumn":44,"suggestions":"821"},{"ruleId":"709","severity":1,"message":"801","line":27,"column":22,"nodeType":"711","messageId":"712","endLine":27,"endColumn":33},{"ruleId":"709","severity":1,"message":"800","line":29,"column":19,"nodeType":"711","messageId":"712","endLine":29,"endColumn":27},{"ruleId":"709","severity":1,"message":"822","line":7,"column":8,"nodeType":"711","messageId":"712","endLine":7,"endColumn":18},{"ruleId":"709","severity":1,"message":"816","line":2,"column":8,"nodeType":"711","messageId":"712","endLine":2,"endColumn":14},{"ruleId":"720","severity":1,"message":"721","line":26,"column":28,"nodeType":"722","messageId":"723","endLine":26,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":44,"column":36,"nodeType":"722","messageId":"723","endLine":44,"endColumn":38},{"ruleId":"760","severity":1,"message":"777","line":84,"column":50,"nodeType":"762","endLine":84,"endColumn":56,"suggestions":"823"},{"ruleId":"709","severity":1,"message":"764","line":1,"column":28,"nodeType":"711","messageId":"712","endLine":1,"endColumn":36},{"ruleId":"709","severity":1,"message":"824","line":2,"column":8,"nodeType":"711","messageId":"712","endLine":2,"endColumn":16},{"ruleId":"709","severity":1,"message":"786","line":1,"column":17,"nodeType":"711","messageId":"712","endLine":1,"endColumn":26},{"ruleId":"709","severity":1,"message":"764","line":1,"column":28,"nodeType":"711","messageId":"712","endLine":1,"endColumn":36},{"ruleId":"760","severity":1,"message":"761","line":49,"column":8,"nodeType":"762","endLine":49,"endColumn":14,"suggestions":"825"},{"ruleId":"720","severity":1,"message":"826","line":54,"column":43,"nodeType":"733","messageId":"723","endLine":54,"endColumn":51},{"ruleId":"760","severity":1,"message":"827","line":62,"column":41,"nodeType":"762","endLine":62,"endColumn":58,"suggestions":"828"},{"ruleId":"709","severity":1,"message":"774","line":90,"column":11,"nodeType":"711","messageId":"712","endLine":90,"endColumn":17},{"ruleId":"709","severity":1,"message":"829","line":92,"column":12,"nodeType":"711","messageId":"712","endLine":92,"endColumn":22},{"ruleId":"709","severity":1,"message":"830","line":92,"column":24,"nodeType":"711","messageId":"712","endLine":92,"endColumn":37},{"ruleId":"760","severity":1,"message":"761","line":102,"column":8,"nodeType":"762","endLine":102,"endColumn":14,"suggestions":"831"},{"ruleId":"760","severity":1,"message":"832","line":25,"column":22,"nodeType":"762","endLine":25,"endColumn":28,"suggestions":"833"},{"ruleId":"709","severity":1,"message":"834","line":8,"column":8,"nodeType":"711","messageId":"712","endLine":8,"endColumn":15},{"ruleId":"709","severity":1,"message":"835","line":3,"column":8,"nodeType":"711","messageId":"712","endLine":3,"endColumn":14},{"ruleId":"709","severity":1,"message":"834","line":12,"column":8,"nodeType":"711","messageId":"712","endLine":12,"endColumn":15},{"ruleId":"709","severity":1,"message":"836","line":58,"column":11,"nodeType":"711","messageId":"712","endLine":58,"endColumn":18},{"ruleId":"709","severity":1,"message":"786","line":1,"column":17,"nodeType":"711","messageId":"712","endLine":1,"endColumn":26},{"ruleId":"709","severity":1,"message":"837","line":4,"column":22,"nodeType":"711","messageId":"712","endLine":4,"endColumn":32},{"ruleId":"760","severity":1,"message":"761","line":11,"column":7,"nodeType":"762","endLine":11,"endColumn":11,"suggestions":"838"},{"ruleId":"709","severity":1,"message":"764","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":35},{"ruleId":"709","severity":1,"message":"839","line":4,"column":10,"nodeType":"711","messageId":"712","endLine":4,"endColumn":15},{"ruleId":"709","severity":1,"message":"768","line":9,"column":12,"nodeType":"711","messageId":"712","endLine":9,"endColumn":14},{"ruleId":"709","severity":1,"message":"764","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":35},{"ruleId":"709","severity":1,"message":"768","line":16,"column":11,"nodeType":"711","messageId":"712","endLine":16,"endColumn":13},{"ruleId":"720","severity":1,"message":"721","line":24,"column":32,"nodeType":"722","messageId":"723","endLine":24,"endColumn":34},{"ruleId":"760","severity":1,"message":"840","line":37,"column":47,"nodeType":"762","endLine":37,"endColumn":60,"suggestions":"841"},{"ruleId":"709","severity":1,"message":"764","line":1,"column":27,"nodeType":"711","messageId":"712","endLine":1,"endColumn":35},{"ruleId":"709","severity":1,"message":"842","line":15,"column":7,"nodeType":"711","messageId":"712","endLine":15,"endColumn":22},{"ruleId":"709","severity":1,"message":"772","line":11,"column":9,"nodeType":"711","messageId":"712","endLine":11,"endColumn":15},{"ruleId":"709","severity":1,"message":"773","line":14,"column":7,"nodeType":"711","messageId":"712","endLine":14,"endColumn":15},{"ruleId":"709","severity":1,"message":"774","line":23,"column":11,"nodeType":"711","messageId":"712","endLine":23,"endColumn":17},{"ruleId":"709","severity":1,"message":"768","line":24,"column":11,"nodeType":"711","messageId":"712","endLine":24,"endColumn":13},{"ruleId":"709","severity":1,"message":"775","line":34,"column":13,"nodeType":"711","messageId":"712","endLine":34,"endColumn":20},{"ruleId":"709","severity":1,"message":"776","line":39,"column":13,"nodeType":"711","messageId":"712","endLine":39,"endColumn":23},{"ruleId":"720","severity":1,"message":"721","line":43,"column":28,"nodeType":"722","messageId":"723","endLine":43,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":60,"column":37,"nodeType":"722","messageId":"723","endLine":60,"endColumn":39},{"ruleId":"760","severity":1,"message":"777","line":91,"column":51,"nodeType":"762","endLine":91,"endColumn":76,"suggestions":"843"},{"ruleId":"760","severity":1,"message":"780","line":30,"column":7,"nodeType":"762","endLine":30,"endColumn":13,"suggestions":"844"},{"ruleId":"709","severity":1,"message":"772","line":10,"column":9,"nodeType":"711","messageId":"712","endLine":10,"endColumn":15},{"ruleId":"709","severity":1,"message":"773","line":13,"column":7,"nodeType":"711","messageId":"712","endLine":13,"endColumn":15},{"ruleId":"709","severity":1,"message":"768","line":23,"column":11,"nodeType":"711","messageId":"712","endLine":23,"endColumn":13},{"ruleId":"709","severity":1,"message":"775","line":33,"column":13,"nodeType":"711","messageId":"712","endLine":33,"endColumn":20},{"ruleId":"709","severity":1,"message":"776","line":38,"column":13,"nodeType":"711","messageId":"712","endLine":38,"endColumn":23},{"ruleId":"720","severity":1,"message":"721","line":42,"column":28,"nodeType":"722","messageId":"723","endLine":42,"endColumn":30},{"ruleId":"720","severity":1,"message":"721","line":59,"column":36,"nodeType":"722","messageId":"723","endLine":59,"endColumn":38},{"ruleId":"720","severity":1,"message":"721","line":61,"column":42,"nodeType":"722","messageId":"723","endLine":61,"endColumn":44},{"ruleId":"727","severity":1,"message":"748","line":104,"column":55,"nodeType":"729","messageId":"730","endLine":104,"endColumn":57},{"ruleId":"760","severity":1,"message":"777","line":106,"column":9,"nodeType":"762","endLine":106,"endColumn":38,"suggestions":"845"},{"ruleId":"720","severity":1,"message":"721","line":16,"column":51,"nodeType":"722","messageId":"723","endLine":16,"endColumn":53},{"ruleId":"760","severity":1,"message":"770","line":63,"column":45,"nodeType":"762","endLine":63,"endColumn":74,"suggestions":"846"},{"ruleId":"709","severity":1,"message":"787","line":15,"column":24,"nodeType":"711","messageId":"712","endLine":15,"endColumn":37},{"ruleId":"709","severity":1,"message":"788","line":16,"column":12,"nodeType":"711","messageId":"712","endLine":16,"endColumn":24},{"ruleId":"709","severity":1,"message":"789","line":19,"column":11,"nodeType":"711","messageId":"712","endLine":19,"endColumn":27},{"ruleId":"720","severity":1,"message":"721","line":21,"column":40,"nodeType":"722","messageId":"723","endLine":21,"endColumn":42},{"ruleId":"709","severity":1,"message":"774","line":11,"column":11,"nodeType":"711","messageId":"712","endLine":11,"endColumn":17},{"ruleId":"709","severity":1,"message":"847","line":13,"column":11,"nodeType":"711","messageId":"712","endLine":13,"endColumn":15},{"ruleId":"709","severity":1,"message":"848","line":97,"column":10,"nodeType":"711","messageId":"712","endLine":97,"endColumn":16},{"ruleId":"709","severity":1,"message":"764","line":1,"column":28,"nodeType":"711","messageId":"712","endLine":1,"endColumn":36},{"ruleId":"709","severity":1,"message":"849","line":19,"column":11,"nodeType":"711","messageId":"712","endLine":19,"endColumn":24},{"ruleId":"709","severity":1,"message":"764","line":1,"column":28,"nodeType":"711","messageId":"712","endLine":1,"endColumn":36},{"ruleId":"709","severity":1,"message":"850","line":4,"column":10,"nodeType":"711","messageId":"712","endLine":4,"endColumn":17},{"ruleId":"709","severity":1,"message":"851","line":4,"column":20,"nodeType":"711","messageId":"712","endLine":4,"endColumn":26},{"ruleId":"709","severity":1,"message":"852","line":5,"column":8,"nodeType":"711","messageId":"712","endLine":5,"endColumn":26},{"ruleId":"709","severity":1,"message":"774","line":13,"column":11,"nodeType":"711","messageId":"712","endLine":13,"endColumn":17},{"ruleId":"727","severity":1,"message":"748","line":31,"column":75,"nodeType":"729","messageId":"730","endLine":31,"endColumn":77},{"ruleId":"727","severity":1,"message":"748","line":44,"column":73,"nodeType":"729","messageId":"730","endLine":44,"endColumn":75},{"ruleId":"760","severity":1,"message":"853","line":54,"column":7,"nodeType":"762","endLine":54,"endColumn":36,"suggestions":"854"},{"ruleId":"709","severity":1,"message":"850","line":3,"column":10,"nodeType":"711","messageId":"712","endLine":3,"endColumn":17},{"ruleId":"709","severity":1,"message":"851","line":3,"column":20,"nodeType":"711","messageId":"712","endLine":3,"endColumn":26},{"ruleId":"709","severity":1,"message":"855","line":14,"column":12,"nodeType":"711","messageId":"712","endLine":14,"endColumn":20},{"ruleId":"709","severity":1,"message":"856","line":14,"column":22,"nodeType":"711","messageId":"712","endLine":14,"endColumn":33},{"ruleId":"709","severity":1,"message":"856","line":46,"column":22,"nodeType":"711","messageId":"712","endLine":46,"endColumn":33},{"ruleId":"709","severity":1,"message":"786","line":1,"column":17,"nodeType":"711","messageId":"712","endLine":1,"endColumn":26},{"ruleId":"709","severity":1,"message":"857","line":37,"column":7,"nodeType":"711","messageId":"712","endLine":37,"endColumn":17},{"ruleId":"709","severity":1,"message":"836","line":71,"column":11,"nodeType":"711","messageId":"712","endLine":71,"endColumn":18},"no-unused-vars","'JWTCHECK' is assigned a value but never used.","Identifier","unusedVar","no-undef","'APIKEY' is not defined.","undef","no-native-reassign",["858"],"no-negated-in-lhs",["859"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'HomeIcon' is defined but never used.","'RestorePageIcon' is defined but never used.","'MapIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'WorkOrderCount' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["858"],["859"],"'Cell' is defined but never used.","'ChartGroupArrayData' is assigned a value but never used.","'Removeinteriors' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'JobTypes' is assigned a value but never used.","'checkResourceCount' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","Array.prototype.map() expects a value to be returned at the end of arrow function.","'GetSites' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Pushhistory'. Either include it or remove the dependency array.","ArrayExpression",["860"],"'useState' is defined but never used.","'LoadScript' is defined but never used.","'Marker' is defined but never used.","'ScanBtn' is defined but never used.","'UX' is assigned a value but never used.","'Scan' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateCenterpoints'. Either include it or remove the dependency array.",["861"],"'uniqBy' is defined but never used.","'divStyle' is assigned a value but never used.","'STRAPI' is assigned a value but never used.","'ColorMe' is assigned a value but never used.","'FindMinMax' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateMarkers'. Either include it or remove the dependency array.",["862"],"'Data' is defined but never used.","React Hook useEffect has a missing dependency: 'extractResults'. Either include it or remove the dependency array.",["863"],"'DisplayMarkers' is assigned a value but never used.","'setDisplayMarkers' is assigned a value but never used.",["864"],"'makeStyles' is defined but never used.","'useEffect' is defined but never used.","'setMultiplier' is assigned a value but never used.","'ClusterTotal' is assigned a value but never used.","'FindClusterTotal' is assigned a value but never used.","'SelectedRegion' is defined but never used.","'Regions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'UX.SelectedArea' and 'WorkorderCount'. Either include them or remove the dependency array.",["865"],"'_' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UX.SelectedArea'. Either include it or remove the dependency array.",["866"],"'Targeticon' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'MapParameters.LatLngBoundaries'. Either include it or remove the dependency array.",["867"],"'setLabel' is assigned a value but never used.","'setDisabled' is assigned a value but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'TestScan'. Either include it or remove the dependency array.",["868"],"React Hook useEffect has a missing dependency: 'CreateBorders'. Either include it or remove the dependency array.",["869"],"'useMemo' is defined but never used.","'markerRemoved' is assigned a value but never used.","'setmarkerRemoved' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateAddNewRegion'. Either include it or remove the dependency array.",["870"],"React Hook useEffect has missing dependencies: 'CreateAddNewRegion' and 'UX.AreaSelectFilter.state.regions'. Either include them or remove the dependency array.",["871"],"React Hook useEffect has a missing dependency: 'FindClusterTotal'. Either include it or remove the dependency array.",["872"],"'Button' is defined but never used.","'setStarMarker' is assigned a value but never used.",["873"],"'MarkerIcon' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'STATES'. Either include it or remove the dependency array.",["874"],"'Typography' is defined but never used.",["875"],"'Piechart' is defined but never used.",["876"],"Array.prototype.map() expects a return value from function.","React Hook useEffect has a missing dependency: 'checkDataStatus'. Either include it or remove the dependency array.",["877"],"'DataStatus' is assigned a value but never used.","'setDataStatus' is assigned a value but never used.",["878"],"React Hook useMemo has an unnecessary dependency: 'AUTH'. Either exclude it or remove the dependency array.",["879"],"'Divider' is defined but never used.","'Drawer' is defined but never used.","'classes' is assigned a value but never used.","'withRouter' is defined but never used.",["880"],"'Label' is defined but never used.","React Hook useEffect has a missing dependency: 'Scan'. Either include it or remove the dependency array.",["881"],"'RenderScamSites' is assigned a value but never used.",["882"],["883"],["884"],["885"],"'SCAN' is assigned a value but never used.","'scanID' is assigned a value but never used.","'HandleCompare' is assigned a value but never used.","'orderBy' is defined but never used.","'remove' is defined but never used.","'ReviewSelectionBtn' is defined but never used.","React Hook useEffect has missing dependencies: 'STRAPI.UserData.Customers' and 'USERSCAN.UserScanSingleDataSets'. Either include them or remove the dependency array.",["886"],"'Fetching' is assigned a value but never used.","'setFetching' is assigned a value but never used.","'Processing' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"891","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"902","fix":"903"},{"desc":"904","fix":"905"},{"desc":"906","fix":"907"},{"desc":"908","fix":"909"},{"desc":"910","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"887","fix":"918"},{"desc":"919","fix":"920"},{"desc":"887","fix":"921"},{"desc":"922","fix":"923"},{"desc":"924","fix":"925"},{"desc":"926","fix":"927"},{"desc":"928","fix":"929"},{"desc":"893","fix":"930"},{"desc":"931","fix":"932"},{"desc":"933","fix":"934"},{"desc":"935","fix":"936"},"Update the dependencies array to be: [AUTH, Pushhistory]",{"range":"937","text":"938"},"Update the dependencies array to be: [CreateCenterpoints, SCAN.SelectedModel]",{"range":"939","text":"940"},"Update the dependencies array to be: [CreateMarkers, SCAN.SelectedModel]",{"range":"941","text":"942"},"Update the dependencies array to be: [SCAN, extractResults]",{"range":"943","text":"944"},{"range":"945","text":"942"},"Update the dependencies array to be: [UX.MapParameters, UX.SelectedArea, WorkorderCount]",{"range":"946","text":"947"},"Update the dependencies array to be: [UX.AreaSelectFilter, UX.SelectedArea]",{"range":"948","text":"949"},"Update the dependencies array to be: [MapParameters.LatLngBoundaries]",{"range":"950","text":"951"},"Update the dependencies array to be: [SCAN, TestScan]",{"range":"952","text":"953"},"Update the dependencies array to be: [CreateBorders, SCAN]",{"range":"954","text":"955"},"Update the dependencies array to be: [CreateAddNewRegion, UX.AreaSelectFilter]",{"range":"956","text":"957"},"Update the dependencies array to be: [CreateAddNewRegion, UX.AreaSelectFilter.state.regions, UX.MapParameters]",{"range":"958","text":"959"},"Update the dependencies array to be: [FindClusterTotal, result]",{"range":"960","text":"961"},"Update the dependencies array to be: [CreateMarkers, UX.MapParameters]",{"range":"962","text":"963"},"Update the dependencies array to be: [STATES]",{"range":"964","text":"965"},"Update the dependencies array to be: [CreateMarkers, Data]",{"range":"966","text":"967"},{"range":"968","text":"938"},"Update the dependencies array to be: [STRAPI.UserData, checkDataStatus]",{"range":"969","text":"970"},{"range":"971","text":"938"},"Update the dependencies array to be: []",{"range":"972","text":"973"},"Update the dependencies array to be: [Pushhistory, UX]",{"range":"974","text":"975"},"Update the dependencies array to be: [SCAN.active, Scan]",{"range":"976","text":"977"},"Update the dependencies array to be: [CreateMarkers, SCAN.MarkerScanResidual]",{"range":"978","text":"979"},{"range":"980","text":"944"},"Update the dependencies array to be: [CreateMarkers, SCAN.MarkerScanCenterPoints]",{"range":"981","text":"982"},"Update the dependencies array to be: [CreateCenterpoints, SCAN.MarkerScanCenterPoints]",{"range":"983","text":"984"},"Update the dependencies array to be: [STRAPI.UserData.Customers, USERSCAN.ScanOptionSelected, USERSCAN.UserScanSingleDataSets]",{"range":"985","text":"986"},[424,430],"[AUTH, Pushhistory]",[2079,2099],"[CreateCenterpoints, SCAN.SelectedModel]",[3059,3079],"[CreateMarkers, SCAN.SelectedModel]",[1584,1590],"[SCAN, extractResults]",[4045,4065],[1574,1592],"[UX.MapParameters, UX.SelectedArea, WorkorderCount]",[848,869],"[UX.AreaSelectFilter, UX.SelectedArea]",[2164,2166],"[MapParameters.LatLngBoundaries]",[3281,3287],"[SCAN, TestScan]",[3386,3392],"[CreateBorders, SCAN]",[2952,2973],"[CreateAddNewRegion, UX.AreaSelectFilter]",[3052,3070],"[CreateAddNewRegion, UX.AreaSelectFilter.state.regions, UX.MapParameters]",[879,887],"[FindClusterTotal, result]",[3838,3856],"[CreateMarkers, UX.MapParameters]",[1382,1384],"[STATES]",[3247,3253],"[CreateMarkers, Data]",[1744,1750],[2075,2092],"[STRAPI.UserData, checkDataStatus]",[2895,2901],[478,484],"[]",[421,425],"[Pushhistory, UX]",[1108,1121],"[SCAN.active, Scan]",[3066,3091],"[CreateMarkers, SCAN.MarkerScanResidual]",[1059,1065],[3373,3402],"[CreateMarkers, SCAN.MarkerScanCenterPoints]",[2070,2099],"[CreateCenterpoints, SCAN.MarkerScanCenterPoints]",[1957,1986],"[STRAPI.UserData.Customers, USERSCAN.ScanOptionSelected, USERSCAN.UserScanSingleDataSets]"]