[{"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js":"1","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js":"2","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js":"3","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js":"4","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js":"5","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js":"6","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js":"7","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js":"8","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js":"9","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js":"10","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js":"11","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js":"12","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js":"13","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js":"14","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js":"15","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js":"16","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js":"17","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js":"18","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js":"19","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js":"20","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js":"21","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleMarkerBasedScan.js":"22","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleScanProcess.js":"23","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\authUser.js":"24","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Landing\\index.js":"25","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\AuthLogin\\index.js":"26","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\index.js":"27","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\About\\about.js":"28","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Contact\\contact.js":"29","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\index.js":"30","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\unAuth\\UnAuth.js":"31","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\AUTH.js":"32","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\AUTH.js":"33","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\AuthDashboard.js":"34","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\PublicLayout.js":"35","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Public\\Navigation.js":"36","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\input.js":"37","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\LoginForm.js":"38","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Landing.js":"39","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Loading\\Loading.js":"40","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\DataDump.js":"41","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan.js":"42","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Map.js":"43","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\ResidualLocationMarkers.js":"44","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkerBasedResults.js":"45","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\LocationMarkers.js":"46","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkersCenterpoints.js":"47","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ColorKey.js":"48","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ClusterResults.js":"49","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\HistoryRerfresh.js":"50","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ViewSingleResultBtn.js":"51","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateSingleScanBtn.js":"52","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoAddItemsSingleScan.js":"53","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoScanType.js":"54","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\SetSelectedBtn.js":"55","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\CreateScanoptions.js":"56","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateNewModel.js":"57","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectCompare.js":"58","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel.js":"59","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ViewModels.js":"60","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CompareModels.js":"61","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\COMPARE.js":"62","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleCompare.js":"63","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\COMPARE.js":"64","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ConfirmCompareBtn.js":"65","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\SelectModels.js":"66","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareModels.js":"67","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ResetCompareModels.js":"68","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableHeader.js":"69","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableClusters.js":"70","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalWorkOrders.js":"71","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalLocations.js":"72","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableLocationsInScope.js":"73","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableLocationsUnaccomidated.js":"74","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalWorkOrdersCoveredInCluster.js":"75","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableWorkorders.js":"76","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableClusters.js":"77","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableLocations.js":"78","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableResourceAllocation.js":"79","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalResourceAllocation.js":"80","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableResourceAllocationPerResourceTotal.js":"81","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableClusterBreakDown.js":"82","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableWorkOrderByClient.js":"83","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableTradeTypes.js":"84","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTradeTypeBreakdown.js":"85","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableSitesByTier.js":"86","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult.js":"87","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ScanStateBtn.js":"88","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\Footer.js":"89","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\UICompnents\\index.js":"90","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Type.js":"91","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\Section.js":"92","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Locations.js":"93","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\HeaderTitle.js":"94","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\AppBar.js":"95","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_FullMap.js":"96","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Client.js":"97","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Clusters.js":"98","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Workorders.js":"99","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Trade.js":"100","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_Basic_Stats.js":"101","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_ByTier.js":"102","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_Basic_Charts.js":"103","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_Basics.js":"104","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_Basic_Charts.js":"105","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clients_Names.js":"106","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_ResourceAllocation.js":"107","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Ratios.js":"108","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\OLD_ResultHeader.js":"109","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Map_Full_MAin.js":"110","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Map_SingleModelReview_FULLModel.js":"111","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\LocationMarkers.js":"112","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ResidualLocationMarkers.js":"113","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Polygons.js":"114","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MarkersCenterpoints.js":"115","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MarkerBasedResults.js":"116","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MapColorKey.js":"117","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\OLD_ResultMap.js":"118","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clusters_ResultsList.js":"119","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ClusterMiniMapResults\\ClusterResults.js":"120","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ClusterMiniMapResults\\ClusterMiniMap.js":"121","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\SelectandReview.js":"122","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\ScanSelectItems.js":"123","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\ScanReviewSelectedItems.js":"124","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\RadialSIngleChart.js":"125","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_CLusterSpreadbyCLient.js":"126","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\RadialMultiChart.js":"127","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MapMainFilter.js":"128","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_ResourceSpread.js":"129","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\StackedBarChart.js":"130","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByResourceType.js":"131","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByClusterType.js":"132","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByCapitalCities.js":"133","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectResourceType.js":"134","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_WorkOrderSpread.js":"135","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\ChartHeader.js":"136","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\ReviewGlobalFilter.js":"137","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\FilterChips.js":"138","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_Heatmap.js":"139","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectClusterType.js":"140","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Radial_Charts.js":"141","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Heatmap.js":"142","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\ModelSingleReview.js":"143","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SINGLE.js":"144","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\CreateSingleViewModel.js":"145","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrder_Radial_Charts.js":"146","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Radial_Clients.js":"147","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_AllocationOverTime.js":"148","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Specific_ClientBreakdown.js":"149","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Specific_Overview.js":"150","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_Basic_Differences.js":"151","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clients_Site_Resource_StatsBar.js":"152","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_WorkordersOverTime.js":"153","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_OverTime.js":"154","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_ResourceAllocationOverTime.js":"155","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectClient.js":"156","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_ResourceDistribution.js":"157"},{"size":1249,"mtime":1612394991365,"results":"158","hashOfConfig":"159"},{"size":517,"mtime":1610596234694,"results":"160","hashOfConfig":"159"},{"size":362,"mtime":499162500000,"results":"161","hashOfConfig":"159"},{"size":344,"mtime":1608627476978,"results":"162","hashOfConfig":"159"},{"size":423,"mtime":1612400881139,"results":"163","hashOfConfig":"159"},{"size":2818,"mtime":1612845606536,"results":"164","hashOfConfig":"159"},{"size":87,"mtime":1608627826907,"results":"165","hashOfConfig":"159"},{"size":5760,"mtime":1612412786342,"results":"166","hashOfConfig":"159"},{"size":1853,"mtime":1612392518100,"results":"167","hashOfConfig":"159"},{"size":3018,"mtime":1611208185346,"results":"168","hashOfConfig":"159"},{"size":2260,"mtime":1612237343586,"results":"169","hashOfConfig":"159"},{"size":12399,"mtime":1612412785866,"results":"170","hashOfConfig":"159"},{"size":1995,"mtime":1610967499605,"results":"171","hashOfConfig":"159"},{"size":661,"mtime":1612412633952,"results":"172","hashOfConfig":"159"},{"size":2854,"mtime":1612400872747,"results":"173","hashOfConfig":"159"},{"size":9885,"mtime":1612846171506,"results":"174","hashOfConfig":"159"},{"size":661,"mtime":1612392447468,"results":"175","hashOfConfig":"159"},{"size":802,"mtime":1612497021993,"results":"176","hashOfConfig":"159"},{"size":959,"mtime":1609677692743,"results":"177","hashOfConfig":"159"},{"size":11522,"mtime":1612412785866,"results":"178","hashOfConfig":"159"},{"size":257,"mtime":1609657333309,"results":"179","hashOfConfig":"159"},{"size":11449,"mtime":1612831915819,"results":"180","hashOfConfig":"159"},{"size":2328,"mtime":1612412785866,"results":"181","hashOfConfig":"159"},{"size":6885,"mtime":1612412782761,"results":"182","hashOfConfig":"159"},{"size":405,"mtime":1610502856130,"results":"183","hashOfConfig":"159"},{"size":944,"mtime":1612224754193,"results":"184","hashOfConfig":"159"},{"size":4825,"mtime":1612224759452,"results":"185","hashOfConfig":"159"},{"size":149,"mtime":1610502909105,"results":"186","hashOfConfig":"159"},{"size":155,"mtime":1610502916347,"results":"187","hashOfConfig":"159"},{"size":1743,"mtime":1611184340847,"results":"188","hashOfConfig":"159"},{"size":160,"mtime":1610448527461,"results":"189","hashOfConfig":"159"},{"size":1396,"mtime":1610779434340,"results":"190","hashOfConfig":"159"},{"size":654,"mtime":1610861163069,"results":"191","hashOfConfig":"159"},{"size":1928,"mtime":1611901415553,"results":"192","hashOfConfig":"159"},{"size":1983,"mtime":1611184403823,"results":"193","hashOfConfig":"159"},{"size":1028,"mtime":1610585645670,"results":"194","hashOfConfig":"159"},{"size":882,"mtime":1610504872791,"results":"195","hashOfConfig":"159"},{"size":2511,"mtime":1612224754193,"results":"196","hashOfConfig":"159"},{"size":1438,"mtime":1611874750577,"results":"197","hashOfConfig":"159"},{"size":1268,"mtime":1612412274048,"results":"198","hashOfConfig":"159"},{"size":178,"mtime":1612412855636,"results":"199","hashOfConfig":"159"},{"size":1281,"mtime":1612412785866,"results":"200","hashOfConfig":"159"},{"size":1574,"mtime":1612412358680,"results":"201","hashOfConfig":"159"},{"size":3156,"mtime":1612412342861,"results":"202","hashOfConfig":"159"},{"size":2016,"mtime":1612412346359,"results":"203","hashOfConfig":"159"},{"size":3467,"mtime":1612412353984,"results":"204","hashOfConfig":"159"},{"size":2229,"mtime":1612224749439,"results":"205","hashOfConfig":"159"},{"size":1561,"mtime":1612224691804,"results":"206","hashOfConfig":"159"},{"size":1596,"mtime":1612224691804,"results":"207","hashOfConfig":"159"},{"size":639,"mtime":1612224691804,"results":"208","hashOfConfig":"159"},{"size":2899,"mtime":1612412785866,"results":"209","hashOfConfig":"159"},{"size":758,"mtime":1612421792565,"results":"210","hashOfConfig":"159"},{"size":615,"mtime":1612224691803,"results":"211","hashOfConfig":"159"},{"size":602,"mtime":1612224691803,"results":"212","hashOfConfig":"159"},{"size":595,"mtime":1612224691804,"results":"213","hashOfConfig":"159"},{"size":4270,"mtime":1612224754193,"results":"214","hashOfConfig":"159"},{"size":613,"mtime":1612224691803,"results":"215","hashOfConfig":"159"},{"size":1706,"mtime":1612224749438,"results":"216","hashOfConfig":"159"},{"size":1368,"mtime":1612421716785,"results":"217","hashOfConfig":"159"},{"size":5672,"mtime":1612412785866,"results":"218","hashOfConfig":"159"},{"size":883,"mtime":1612412606161,"results":"219","hashOfConfig":"159"},{"size":1186,"mtime":1611016416902,"results":"220","hashOfConfig":"159"},{"size":2011,"mtime":1612412785866,"results":"221","hashOfConfig":"159"},{"size":684,"mtime":1611014353088,"results":"222","hashOfConfig":"159"},{"size":607,"mtime":1612224691803,"results":"223","hashOfConfig":"159"},{"size":2471,"mtime":1612412573543,"results":"224","hashOfConfig":"159"},{"size":1242,"mtime":1612412785866,"results":"225","hashOfConfig":"159"},{"size":605,"mtime":1612224691803,"results":"226","hashOfConfig":"159"},{"size":730,"mtime":1612412785866,"results":"227","hashOfConfig":"159"},{"size":858,"mtime":1612224749438,"results":"228","hashOfConfig":"159"},{"size":748,"mtime":1612224749438,"results":"229","hashOfConfig":"159"},{"size":750,"mtime":1612224749438,"results":"230","hashOfConfig":"159"},{"size":1260,"mtime":1612224749438,"results":"231","hashOfConfig":"159"},{"size":1307,"mtime":1612224749438,"results":"232","hashOfConfig":"159"},{"size":1199,"mtime":1612224749438,"results":"233","hashOfConfig":"159"},{"size":731,"mtime":1611028018431,"results":"234","hashOfConfig":"159"},{"size":516,"mtime":1611022938741,"results":"235","hashOfConfig":"159"},{"size":909,"mtime":1611029567080,"results":"236","hashOfConfig":"159"},{"size":687,"mtime":1611022041993,"results":"237","hashOfConfig":"159"},{"size":771,"mtime":1612224749438,"results":"238","hashOfConfig":"159"},{"size":814,"mtime":1612224749438,"results":"239","hashOfConfig":"159"},{"size":2599,"mtime":1612224749438,"results":"240","hashOfConfig":"159"},{"size":2392,"mtime":1612224749438,"results":"241","hashOfConfig":"159"},{"size":490,"mtime":1611028627460,"results":"242","hashOfConfig":"159"},{"size":1484,"mtime":1612224749438,"results":"243","hashOfConfig":"159"},{"size":2425,"mtime":1612224749438,"results":"244","hashOfConfig":"159"},{"size":2133,"mtime":1612845147544,"results":"245","hashOfConfig":"159"},{"size":1101,"mtime":1611033406310,"results":"246","hashOfConfig":"159"},{"size":177,"mtime":1611106241190,"results":"247","hashOfConfig":"159"},{"size":6481,"mtime":1611902389898,"results":"248","hashOfConfig":"159"},{"size":377,"mtime":1611879742123,"results":"249","hashOfConfig":"159"},{"size":191,"mtime":1611880708379,"results":"250","hashOfConfig":"159"},{"size":1166,"mtime":1612855731364,"results":"251","hashOfConfig":"159"},{"size":1418,"mtime":1612845000167,"results":"252","hashOfConfig":"159"},{"size":2541,"mtime":1612319980470,"results":"253","hashOfConfig":"159"},{"size":481,"mtime":1612267326651,"results":"254","hashOfConfig":"159"},{"size":2179,"mtime":1612855983317,"results":"255","hashOfConfig":"159"},{"size":852,"mtime":1612760888496,"results":"256","hashOfConfig":"159"},{"size":785,"mtime":1612836443123,"results":"257","hashOfConfig":"159"},{"size":2681,"mtime":1612825512560,"results":"258","hashOfConfig":"159"},{"size":1959,"mtime":1612412296663,"results":"259","hashOfConfig":"159"},{"size":1126,"mtime":1612410406093,"results":"260","hashOfConfig":"159"},{"size":1970,"mtime":1612855606252,"results":"261","hashOfConfig":"159"},{"size":1925,"mtime":1612225265941,"results":"262","hashOfConfig":"159"},{"size":2221,"mtime":1612412290976,"results":"263","hashOfConfig":"159"},{"size":1490,"mtime":1612225407057,"results":"264","hashOfConfig":"159"},{"size":1865,"mtime":1612752993273,"results":"265","hashOfConfig":"159"},{"size":1481,"mtime":1612412195182,"results":"266","hashOfConfig":"159"},{"size":1357,"mtime":1612227661625,"results":"267","hashOfConfig":"159"},{"size":593,"mtime":1612266935153,"results":"268","hashOfConfig":"159"},{"size":1445,"mtime":1612412785866,"results":"269","hashOfConfig":"159"},{"size":5445,"mtime":1612412785866,"results":"270","hashOfConfig":"159"},{"size":3203,"mtime":1612412785866,"results":"271","hashOfConfig":"159"},{"size":2682,"mtime":1612250401130,"results":"272","hashOfConfig":"159"},{"size":2240,"mtime":1612226142973,"results":"273","hashOfConfig":"159"},{"size":4422,"mtime":1612226987862,"results":"274","hashOfConfig":"159"},{"size":2062,"mtime":1612267271008,"results":"275","hashOfConfig":"159"},{"size":484,"mtime":1612226692141,"results":"276","hashOfConfig":"159"},{"size":1183,"mtime":1612412329781,"results":"277","hashOfConfig":"159"},{"size":3569,"mtime":1612412785866,"results":"278","hashOfConfig":"159"},{"size":3220,"mtime":1612226943564,"results":"279","hashOfConfig":"159"},{"size":806,"mtime":1612227396905,"results":"280","hashOfConfig":"159"},{"size":4048,"mtime":1612412510064,"results":"281","hashOfConfig":"159"},{"size":3180,"mtime":1612412785866,"results":"282","hashOfConfig":"159"},{"size":757,"mtime":1612497273344,"results":"283","hashOfConfig":"159"},{"size":3896,"mtime":1612232478939,"results":"284","hashOfConfig":"159"},{"size":948,"mtime":1612239028885,"results":"285","hashOfConfig":"159"},{"size":595,"mtime":1612266907546,"results":"286","hashOfConfig":"159"},{"size":2222,"mtime":1612410172484,"results":"287","hashOfConfig":"159"},{"size":1162,"mtime":1612269527076,"results":"288","hashOfConfig":"159"},{"size":2227,"mtime":1612412785866,"results":"289","hashOfConfig":"159"},{"size":2236,"mtime":1612412785866,"results":"290","hashOfConfig":"159"},{"size":3005,"mtime":1612412785866,"results":"291","hashOfConfig":"159"},{"size":2195,"mtime":1612845006055,"results":"292","hashOfConfig":"159"},{"size":2056,"mtime":1612412302759,"results":"293","hashOfConfig":"159"},{"size":1931,"mtime":1612330353784,"results":"294","hashOfConfig":"159"},{"size":833,"mtime":1612847120191,"results":"295","hashOfConfig":"159"},{"size":2358,"mtime":1612847198809,"results":"296","hashOfConfig":"159"},{"size":1717,"mtime":1612410158989,"results":"297","hashOfConfig":"159"},{"size":2227,"mtime":1612845557009,"results":"298","hashOfConfig":"159"},{"size":2128,"mtime":1612497277338,"results":"299","hashOfConfig":"159"},{"size":1738,"mtime":1612415934735,"results":"300","hashOfConfig":"159"},{"size":923,"mtime":1612398332279,"results":"301","hashOfConfig":"159"},{"size":672,"mtime":1612392440875,"results":"302","hashOfConfig":"159"},{"size":29123,"mtime":1612847097682,"results":"303","hashOfConfig":"159"},{"size":2814,"mtime":1612417841239,"results":"304","hashOfConfig":"159"},{"size":4141,"mtime":1612762808336,"results":"305","hashOfConfig":"159"},{"size":2668,"mtime":1612832377801,"results":"306","hashOfConfig":"159"},{"size":3596,"mtime":1612769463858,"results":"307","hashOfConfig":"159"},{"size":1148,"mtime":1612769421827,"results":"308","hashOfConfig":"159"},{"size":3386,"mtime":1612843469225,"results":"309","hashOfConfig":"159"},{"size":2313,"mtime":1612835620928,"results":"310","hashOfConfig":"159"},{"size":3557,"mtime":1612841184614,"results":"311","hashOfConfig":"159"},{"size":2547,"mtime":1612836581978,"results":"312","hashOfConfig":"159"},{"size":3618,"mtime":1612841560828,"results":"313","hashOfConfig":"159"},{"size":2334,"mtime":1612847175591,"results":"314","hashOfConfig":"159"},{"size":2984,"mtime":1612856107203,"results":"315","hashOfConfig":"159"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"319"},"i3jrvt",{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"319"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"319"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"319"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"319"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"319"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"362"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"319"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"319"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"319"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"319"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"319"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"319"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"319"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"319"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"319"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"319"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"319"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"319"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"319"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"319"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"319"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"319"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"319"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"319"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"319"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"319"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"319"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"319"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"319"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"319"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"319"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"319"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"319"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"319"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"319"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"319"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"319"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"319"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"319"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"319"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"319"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"319"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"319"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"319"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"319"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"319"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"319"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"319"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"319"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"319"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"319"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"319"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"319"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"319"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"319"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"584","messages":"585","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"587"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"319"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"319"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"319"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"319"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"319"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"319"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"319"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"614"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"614"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"622","messages":"623","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"319"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"319"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"319"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"319"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"319"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"319"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"645"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"645"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"655","messages":"656","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"587"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"319"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"319"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"319"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"319"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"319"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"319"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"319"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"319"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"319"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"319"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"319"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"319"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"319"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"319"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"319"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"319"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"319"},"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js",["727"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { LoadScript } from '@react-google-maps/api';\nimport {UXContextProvider} from \"./Context/UX\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport store from './store/'; \nimport {LoadPrototype} from \"./actions/PrototypeLoader\";\nimport {JWT} from \"./actions/authUser\";\n\n/*\ngit add .\ngit commit -am \"FirstPushTest\"\ngit push heroku master\n\n*/\nrequire('dotenv').config();\nconst PrepApp = new LoadPrototype();\nconst JWTCHECK = JWT();\nPrepApp.Fetch();\n//require('dotenv').config()\n\nlet APIKEY = process.env.REACT_APP_GOOGLEAPI;\n\nReactDOM.render(\n    <Provider store={ store }>\n      <LoadScript  googleMapsApiKey={APIKEY}  libraries={[\"visualization\"]}>\n        <UXContextProvider>\n          <React.StrictMode>\n            <App />\n          </React.StrictMode>\n        </UXContextProvider>\n      </LoadScript>\n    </Provider>,\n  document.getElementById('root')\n); \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["728","729"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js",["730"],"\r\n// Private Functions\r\nimport store from \"../store/index\"\r\nimport axios from 'axios';\r\nimport {useAPILOCATION} from \"./authUser\"\r\n\r\n\r\n/*\r\nexport function LoginSequence(arr){\r\n    let State = arr.map((Value,i)=>{\r\n       store.dispatch({ type:Value.Type, payload:Value.Value });\r\n       return true;\r\n    })\r\n    return State;\r\n} \r\n */\r\n\r\nexport function LoadPrototype(){\r\n\r\n    console.log(\"LOAD ME\")\r\n    this.API=useAPILOCATION()+'graphql'\r\n\r\n    this.Limit=100;\r\n\r\n   \r\n\r\n    this.RegionRequest= `\r\n         {name id combined long lat  \r\n          count{ WorkOrders JobTypes TradeTypes Customers} \r\n          sites{name id lat long delivery_model{name id} combined count{ WorkOrders JobTypes TradeTypes Customers} }\r\n          cities{name id }\r\n        }\r\n      `\r\n    this.LimitedRequest = `{ name id }`\r\n\r\n    \r\n    this.Store={customers:true,SmallFetch:true, sites:true}\r\n\r\n    this.SmallReturnsQuery = `query{ \r\n        states {name id combined long lat count{ WorkOrders } }\r\n        countries { country lat long combined count{ WorkOrders }}\r\n      }`\r\n    // THIS IS HORRIBLE FIX IT\r\n    this.SitesRequest =`{ name lat long combined siteweighting count{ WorkOrders}  region_type{name} postcode{name} }`\r\n    this.StoreSites=[]\r\n    this.SitesQuery =` query { sites (start: 0) ${ this.SitesRequest} }`;\r\n\r\n    this.StoreRegions=[]\r\n    this.RegionQuery = `query {regions (start: 0) ${this.RegionRequest}}`\r\n\r\n    this.StoreCustomers=[]\r\n    this.CustomerQuery = `query { customers (start: 0) ${this.LimitedRequest}}`;\r\n\r\n    \r\n    this.GraphQL=(Query, CallBack)=>{\r\n        axios({  url: this.API,  method: 'post', data: { query: Query} }).then((result) => { CallBack(result.data) });\r\n    }\r\n\r\n\r\n    this.Fetch = ()=>{\r\n        console.log(\"Prep App\");\r\n        // Large Data Fetch\r\n        \r\n        // commented out for dev\r\n        //this.GraphQL(this.SitesQuery, this.ProcessSites)\r\n        //this.GraphQL(this.RegionQuery, this.ProcessRegions)\r\n\r\n    //    this.GraphQL(this.CustomerQuery, this.ProcessCustomer)\r\n\r\n        // Small Data Fetch\r\n    //    this.GraphQL( this.SmallReturnsQuery, this.ProcessSmallReturns)\r\n    this.processCheck()\r\n    }\r\n\r\n\r\n\r\n    /* *************************************************************************************************** */\r\n    // Process Small\r\n    /* *************************************************************************************************** */       \r\n        this.ProcessSmallReturns = (Data)=>{\r\n            //console.log(Data.data)\r\n\r\n            store.dispatch({ type:'STORECOUNTRIES', payload:Data.data.countries});\r\n            store.dispatch({ type:'STORETRADETYPE', payload:Data.data.tradeTypes});\r\n            store.dispatch({ type:'STOREJOBTYPE', payload:Data.data.jobTypes});\r\n            store.dispatch({ type:'STOREINDUSTRYTYPE', payload:Data.data.industryTypes});\r\n            store.dispatch({ type:'STORERATIOMODELS', payload:Data.data.ratioModels});\r\n            store.dispatch({ type:'STORESTATES', payload:Data.data.states});\r\n\r\n            this.Store.SmallFetch=true;\r\n            this.processCheck()\r\n        }     \r\n\r\n        \r\n  /* *************************************************************************************************** */\r\n    // Sites\r\n     /* *************************************************************************************************** */\r\n     this.ProcessSites=(Data)=>{ \r\n        this.StoreSites = [...this.StoreSites,...Data.data.sites];\r\n\r\n      //console.log(\"modulus\", this.StoreSites.length % this.Limit);\r\n\r\n        //console.log(this.StoreSites)\r\n\r\n        if((this.StoreSites.length % this.Limit) === 0){  \r\n            this.GraphQL(`query {sites (start: ${this.StoreSites.length}) ${this.SitesRequest}}`, this.ProcessSites)\r\n        }\r\n        else{ this.Store.sites=true}\r\n\r\n        store.dispatch({ type:'STORESITES', payload:this.StoreSites});\r\n\r\n        this.processCheck()\r\n    }\r\n\r\n  /* *************************************************************************************************** */\r\n    // Regions\r\n     /* *************************************************************************************************** */\r\n     this.ProcessRegions=(Data)=>{ \r\n        this.StoreRegions = [...this.StoreRegions,...Data.data.regions];\r\n\r\n           //console.log(\"modulus\", this.StoreRegions.length % this.Limit)\r\n        if((this.StoreRegions.length % this.Limit) === 0){  \r\n            this.GraphQL(`query {regions (start: ${this.StoreRegions.length}) ${this.RegionRequest}}`, this.ProcessRegions)\r\n        }\r\n        else{ this.Store.Region=true}\r\n\r\n        store.dispatch({ type:'STOREREGIONS', payload:this.StoreRegions});\r\n\r\n        this.processCheck()\r\n    }\r\n\r\n  /* *************************************************************************************************** */\r\n  // Customer\r\n   /* *************************************************************************************************** */\r\n   this.ProcessCustomer=(Data)=>{ \r\n    this.StoreCustomers = [...this.StoreCustomers,...Data.data.customers];\r\n\r\n    if(this.StoreCustomers.length === this.Limit){  \r\n        this.GraphQL(`query {customers (start: ${Data.data.customers.length}) ${this.LimitedRequest}}`, \r\n        this.ProcessCustomer)\r\n    }\r\n    else{ this.Store.customers=true}\r\n\r\n    store.dispatch({ type:'STORECUSTOMERS', payload:this.StoreCustomers});\r\n\r\n    this.processCheck()\r\n    }\r\n\r\n\r\n    /* Is Process Complete?  */\r\n    this.processCheck=()=>{ \r\n        let Load = true\r\n        Object.keys(this.Store).map((k,i)=>{\r\n            if(!this.Store[k])\r\n                Load=false\r\n        })\r\n        console.log(\"Load\", Load)\r\n            if(Load)\r\n                store.dispatch({ type:'DATARECEIVED', payload:true});\r\n            \r\n    }\r\n\r\n\r\n\r\n} ","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js",["731","732","733","734","735","736","737","738"],"import { Circle } from '@react-google-maps/api';\r\nimport store from \"../store/index\"\r\nimport {ClusterAnalysis} from \"./ClusterAnalysis\";\r\n\r\n\r\n\r\n/*\r\n    This class should deal with Geolocation Processes ONLY\r\n    all result filtering to be handled in phase two\r\n\r\n*/\r\n\r\n\r\n// find the distance in KM from 1 point to another\r\nexport function distancetoPoint(lat1, lon1, lat2, lon2, unit) {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1/180;\r\n        var radlat2 = Math.PI * lat2/180;\r\n        var theta = lon1-lon2;\r\n        var radtheta = Math.PI * theta/180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit==\"K\") { dist = dist * 1.609344 }\r\n        if (unit==\"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\n// use to find the scan box area.\r\n// this function return the corosponding lnglat to a given point\r\n\r\n\r\nexport  function llFromDistance(latitude, longitude, distance, bearing) {\r\n    // taken from: https://stackoverflow.com/a/46410871/13549 \r\n    // distance in KM, bearing in degrees\r\n  \r\n    const R = 6378.1; // Radius of the Earth\r\n    const brng = bearing * Math.PI / 180; // Convert bearing to radian\r\n    let lat = latitude * Math.PI / 180; // Current coords to radians\r\n    let lon = longitude * Math.PI / 180;\r\n  \r\n    // Do the math magic\r\n    lat = Math.asin(Math.sin(lat) * Math.cos(distance / R) + Math.cos(lat) * Math.sin(distance / R) * Math.cos(brng));\r\n    lon += Math.atan2(Math.sin(brng) * Math.sin(distance / R) * Math.cos(lat), Math.cos(distance / R) - Math.sin(lat) * Math.sin(lat));\r\n  \r\n    // Coords back to degrees and return\r\n    return [(lat * 180 / Math.PI), (lon * 180 / Math.PI)];\r\n  \r\n  }\r\n\r\n\r\n  export const TestBoundaries = (site, Area)=>{\r\n    let found=false;\r\n    if(site.lat <=  Area.north && site.lat >= Area.south && site.long >= Area.west && site.long <= Area.east ){found=true}\r\n    return found\r\n}\r\n\r\n\r\n\r\n\r\n\r\n \r\n// Main Scan Class\r\nexport function PreformScan(){\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Variables */\r\n    /* *************************************************************************************************************** */        \r\n    \r\n    //this.Area=.5\r\n    //this.ScanDistanceArea=this.Area;\r\n    //this.SearchRadius = .5\r\n    //this.minSites=2\r\n    //this.WorkOrderVariants = [500,1500];\r\n    this.FilterVariables=null\r\n\r\n\r\n    this.Boundaries=null;\r\n    this.setGridpoints=null;\r\n    this.setGridPointer=null;\r\n\r\n    this.TestAgainstSites=null;\r\n    this.ScanResults=[];\r\n    this.setScanResults=null\r\n    this.sleepFor=10;\r\n    this.NESW={ north: null, south: null, east: null,  west: null }\r\n    \r\n    \r\n    this.PointOptions={\r\n        strokeColor: '#FF0000',\r\n        strokeOpacity: 0.5,\r\n        strokeWeight: 1,\r\n        fillColor: '#FF0000',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 10,\r\n        zIndex: 1\r\n      }\r\n         \r\n     this.GridPointerOptions = {\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 100,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.GridResultOptions={\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 1000,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.recOptions={\r\n        strokeColor: '#6094ff',\r\n        strokeOpacity: 0.9,\r\n        strokeWeight: 1,\r\n        fillColor: '#6094ff',\r\n        fillOpacity: 0.15,\r\n      }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /*  AUX Functions*/\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.sleep = ()=>{  return new Promise(resolve => setTimeout(resolve, this.sleepFor)) }\r\n    \r\n    this.BreakBoundaries=(Boundaries)=>{\r\n        this.NESW = {  north: Boundaries[1], south: Boundaries[0], east: Boundaries[3], west: Boundaries[2] }\r\n    }\r\n\r\n    this.arePointsNear = (checkPoint, centerPoint, km) => {\r\n                var ky = 40000 / 360;\r\n                var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\r\n                var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\r\n                var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\r\n                return Math.sqrt(dx * dx + dy * dy) <= km;\r\n            }\r\n\r\n    this.RemoveDuplicates =()=>{\r\n\r\n    }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Process */\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.Scan=()=>{\r\n            console.log(\"START SCAN \")\r\n            console.log(\"Scan Filters\", this.FilterVariables)\r\n            \r\n            this.BreakBoundaries(this.Boundaries)\r\n            //console.log(this.NESW)\r\n            \r\n            \r\n            //console.log(this.FilterVariables.Area, this.FilterVariables);\r\n            let Xiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.north, this.NESW.east,'K')/this.FilterVariables.GridSpacing;\r\n            let Yiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.south, this.NESW.west,'K')/this.FilterVariables.GridSpacing;\r\n\r\n            //console.log( Xiterations, Yiterations);\r\n            //let ScanBoxStartingPosition = llFromDistance(this.NESW.north, this.NESW.west, Math.sqrt(2)*this.Area, 135)\r\n            \r\n            //let LargestSurfaceArea = Math.max(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: this.NESW.north, lng: this.NESW.west }} />)\r\n            this.FindScanPoints(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n            \r\n        }\r\n\r\n\r\n\r\n    this.FindScanPoints = (Xiterations, Yiterations)=>{\r\n\r\n        //console.log(Xiterations, Yiterations);\r\n\r\n        let LargestSurfaceArea = Math.max(Xiterations, Yiterations)\r\n        let i=0;\r\n        let Points = []\r\n        let ReturnedLngLat;\r\n\r\n      \r\n        while( i < LargestSurfaceArea){\r\n           \r\n            ReturnedLngLat = llFromDistance(this.NESW.north, this.NESW.west, (Math.sqrt(2)*(i*this.FilterVariables.GridSpacing)), 135)\r\n            //console.log(ReturnedLngLat[0],ReturnedLngLat[1])\r\n            Points.push([ReturnedLngLat[0],ReturnedLngLat[1]]) \r\n            \r\n            i++\r\n        }\r\n\r\n        //console.log(Points);\r\n        this.MapScanPoints(Points, Xiterations, Yiterations)\r\n    }\r\n\r\n\r\n\r\n    this.MapScanPoints=(Points, Xiterations, Yiterations)=>{\r\n\r\n        let MapGrid=[]\r\n        let createCircles=[];\r\n\r\n\r\n        let ii=0;\r\n\r\n        while(ii < Yiterations){\r\n            let Row=0, Col=0, iii=0\r\n            while(iii < Xiterations){\r\n                Row=ii;\r\n                Col=iii\r\n                    //console.log([Row,Col])\r\n                    MapGrid.push([Points[Row][0], Points[Col][1]])\r\n                    createCircles.push(<Circle key={ii+iii} options={this.PointOptions}  center={{ lat: Points[Row][0], lng: Points[Col][1] }} />)\r\n                    iii++\r\n            }\r\n            ii++\r\n        }\r\n        //console.log(MapGrid);\r\n        this.setGridpoints(createCircles)\r\n        this.RunScanTest (MapGrid)\r\n    }\r\n\r\n\r\n    this.RunScanTest = async(MapGrid)=>{\r\n        \r\n        // Variables\r\n        this.setScanResults(null)\r\n        let i=0\r\n        // run loop to scan through Grid points\r\n        while(i<MapGrid.length){\r\n            // Hold scan point for FE show only\r\n            await this.sleep()\r\n            // find\r\n          //  let ScanBoxNewPosition = llFromDistance(MapGrid[i][0], MapGrid[i][1], Math.sqrt(2)*this.Area, 135)\r\n          //  south: ScanBoxNewPosition[0],east: ScanBoxNewPosition[1],\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: MapGrid[i][0], lng: MapGrid[i][1] }} />)\r\n            \r\n            // Create Circle Center point to scan in next function hand off.\r\n            let ScanBoundary = { north: MapGrid[i][0],  west: MapGrid[i][1] }\r\n            \r\n            this.scanTestDiameter(ScanBoundary)\r\n            \r\n            i++\r\n        }\r\n\r\n        this.setGridPointer(<Circle visible={false} options={this.GridPointerOptions}   />)\r\n        this.StoreResults()\r\n        ClusterAnalysis(this.ScanResults)\r\n        \r\n    }\r\n\r\n\r\n\r\n    this.scanTestDiameter = (ScanBoundary)=>{\r\n\r\n        // This function checks to see if a site is within the Radius of the center point in the scan\r\n        // it should check each site lng/lst. if true then store in array this.ScanResults;\r\n       \r\n        // Outer Global Variables\r\n        let CollectSites=[];\r\n        let long=[],lat=[],GroupedBoxBoundaryLimits=[];\r\n       // Variables\r\n       let WorkOrderCount = 0;\r\n\r\n        // Loop known sites in this area for matches\r\n        this.TestAgainstSites.map((site,i)=>{\r\n            \r\n            \r\n            if(this.arePointsNear({ lat: site.lat, lng: site.long}, { lat: ScanBoundary.north, lng: ScanBoundary.west }, this.FilterVariables.SearchRadius)){\r\n\r\n                //console.log(site)\r\n\r\n                // Push Values into Arrays\r\n                long.push(site.long);\r\n                lat.push(site.lat)\r\n                CollectSites.push(site);\r\n                \r\n                //console.log(site)\r\n                //if(site.count[0] !== null) WorkOrderCount = WorkOrderCount + site.count[0].WorkOrders;\r\n               \r\n              \r\n            } // close if true\r\n           \r\n          })  // close Map\r\n\r\n            // Limit Boundaries to outer most\r\n            GroupedBoxBoundaryLimits.push([Math.max(...long), Math.min(...long), Math.max(...lat), Math.min(...lat)])\r\n            // if work orders !0 ship it off for processing\r\n            /*\r\n            if( WorkOrderCount >= this.FilterVariables.MinWorkOrder \r\n                && WorkOrderCount <= this.FilterVariables.MaxOrderOrders \r\n                && CollectSites.length>=this.FilterVariables.minSites)\r\n                { }\r\n            */\r\n                this.ProcessGridBoundary(CollectSites, GroupedBoxBoundaryLimits, ScanBoundary)\r\n        }\r\n\r\n \r\n\r\n    this.ProcessGridBoundary=(Sites, GroupedBoxBoundaryLimits, ScanBoundary)=>{\r\n     \r\n        // Variables\r\n        let tmp = [];\r\n        let remove=[];\r\n        let removeDuplicateBoundaryLimits;\r\n        \r\n        // remove any dupliactes from arrays\r\n        removeDuplicateBoundaryLimits = GroupedBoxBoundaryLimits.filter(function (v, i) {\r\n            if (tmp.indexOf(v.toString()) < 0) \r\n                { \r\n                    tmp.push(v.toString());\r\n                    return v;\r\n                }else{\r\n                    remove.push(i)\r\n                }\r\n        });\r\n\r\n        remove.map((id,i)=>{ Sites.splice(id, 1);})\r\n\r\n        // only add items with a site count\r\n        if(Sites.length>0){\r\n            this.ScanResults.push({\r\n                Sites:Sites,\r\n                SiteCount:Sites.length,\r\n                Boundary:ScanBoundary,\r\n                //WorkOrderCount:WorkOrderCount,\r\n                GroupedBoxBoundaryLimits:removeDuplicateBoundaryLimits[0]\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    this.StoreResults = ()=>{\r\n\r\n\r\n        //console.log(\"Scan End Num\", this.ScanResults.length)\r\n        // Store Results\r\n        store.dispatch({ type:'SCANSTATE', payload:false}); \r\n        \r\n        \r\n        //store.dispatch({ type:'STORERESULTS', payload:this.ScanResults});        \r\n \r\n    }\r\n\r\n} ","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js",["739"],"import React ,  { createContext, useContext, useMemo }from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*\r\n\r\nReducer State\r\n    Full\r\n    Countries\r\n\r\n*/\r\n// Create Draft Context for provider\r\n\r\nexport const Context_UX_FULL = createContext()\r\n\r\n// Custom Hooks\r\n\r\nexport const useContext_UX_FULL = ()=>{\r\n    return useContext(Context_UX_FULL)\r\n}\r\n\r\n\r\n \r\nexport const UXContextProvider = ({children})=>{\r\n        const UX = useSelector(state => state.UX );\r\n\r\n    useMemo(()=>{  },[UX]) \r\n\r\n    return(\r\n            <Context_UX_FULL.Provider value={UX}>\r\n                {children}            \r\n            </Context_UX_FULL.Provider>     \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js",["740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767"],"// Private Functions\r\nimport store from \"../store/index\"\r\n\r\n//import axios from 'axios';\r\nimport {distancetoPoint} from \"./GeoLocationActions\"\r\nimport { findIndex} from 'lodash'; \r\n\r\n\r\nexport const colorArray = ['#030303', '#787878', '#575757', '#999A9A', '#D4D4D3', '#313231', '#777777', '#575757', '#3A3A3A', '#444444',];\r\n\r\nexport function setMainMapLocation(Location){\r\n  const NewLocation = {\r\n    LatLngBoundaries:Location.Center,\r\n    BoundaryCenterPoint:null,\r\n    zoom:Location.Zoom,\r\n    Location:Location.Name\r\n}\r\n  store.dispatch({ type:'STOREMAPPARAMETERS', payload:NewLocation});\r\n}\r\n\r\n\r\nexport const SetMapClusterType = (type)=>{\r\n  store.dispatch({ type:'SETMAPCLUSTERTYPE', payload:type});\r\n}\r\n\r\nexport const SetMapResourceType = (type)=>{\r\n  //console.log(type)\r\n  store.dispatch({ type:'SETMAPRESOURCETYPE', payload:type});\r\n}\r\n\r\nexport const SetFilterClient = (type)=>{\r\n  //console.log(type)\r\n  store.dispatch({ type:'SETFILTERCLIENT', payload:type});\r\n}\r\n\r\nexport function numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const gl=(data)=>{ return data.length }\r\n\r\nexport function AreaFilter(type, value){\r\n    //console.log('AreaFilter', value)\r\n    store.dispatch({ type:type, payload:value});\r\n}\r\n\r\nexport function ScanState(value){\r\n   //console.log('ScanState', value)\r\n    store.dispatch({ type:'SCANSTATE', payload:value});\r\n}\r\n\r\nexport function SelectedRegion(SelectedRegion){\r\n\r\n    //console.log(SelectedRegion)\r\n    store.dispatch({ type:'STORESELECTEDAREA', payload:SelectedRegion});\r\n\r\n}\r\n\r\nexport function RemoveClusterItem(Haystack, Needle){ \r\n\r\n    //console.log(\"Delete Cluster\");\r\n    //console.log(Haystack, Needle);\r\n    let index = findIndex( Haystack, function(o) { return o.Boundary === Needle; })\r\n    //console.log(index);\r\n\r\n    Haystack.splice(index, 1)\r\n    //console.log(Haystack);\r\n    store.dispatch({ type:'STORERESULTS', payload:Haystack}); \r\n}\r\n\r\n \r\nexport function CreateMapParameters(DATA){\r\n\r\n            // USe this function to create ALL of the possible Map Data and Meta points.\r\n            // Try to limit the use on the UX.SelectedArea around the APP\r\n            // Instead focus on using UX.MapParameters\r\n\r\n            let centerLatArray = [];\r\n            let centerLngArray = [];\r\n            let Storesites=[]\r\n\r\n            //console.log(DATA)\r\n            DATA.map((Region, i)=>{\r\n                //console.log(\"Region\", Region)\r\n                Region.sites.map((marker,i)=>{\r\n                    Storesites.push(marker)\r\n                    if(!isNaN(parseFloat(marker.lat))){\r\n                        centerLatArray.push(parseFloat(marker.lat))\r\n                        centerLngArray.push(parseFloat(marker.long))\r\n                    }\r\n                })\r\n                //return false\r\n            })\r\n\r\n\r\n            let centerLat = ((Math.min(...centerLatArray) + Math.max(...centerLatArray))/2)\r\n            let centerLng = ((Math.min(...centerLngArray) + Math.max(...centerLngArray))/2)\r\n            let LatLngBoundaries = [Math.min(...centerLatArray),Math.max(...centerLatArray),Math.min(...centerLngArray),Math.max(...centerLngArray)]\r\n            \r\n            let distance = distancetoPoint(LatLngBoundaries[0],LatLngBoundaries[2], LatLngBoundaries[1],LatLngBoundaries[3],'K')\r\n           \r\n           //console.log('distance', (distance*1000), setZoomLevel((distance*1000).toFixed(0)));\r\n           \r\n            let zoom = setZoomLevel((distance*1000).toFixed(0))\r\n            let SetMap = true\r\n            //console.log('Storesites', Storesites)\r\n            \r\n            let MapParameters = {\r\n                LatLngBoundaries:LatLngBoundaries,\r\n                BoundaryCenterPoint:[centerLat, centerLng],\r\n                zoom:zoom,\r\n                SetMap:SetMap,\r\n                markers:Storesites\r\n            }\r\n\r\n            //console.log(\"MapParameters\", MapParameters)\r\n           //store.dispatch({ type:'STOREMAPPARAMETERS', payload:MapParameters});\r\n}\r\n\r\n\r\n\r\nfunction setZoomLevel(meters) { \r\n    //console.log(`Zoom level set meters: ${meters}`); \r\n\r\n    switch (meters) {\r\n        case (meters < 1128):\r\n            return 15;\r\n          break;\r\n        case ((meters > 1128) && (meters < 2256)):\r\n            return 14;\r\n          break;\r\n        case ((meters > 2256) && (meters < 4513)):\r\n            return 13;\r\n          break;\r\n        case ((meters > 4513) && (meters < 9027)):\r\n            return 12;\r\n          break; \r\n        case ((meters > 9027) && (meters < 18055)) :\r\n            return 11;\r\n          break;\r\n        case ((meters > 18055) && (meters < 36111)) :\r\n            return 10;\r\n          break; \r\n        case ((meters > 36111) && (meters < 72223)) :\r\n            return 9;\r\n          break;      \r\n        case ((meters > 72223) && (meters < 144447)) :\r\n            return 8;\r\n          break;   \r\n        case ((meters > 144447) && (meters < 288895)) :\r\n            return 7;\r\n          break;    \r\n        case ((meters > 288895) && (meters < 577790)) :\r\n            return 6;\r\n          break;  \r\n          case ((meters > 577790) && (meters < 1155581)) :\r\n            return 5;\r\n          break;     \r\n          default:\r\n            return 4;\r\n      }\r\n\r\n\r\n    //return zoomfactor;\r\n}\r\n\r\nexport function NumberReducer (labelValue) {\r\n\r\n    // Nine Zeroes for Billions\r\n    return Math.abs(Number(labelValue)) >= 1.0e+9\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+9 + \"B\"\r\n    // Six Zeroes for Millions \r\n    : Math.abs(Number(labelValue)) >= 1.0e+6\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+6 + \"M\"\r\n    // Three Zeroes for Thousands\r\n    : Math.abs(Number(labelValue)) >= 1.0e+3\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+3 + \"K\"\r\n\r\n    : Math.abs(Number(labelValue));\r\n\r\n}\r\n\r\n\r\nexport function HandleFilterChange(TYPE, VALUE){\r\n    //console.log(TYPE, VALUE)\r\n    store.dispatch({ type:TYPE, payload:VALUE});\r\n}\r\n\r\nexport function RegionColor(region){\r\n  switch (region) {\r\n      case 'SameBuilding':\r\n            return '#B2007C' \r\n            break;\r\n      case 'CBD':\r\n              return '#DC000B'\r\n        break;\r\n      case 'InnerCity':\r\n              return '#04419B'\r\n          break;\r\n      case 'Metro':\r\n              return '#11B700'\r\n          break;\r\n      case 'OuterMetro':\r\n              return '#330193'\r\n          break;\r\n        case 'Regional':\r\n          return '#FF7400'\r\n          break;\r\n        case 'Remote':\r\n          return '#3D1324'\r\n          break; \r\n      case 'ExtremeRemote':\r\n            return '#111D2F'\r\n          break;   \r\n     \r\n  }\r\n}\r\n\r\n\r\nexport const getDate=(timeStamp)=>{ \r\n\r\n  const milliseconds = timeStamp * 1000 \r\n\r\n  const dateObject = new Date(milliseconds)\r\n  //console.log(dateObject.getFullYear())\r\n  //let options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n  let options = { year: 'numeric', month: 'numeric', day: 'numeric' };\r\n  const humanDateFormat = dateObject.toLocaleString('en-UK',options) //2019-12-9 10:30:15\r\n\r\n  return humanDateFormat\r\n }\r\n\r\n\r\n\r\nfunction parseDate(input) {\r\n  // Transform date from text to date\r\nvar parts = input.match(/(\\d+)/g);\r\n// new Date(year, month [, date [, hours[, minutes[, seconds[, ms]]]]])\r\nreturn new Date(parts[0], parts[1]-1, parts[2]); // months are 0-based\r\n}\r\n\r\n\r\nexport const workingDaysBetweenDates = (S1, E1) => {\r\n  const S1Date = S1 * 1000; \r\n  const E1Date = E1 * 1000;\r\n  \r\n  const S1dateObject = new Date(S1Date)\r\n  const E1dateObject = new Date(E1Date)\r\n\r\n  let d0 = `${S1dateObject.getFullYear()}/${S1dateObject.getMonth()}/${S1dateObject.getDay()}`\r\n  let d1= `${E1dateObject.getFullYear()}/${E1dateObject.getMonth()}/${E1dateObject.getDay()}`\r\n  /* Two working days and an sunday (not working day) */\r\n  var holidays = [''];\r\n  var startDate = parseDate(d0);\r\n  var endDate = parseDate(d1);  \r\n\r\n// Validate input\r\n  if (endDate <= startDate) {\r\n    return 0;\r\n  }\r\n\r\n// Calculate days between dates\r\n  var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\r\n  startDate.setHours(0, 0, 0, 1);  // Start just after midnight\r\n  endDate.setHours(23, 59, 59, 999);  // End just before midnight\r\n  var diff = endDate - startDate;  // Milliseconds between datetime objects    \r\n  var days = Math.ceil(diff / millisecondsPerDay);\r\n\r\n  // Subtract two weekend days for every week in between\r\n  var weeks = Math.floor(days / 7);\r\n  days -= weeks * 2;\r\n\r\n  // Handle special cases\r\n  var startDay = startDate.getDay();\r\n  var endDay = endDate.getDay();\r\n    \r\n  // Remove weekend not previously removed.   \r\n  if (startDay - endDay > 1) {\r\n    days -= 2;\r\n  }\r\n  // Remove start day if span starts on Sunday but ends before Saturday\r\n  if (startDay == 0 && endDay != 6) {\r\n    days--;  \r\n  }\r\n  // Remove end day if span ends on Saturday but starts after Sunday\r\n  if (endDay == 6 && startDay != 0) {\r\n    days--;\r\n  }\r\n  /* Here is the code */\r\n  holidays.forEach(day => {\r\n    if ((day >= d0) && (day <= d1)) {\r\n      /* If it is not saturday (6) or sunday (0), substract it */\r\n      if ((parseDate(day).getDay() % 6) != 0) {\r\n        days--;\r\n      }\r\n    }\r\n  });\r\n\r\n  return days\r\n}\r\n\r\n\r\n\r\nexport const GroupArrayByOccurances =(arr) =>{\r\n  var a = [],b = [],prev;\r\n  arr.sort();\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr[i] !== prev) {\r\n      a.push(arr[i]);\r\n      b.push(1);\r\n    } else {\r\n      b[b.length - 1]++;\r\n    }\r\n    prev = arr[i];\r\n  }\r\n  return [a, b];\r\n}\r\n\r\nexport const HandleTZDate = (DATE)=>{\r\n  const options = { year: \"numeric\", month: \"long\", day: \"numeric\" }\r\n  return new Date(DATE).toLocaleDateString(undefined, options)\r\n\r\n // let NewDate = DATE.split('T');\r\n\r\n // return NewDate[0]\r\n}\r\n\r\n\r\n\r\n\r\n// UX Filters\r\n export const HandleResourceFilter=(item, filter)=>{\r\n    if(findIndex(item.resourceQuota, function(o) { return o.Trade === filter}) === -1)\r\n      return false  \r\n        return true\r\n }","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js",["768"],"import React ,  { createContext, useContext, useMemo }from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*\r\n\r\nReducer State\r\n\r\n*/\r\n// Create Draft Context for provider\r\n\r\nexport const Context_SCAN_FULL = createContext()\r\n\r\n// Custom Hooks\r\n\r\nexport const useContext_SCAN_FULL = ()=>{\r\n    return useContext(Context_SCAN_FULL)\r\n}\r\n\r\n\r\n \r\nexport const SCANContextProvider = ({children})=>{\r\n        const SCAN = useSelector(state => state.SCANSTATE );\r\n\r\n    useMemo(()=>{  },[SCAN]) \r\n\r\n    return(\r\n            <Context_SCAN_FULL.Provider value={SCAN}>\r\n                {children}            \r\n            </Context_SCAN_FULL.Provider>     \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js",["769"],"import React  from 'react';\r\nimport {\r\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n} from 'recharts';\r\n\r\n/*\r\nexample\r\nconst data = [\r\n  {\r\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n  },\r\n];\r\n*/\r\n\r\nconst SimpleBarChart = (props)=>{\r\n\r\n    const {Data} = props\r\n    return (\r\n      <div style={{ width: '100%', height: 400 }}>\r\n      <ResponsiveContainer>\r\n          <BarChart\r\n            width={600}\r\n            height={400}\r\n            data={Data}\r\n            margin={{\r\n              top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Bar dataKey=\"value\" fill=\"#ffbf00\" />\r\n          \r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default SimpleBarChart;\r\n",["770","771"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js",["772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794"],"import store from \"../store/index\"\r\n//import axios from 'axios';\r\nimport {find, findIndex} from 'lodash'; \r\n\r\n\r\n/* **************************************************************************** */\r\n/*  Aux Functions */\r\n/* **************************************************************************** */\r\nconst GroupArray =(arr) =>{\r\n    var a = [],b = [],prev;\r\n    arr.sort();\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] !== prev) {\r\n        a.push(arr[i]);\r\n        b.push(1);\r\n      } else {\r\n        b[b.length - 1]++;\r\n      }\r\n      prev = arr[i];\r\n    }\r\n    return [a, b];\r\n  }\r\n\r\n\r\n  const FindMultiplier=(int)=>{\r\n    const RM = store.getState().STRAPI.ratioModel\r\n    let Multiplier = find(RM, function(o) { return (o.Min <= int && o.max >= int) });\r\n    return Multiplier.multiplier\r\n  }\r\n\r\n\r\n  const FindInterior = (outer, inner)=>{\r\n    inner.map((cluster,i)=>{\r\n      let Inside = false\r\n      if(\r\n          cluster.GroupedBoxBoundaryLimits[0] > outer[0]\r\n        && cluster.GroupedBoxBoundaryLimits[1] < outer[1]\r\n        && cluster.GroupedBoxBoundaryLimits[2] > outer[2]\r\n        && cluster.GroupedBoxBoundaryLimits[3] < outer[3]\r\n      )\r\n      { Inside = true}\r\n      console.log(outer, cluster.GroupedBoxBoundaryLimits)\r\n        console.log(Inside)\r\n    })\r\n  }\r\n\r\n   export const findTradeTypeName = (id)=>{\r\n    \r\n    const TRADETYPE = store.getState().STRAPI.tradeType;\r\n    \r\n    let FoundType = find(TRADETYPE, function(o) { return o.id === id; })\r\n    return FoundType.name\r\n}\r\n\r\n\r\n  export const findClientName=(id)=>{\r\n    const Clients = store.getState().STRAPI.UserData.Customers;\r\n    let FoundClient = find(Clients, function(o) { return o.id === id; });\r\n\r\n    if(FoundClient !== undefined)\r\n      return FoundClient.name \r\n  \r\n    return false\r\n   }\r\n\r\n    const ResourcesRequired = (TradesUsed)=>{\r\n      //console.log(TradesUsed);\r\n      \r\n    }\r\n\r\n    const ChartGroupArrayData = (Compressed)=>{\r\n    let CompressedForPie=[]\r\n    Compressed[0].map((jt,i)=>{ CompressedForPie.push({ name: jt , value: Compressed[1][i] }) })\r\n    return (CompressedForPie);\r\n    }\r\n\r\n/* End Aux Functions **************************************************************************** */\r\n\r\n\r\n/* **************************************************************************** */\r\n/* Worker Functions  */\r\n/* **************************************************************************** */\r\n\r\n\r\n\r\nconst findTradeParent = (trade)=>{\r\n  const TRADETYPEALLOCATION = store.getState().STRAPI.UserData.tradetypes;\r\n\r\n  let FoundType = find(TRADETYPEALLOCATION, function(o) { return o.id === trade; })\r\n  if(FoundType === undefined){\r\n    //console.log(trade)\r\n    return 'undefined'\r\n  }else{\r\n   // console.log(trade, FoundType.trade_allocation_ratio.Name)\r\n    return FoundType.trade_allocation_ratio.Name;\r\n  }\r\n \r\n}\r\n\r\n// Find Allocation of trade type across cluster\r\n\r\n   export const FindTradeTypeAllocation = (data)=>{\r\n     let TotalChildTradesTradearr=[]\r\n     let ParentTradeName=[]\r\n      data.map((site,i)=>{\r\n          site.sites.map((count,i)=>{\r\n            let TradesJson = JSON.parse(count.count[0].TradeTypes);\r\n            TotalChildTradesTradearr=  [...TotalChildTradesTradearr, ...TradesJson]\r\n          })\r\n      })\r\n\r\n      TotalChildTradesTradearr.map((childTrades, i )=>{\r\n        ParentTradeName.push(findTradeParent(childTrades))\r\n      })\r\n      \r\n      return GroupArray(ParentTradeName)\r\n    }\r\n\r\n\r\nexport const SitesbyTier = (data)=>{\r\n    let tiers=[]\r\n    data.map((item,index)=>{\r\n        let ii=0\r\n       \r\n        while(ii<item.sites.length){\r\n           tiers.push(item.scanCategory)\r\n            ii++\r\n        }\r\n      \r\n      \r\n    })\r\n\r\n    console.log(GroupArray(tiers))\r\n    return GroupArray(tiers)\r\n}\r\n\r\n// Return the Total workordercount for a cluster\r\n    export const SumWorkOrderTotal = (sites)=>{\r\n        let total=[]\r\n          sites.map((item,i)=>{\r\n              if (!isNaN(item.SumWorkOrder))\r\n                total.push(item.SumWorkOrder)\r\n          })\r\n          return total.reduce((a, b) => a + b, 0)\r\n      }\r\n\r\n\r\n\r\n\r\nconst Removeinteriors = (Results)=>{\r\n  console.log(Results)\r\n  Results.map((results)=>{\r\n      FindInterior(results.GroupedBoxBoundaryLimits, Results)\r\n  })\r\n}\r\n\r\nconst ClusterCost=(ClusterAssetBreakdown)=>{\r\n    const TRADETYPE = store.getState().STRAPI.tradeType;\r\n    let ClusterCost=[]\r\n    ClusterAssetBreakdown[0].map((id,i)=>{\r\n        let Cost;\r\n        let TT = find(TRADETYPE, function(o) { return o.id === id; });\r\n        if(TT.cpj != undefined){\r\n                //console.log(TT.cpj, id, ClusterAssetBreakdown[1][i], FindMultiplier(ClusterAssetBreakdown[1][i]))\r\n               Cost = (ClusterAssetBreakdown[1][i]* TT.cpj)*FindMultiplier(ClusterAssetBreakdown[1][i])\r\n               ClusterCost.push([findTradeTypeName(id), parseFloat(Cost.toFixed(2))])\r\n        }else{\r\n            console.log(`${findTradeTypeName(id)} is missing a CPJ marker`)\r\n        }\r\n    })\r\n    return ClusterCost\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  const JobTypes =(JOBTYPES,result)=>{\r\n     \r\n       //console.log(JOBTYPES,result)\r\n\r\n        // JOb Type\r\n        let PUSHJobTypeName=[]\r\n        let PUSHJobTypeID=[]\r\n        let PUSHJobTypeWorkOrderCount=[]\r\n        let PUSHTradeType=[]\r\n        let PUSHSplitTradeTypeCount=[]\r\n        let PUSHTradeInt=[]\r\n        let PUSHWorkOrdersTrueNumber=[]\r\n        let WorkOrderValue;\r\n\r\n        result.Sites.map((site,i)=>{\r\n\r\n            //console.log(site)\r\n            // Breakdown Jobtypes\r\n            JOBTYPES.map((jobtype,i)=>{\r\n\r\n                //console.log(find(jobtype.work_orders, function(o) { return o.site === site.id; }))\r\n                let FindWorkOrder = find(jobtype.work_orders, function(o) { return o.site === site.id; })\r\n                if(FindWorkOrder!== undefined){\r\n                    \r\n                    // Store JT name\r\n                    PUSHJobTypeName.push(jobtype.name);\r\n                    PUSHJobTypeID.push(jobtype.id)\r\n\r\n                    //console.log(FindWorkOrder)\r\n                    //console.log(jobtype);\r\n                    \r\n                    PUSHWorkOrdersTrueNumber.push(FindWorkOrder.count)\r\n                    PUSHTradeType.push(findTradeTypeName(FindWorkOrder.trade_type))\r\n                    PUSHTradeInt.push(FindWorkOrder.trade_type)\r\n                   \r\n                    let Index = findIndex(PUSHSplitTradeTypeCount, function(o) { return o.id == FindWorkOrder.trade_type; });\r\n          \r\n                    if(Index != -1){\r\n                          PUSHSplitTradeTypeCount[Index].count = PUSHSplitTradeTypeCount[Index].count + FindWorkOrder.count\r\n                    }else{\r\n                      PUSHSplitTradeTypeCount.push({id:FindWorkOrder.trade_type, count:FindWorkOrder.count, name:findTradeTypeName(FindWorkOrder.trade_type)})\r\n                    }\r\n                    \r\n                    \r\n                     // I DONT THINK THIS IS CORRECT\r\n                    WorkOrderValue = PUSHWorkOrdersTrueNumber.reduce((a, b) => a + b, 0)\r\n                    console.log(\"PUSHWorkOrdersTrueNumber\", PUSHWorkOrdersTrueNumber)\r\n                    let IndexThis = findIndex(PUSHJobTypeWorkOrderCount, function(o) { return o.name === jobtype.name; })\r\n                    \r\n                    if(IndexThis === -1){ \r\n                        PUSHJobTypeWorkOrderCount.push({name:jobtype.name, value:WorkOrderValue})\r\n                    }\r\n                    else{\r\n                        PUSHJobTypeWorkOrderCount.splice(IndexThis, 1, {name:jobtype.name, value: (PUSHJobTypeWorkOrderCount[IndexThis].value+WorkOrderValue)});\r\n                    }\r\n                    \r\n                }\r\n            })\r\n           \r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Create Analysis to hand off to Reducer\r\n\r\n        return {\r\n            JobTypeNameARR :GroupArray(PUSHJobTypeName),\r\n            JobTypeIDARR : GroupArray(PUSHJobTypeID),\r\n            TradeTypeARR : GroupArray(PUSHTradeType),\r\n            WorkOrdersTrueNumber:PUSHWorkOrdersTrueNumber.reduce((a, b) => a + b, 0),\r\n            JobTypeWorkOrderCount : PUSHJobTypeWorkOrderCount,\r\n            ClusterCost: ClusterCost(GroupArray(PUSHTradeInt)),\r\n            ResourcesRequired:ResourcesRequired(GroupArray(PUSHTradeType)),\r\n            SplitTradeTypeCount:PUSHSplitTradeTypeCount\r\n        }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const checkResourceCount = (Results)=>{\r\n\r\n    Results.map((cluster,i)=>{\r\n\r\n      console.log(cluster, cluster.SplitTradeTypeCount)\r\n    })\r\n      /*\r\n        minValueDay = 2\r\n        ResourceDay = 0.2\r\n        JobsPerDay = 4.4\r\n        MinRadius = 2000\r\n        WorkDays = 250\r\n      */\r\n\r\n  }\r\n\r\n  /* NEW FUNCTIONS */\r\n\r\n  const ExtractWorkOrderValues = (Results) => {\r\n    // Extracts the True workorder count\r\n      Results.map((result)=>{\r\n        let WorkOrderCount = [], WorkOrderNum=0\r\n          result.Sites.map((site, i)=>{\r\n              WorkOrderNum = WorkOrderNum + site.count[0].WorkOrders\r\n              WorkOrderCount.push(site.count[0].WorkOrders)\r\n          })\r\n          result.WorkOrders = WorkOrderCount.reduce((a, b) => a + b, 0);\r\n      })\r\n      return true;\r\n  }\r\n\r\n\r\n  const ExtractTradeTypes = (Results, STRAPI)=>{\r\n\r\n    //console.log(STRAPI)\r\n    \r\n    Results.map((result)=>{\r\n      let PUSHTradeType=[]\r\n        result.Sites.map((site, i)=>{\r\n          PUSHTradeType = [...PUSHTradeType,...JSON.parse(site.count[0].TradeTypes)]\r\n        })\r\n        result.TradeType = GroupArray(PUSHTradeType)\r\n        //console.log(GroupArray(PUSHTradeType));\r\n    })\r\n   \r\n    return true;\r\n  } \r\n\r\n\r\n\r\n/* **************************************************************************** */\r\n/*  Starter Function  ********************************************************* */\r\n/*                                                                               */\r\n/* **************************************************************************** */\r\n\r\n\r\nexport function ClusterAnalysis(Results){\r\n    const STRAPI = store.getState().STRAPI;\r\n    console.log(\"ClusterAnalysis\", Results);\r\n    \r\n    // Let group some of the Data points into Meta data\r\n    // Group by WO\r\n      ExtractWorkOrderValues(Results)\r\n    // Group by Trade type\r\n      ExtractTradeTypes(Results, STRAPI)\r\n    // Group by Resource Type\r\n      //checkResourceCount(Results)\r\n    \r\n    // Group by Cost\r\n    \r\n    // Group by Asset Type\r\n    // Group by Delivery Model\r\n    // Group by Customers\r\n\r\n\r\n\r\n\r\n    // OK time to filter through the results on Known restrictions\r\n    \r\n     // Run Resource Test Here\r\n    \r\n    // Removeinteriors(Results)\r\n\r\n\r\n    \r\n    // find the job types\r\n    /*\r\n     Results.map((result,i)=>{\r\n        \r\n        let TRADEOBJ = JobTypes(STRAPI.JobType,result);\r\n\r\n        //result.WorkOrdersTrueNumber = TRADEOBJ.WorkOrdersTrueNumber\r\n        result.SplitTradeTypeCount = TRADEOBJ.SplitTradeTypeCount\r\n        result.TradeTypeCount =TRADEOBJ.TradeTypeARR\r\n        result.ClusterCost = TRADEOBJ.ClusterCost\r\n        result.Charts={\r\n            JobTypeID:ChartGroupArrayData(TRADEOBJ.JobTypeIDARR),\r\n            JobTypeName:ChartGroupArrayData(TRADEOBJ.JobTypeNameARR),\r\n            TradeType:ChartGroupArrayData(TRADEOBJ.TradeTypeARR),\r\n            JobTypeSum:ChartGroupArrayData(TRADEOBJ.JobTypeNameARR),\r\n            JobTypeWorkOrderCount:TRADEOBJ.JobTypeWorkOrderCount\r\n        }\r\n    })\r\n\r\n    */\r\n   \r\n    console.log(\"FINAL RESULT \", Results)\r\n    \r\n    //store.dispatch({ type:'STORERESULTS', payload:Results}); \r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js",["795","796"],"\r\nimport React  from 'react'\r\n\r\nexport const LogoMain=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group.png\" />)\r\n}\r\n\r\nexport const LogoMainWhite=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group-white.png\" />)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleMarkerBasedScan.js",["797","798","799","800","801","802","803","804","805","806","807","808","809","810"],"import store from \"../store/index\"\r\nimport { orderBy, findIndex, inRange} from 'lodash'; \r\n\r\n// find the distance in KM from 1 point to another\r\nfunction distancetoPoint(lat1, lon1, lat2, lon2, unit) {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1/180;\r\n        var radlat2 = Math.PI * lat2/180;\r\n        var theta = lon1-lon2;\r\n        var radtheta = Math.PI * theta/180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit==\"K\") { dist = dist * 1.609344 }\r\n        if (unit==\"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\n\r\nexport function ScanSites(){\r\n\r\n    /* ***************************************************************************************** */\r\n    // Arrays and Variable set up\r\n    this.SiteList=null;\r\n    this.SearchThisList=null\r\n    this.GlobalCluster=[]\r\n    this.GlobalCenterpoints=[]\r\n    this.CatchNoLongLat=[]\r\n    this.clusterCount=0\r\n    this.ProcessPointer=0;\r\n\r\n    this.ScanAreas=[\r\n        { name:'SameBuilding',  range: [0,0.2], allocation:0.4, maxAllocation:null, feather:0.1,restrict:[] },\r\n        { name:'CBD',           range: [0,2],   allocation:0.4, maxAllocation:null, feather:10, restrict:[]   },\r\n        { name:'InnerCity',     range: [0,10],  allocation:0.4, maxAllocation:null, feather:5,  restrict:[]   },\r\n        { name:'Metro',         range: [0,50],  allocation:0.4, maxAllocation:1, feather:1 , restrict:[]  },\r\n        { name:'OuterMetro',    range: [0,100], allocation:0.4, maxAllocation:1, feather:0 , restrict:[]  },\r\n        { name:'Regional',      range: [0,200], allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]]  },\r\n        { name:'Remote',        range: [0,500], allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]]  },\r\n        { name:'ExtremeRemote', range: [0,2000],allocation:0.4, maxAllocation:1, feather:0 , restrict:[[7000,7999]] },\r\n    ]\r\n   \r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // AUX Functions\r\n    /* ***************************************************************************************** */\r\n    this.JSONparse = ()=>{\r\n    \r\n        this.SiteList.map((site,i)=>{\r\n            if(typeof site.siteweighting === 'string')\r\n                site.siteweighting = orderBy(JSON.parse(site.siteweighting), ['name'], ['asc', 'desc']); \r\n            else\r\n                site.siteweighting = orderBy(site.siteweighting, ['name'], ['asc', 'desc']);\r\n        })\r\n        this.SiteList = orderBy(this.SiteList, item => item.count[0].WorkOrders, ['desc']);\r\n        this.SearchThisList = JSON.parse(JSON.stringify(this.SiteList));\r\n    }\r\n\r\n\r\n    this.CheckGlobalKeys=(NameKey)=>{\r\n        if(this.GlobalCluster[NameKey] === undefined)\r\n            this.GlobalCluster[NameKey] = []\r\n    }\r\n\r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // Rules\r\n    /* ***************************************************************************************** */\r\n\r\n    this.ArrayState = ()=>{\r\n        if((this.ScanAreas.length-1) === this.ProcessPointer || this.SearchThisList.length  === 0){\r\n            //console.log(\"SCAN COMPLETE\")\r\n            this.Global();\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n    this.PointerState=(int)=>{\r\n        if(int === (this.SearchThisList.length-1) && int > 0){\r\n            //console.log(\"Int and Arr are the Same\")\r\n            this.ProcessPointer = this.ProcessPointer + 1\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n            return true\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n    // Rule : is Site in radius Rule\r\n    this.IsInDistance=(SiteInFocus,site,Range)=>{\r\n        let Distance = distancetoPoint(SiteInFocus.lat, SiteInFocus.long, site.lat,site.long, \"K\")\r\n\r\n        if( Distance === 0 || Distance >= Range.range[0] && Distance <= Range.range[1] || (Distance-((Range.feather/100)*Distance)) <= Range.range[1]) \r\n            return true\r\n        else\r\n            return false\r\n    }\r\n\r\n\r\n    // Rule : Restrict Postcode if in restricted Category\r\n    this.sitePostCodeCheck = (postcode,region, int)=>{\r\n        let Retrict = false\r\n\r\n            region.restrict.map((range,i)=>{ Retrict = inRange(postcode, range[0], range[1])})\r\n        \r\n            if(!Retrict)\r\n                return Retrict;\r\n            else\r\n                this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n                return Retrict;\r\n        \r\n    }\r\n\r\n    // check cluster integity\r\n    this.clusterintegrity =(SiteCluster)=>{\r\n        // check to see if the cluster should be handed over to a quota\r\n        if(SiteCluster.length === 0)\r\n           return false\r\n        else\r\n            return true\r\n    }\r\n\r\n\r\n    // Cluster Rules\r\n\r\n\r\n    this.ClusterQuota = (cluster, int)=>{\r\n        let resourceQuota=[]\r\n        let MaxAllocation = this.ScanAreas[this.ProcessPointer].maxAllocation;\r\n        cluster.map((site,i)=>{\r\n            site.siteweighting.map((weight,ii)=>{  \r\n                \r\n                if(MaxAllocation === null){\r\n                    resourceQuota.push(weight[this.ScanAreas[this.ProcessPointer].name]) \r\n                }else{\r\n                    if(resourceQuota.reduce((a, b) => a + b, 0) < this.ScanAreas[this.ProcessPointer].maxAllocation){\r\n                        resourceQuota.push(weight[this.ScanAreas[this.ProcessPointer].name]) \r\n                    }\r\n                    else{\r\n                        //console.log(\"Max Quota Hit for this cluster in this Category. remove the existing sites\")\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        if(resourceQuota.reduce((a, b) => a + b, 0) >=  this.ScanAreas[this.ProcessPointer].allocation){\r\n           //console.log(\"resourceQuota\", resourceQuota.reduce((a, b) => a + b, 0), this.ScanAreas[this.ProcessPointer].name, this.ScanAreas[this.ProcessPointer].allocation)\r\n            return resourceQuota.reduce((a, b) => a + b, 0)\r\n        }else{\r\n            //console.log(\"Cluster Failed to reach min resources\")\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /* ***************************************************************************************** */\r\n    // Power Functions \r\n    // Start Here\r\n    this.Search=()=>{\r\n        //console.log(\"Begin Marker Search\")\r\n        // 1. OrderSites on site weighting\r\n        this.JSONparse();\r\n        // 2,\r\n        this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n        // 3 Rules\r\n            // Site Rules\r\n            // CLuster Rules\r\n            // State of Search Array\r\n    }\r\n    \r\n\r\n    this.ProcessScan = (Range, int)=>{\r\n\r\n        // Scan Function Variables\r\n        let SiteCluster=[]\r\n        let CenterPoints=[]\r\n        \r\n\r\n        // Scan State Rules\r\n        // If State Complete\r\n        if(this.ArrayState())   \r\n            return true\r\n        // If Pointer exhusted\r\n        if(this.PointerState(int))\r\n            return true\r\n      \r\n        // Data Collection House Keeping\r\n            // check to see if region exists in this.global\r\n            this.CheckGlobalKeys(Range.name);\r\n\r\n\r\n        let SiteInFocus = this.SearchThisList[int];\r\n       \r\n        if(SiteInFocus.combined != null){\r\n            \r\n            // Rule. Check if post code is restricted to the current scan category\r\n            if(this.sitePostCodeCheck(SiteInFocus.postcode.name, Range, int))\r\n                return false\r\n\r\n            // Create an instance of a cluster center point, should cluster exist\r\n            CenterPoints.push({\r\n                name:`${SiteInFocus.region.name}-${Range.name}-${SiteInFocus.name}`,\r\n                center:{ lat: SiteInFocus.lat, lng: SiteInFocus.long },\r\n                range:Range.range[1],\r\n                scanCategory:Range.name,\r\n                feather:Range.feather,\r\n                region:SiteInFocus.region.name,\r\n                postcode:SiteInFocus.postcode.name\r\n            })\r\n\r\n\r\n            this.SearchThisList.map((site,ii)=>{\r\n               \r\n                // 1 rule for sites.\r\n                // Do they fit into the Radius of the center point?\r\n                if(this.IsInDistance(SiteInFocus, site, Range))\r\n                    SiteCluster.push(site)\r\n                else\r\n                    return false\r\n            })\r\n\r\n\r\n        }\r\n        else{\r\n            // CATCH ALL SITES NOT INCLUDED IN SCAN\r\n            let NoLngLat = findIndex(this.CatchNoLongLat, function(o) { return o.name == SiteInFocus.name; });\r\n            if(NoLngLat === -1)\r\n                this.CatchNoLongLat.push(SiteInFocus)\r\n            \r\n            \r\n        }\r\n\r\n        // should i push to Quota or fail this cluster nad move on?\r\n        if(this.clusterintegrity(SiteCluster))\r\n            this.findResourceQuota(SiteCluster, CenterPoints, int);\r\n        else\r\n            this.ProcessScan(this.ScanAreas[this.ProcessPointer], (int+1));\r\n       \r\n    }\r\n\r\n\r\n\r\n    this.findResourceQuota=(cluster, CenterPoints, int)=>{\r\n            //let resourceQuota=[]\r\n\r\n             // is cluster Quote over the current threshold?\r\n             let QuoteThreshold  = this.ClusterQuota(cluster, int) \r\n            \r\n             if(QuoteThreshold)\r\n                {\r\n                \r\n                    CenterPoints[0].resourceQuota = QuoteThreshold;\r\n                    CenterPoints[0].sites = cluster;\r\n                    \r\n                    this.GlobalCluster[this.ScanAreas[this.ProcessPointer].name].push(cluster);\r\n                    this.GlobalCenterpoints.push(CenterPoints[0])\r\n                    \r\n                    this.removeSites(cluster)\r\n             }\r\n\r\n           return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.removeSites=(cluster)=>{\r\n        //console.log(\"Cluster REMOVAL\")\r\n        \r\n        \r\n        let Index;\r\n        cluster.map((site,i)=>{\r\n            //console.log(site);\r\n            Index = findIndex(this.SearchThisList, function(o) { return o.name == site.name; });\r\n            //console.log(\"Index\", Index, site.name)\r\n            this.SearchThisList.splice(Index , 1)\r\n        })\r\n        this.ProcessScan(this.ScanAreas[this.ProcessPointer], 0);\r\n        //console.log(this.GlobalCluster);\r\n        //console.log(this.SearchThisList.length);\r\n        \r\n    }\r\n\r\n    this.Global = ()=>{\r\n\r\n        //console.log(\"this.GlobalCluster\", this.GlobalCluster.length);\r\n        //console.log(\"this.CatchNoLongLat\", this.CatchNoLongLat.length);\r\n        //console.log(\"this.SearchThisList\", this.SearchThisList.length);\r\n\r\n\r\n        store.dispatch({ type:'SCANSTATE', payload:false}); \r\n        store.dispatch({ type:'STOREMARKERRESULTS', payload:this.GlobalCluster});\r\n        store.dispatch({ type:'STOREMARKERCENTERPOINTS', payload:this.GlobalCenterpoints}); \r\n        store.dispatch({ type:'STORERESIDUALMARKERS', payload:this.SearchThisList});\r\n        store.dispatch({ type:'STORENOLONGLAT', payload:this.CatchNoLongLat}); \r\n        \r\n        \r\n        \r\n    }\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleScanProcess.js",["811"],"\r\n// Private Functions\r\nimport store from \"../store/index\"\r\nimport axios from 'axios';\r\nimport {useAPILOCATION} from \"./authUser\"\r\n\r\n\r\n\r\nexport const CreateNewScan = (value)=>{  store.dispatch({ type:'CREATENEWDATASET', payload:value});} \r\n\r\n\r\nexport const SetSelected = (value)=>{\r\n    store.dispatch({ type:'USERDATASETSELECTEDDATABASE', payload:value});\r\n    \r\n}\r\n\r\nexport const StoreSelected_Single =(Data)=>{\r\n\r\n    console.log(Data);\r\n    store.dispatch({ type:'USERSTORESINGLEDATASET', payload:Data});\r\n} \r\n\r\nexport const BacktoScanOptions = ()=>{\r\n        console.log(\"BACK\");\r\n        CreateNewScan(false)\r\n        SetSelected(false)\r\n        StoreSelected_Single([])    \r\n}\r\n\r\nexport const BacktoAddItemsSingle = ()=>{\r\n    console.log(\"BACK to Select\");\r\n    \r\n    SetSelected(false)\r\n   // StoreSelected_Single([]) \r\n}\r\n\r\n\r\nexport const ResetCreateNewModel = ()=>{\r\n\r\n  \r\n    store.dispatch({ type:'CREATENEWDATASET', payload:false})\r\n    store.dispatch({ type:'USERDATASETSELECTEDDATABASE', payload:false})\r\n    store.dispatch({ type:'USERSTORESINGLEDATASET', payload:[]})\r\n    store.dispatch({ type:'USERSCANPROCESSING', payload:false})\r\n}\r\n\r\nexport const FetchSelectedItems = async  (DATA, TITLE, DESCRIPTION, S,E)=>{\r\n\r\n    let IDStr=[];\r\n    DATA.map((customer,i)=>{\r\n            IDStr.push(customer.id)\r\n    })\r\n\r\n    const ENDPOINT=useAPILOCATION()+'sites/scan'\r\n    const JWTToken = store.getState().AUTH.jwt;\r\n    const AuthUSer = store.getState().AUTH.user\r\n    const axiosHeader = {Authorization: \"Bearer \" + JWTToken}\r\n\r\n    \r\n    \r\n\r\n    console.log(\"Items sent to Strapi \", IDStr.length)\r\n    console.log(AuthUSer.id,  TITLE, DESCRIPTION)\r\n    const ScanName=TITLE\r\n    const ScanDescription=DESCRIPTION\r\n    \r\n    \r\n    store.dispatch({ type:'USERSCANPROCESSING', payload:true}); \r\n\r\n    //await axios.get(ENDPOINT+IDStr.toString()) \r\n\r\n   await axios({ url: ENDPOINT+'/'+[S,E].toString()+'/'+ScanName+'/'+ScanDescription+'/'+AuthUSer.id+'/'+IDStr.toString(), method: 'get', headers: axiosHeader})\r\n        .then(function (res) {\r\n            console.log(\"Create Model Return Value from Server\", res.data);\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n        });\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\authUser.js",["812"],"// Private Functions\r\nimport store from \"../store/index\"\r\nimport axios from 'axios';\r\n\r\n\r\n// lazy testing only Fix this!\r\n\r\nexport const useAPILOCATION = () => {\r\n        let APILOCATION;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n                APILOCATION = 'http://localhost:1337/'\r\n        }\r\n        else\r\n        {\r\n                APILOCATION = 'https://intact-analtyiq.herokuapp.com/'\r\n        }        \r\n        \r\n        return APILOCATION\r\n} \r\n\r\n\r\nexport const StrapiAuth = async (u,p)=>{\r\n        store.dispatch({ type:'PROCESSAUTH', payload:true});\r\n   \r\n        await axios.post(useAPILOCATION()+'auth/local', {\r\n        identifier: u,\r\n        password:p,\r\n        }).then((res)=>{\r\n              \r\n                store.dispatch({ type:'PROCESSAUTH', payload:false});\r\n                store.dispatch({ type:'AUTHUSERJWT', payload:res.data.jwt});\r\n                store.dispatch({ type:'AUTHUSER', payload:res.data.user});\r\n\r\n                // TODO\r\n                // for dev only, change this for production\r\n                localStorage.setItem('jwt', res.data.jwt);\r\n                localStorage.setItem('jwtid', res.data.user.id);\r\n\r\n\r\n        }).catch(function (thrown) {\r\n                if (axios.isCancel(thrown)) {\r\n                  console.log('Request canceled', thrown.message);\r\n                } else {\r\n                  // handle error\r\n                  console.log(\"ERROR\");\r\n                  store.dispatch({ type:'PROCESSAUTH', payload:false});\r\n                  store.dispatch({ type:'PROCESSAUTHERROR', payload:true});\r\n                }\r\n        });\r\n}\r\n\r\n\r\nexport const JWT=()=>{\r\n        \r\n        let JWT = localStorage.getItem('jwt');\r\n        let JWTID = localStorage.getItem('jwtid');\r\n      \r\n        if(JWT !== null){\r\n                store.dispatch({ type:'AUTHUSERJWT', payload:JWT});\r\n        }\r\n        if(JWTID !== null){\r\n                store.dispatch({ type:'AUTHUSER', payload:{id:JWTID} });\r\n        }\r\n        \r\n}\r\n\r\n\r\n\r\n/* ************************************************************************* */\r\n// Scan Related functions\r\nexport const FetchPreviousScans = ()=>{\r\n        \r\n        const axiosHeader = {Authorization: \"Bearer \" + store.getState().AUTH.jwt}\r\n        const APIFETCH = useAPILOCATION()+'scan-histories?UserID='+store.getState().AUTH.user.id+'&_sort=createdAt:DESC'\r\n        \r\n        // Tell UI whats going on;\r\n        store.dispatch({ type:'REFRESHSCANHISTORY', payload:true});\r\n        \r\n        // Send API Request\r\n        axios({ url: APIFETCH, method: 'get', headers: axiosHeader})\r\n        .then((result) => { \r\n\r\n                store.dispatch({ type:'AUTHSTORESCANHISTORY', payload:result.data});\r\n                store.dispatch({ type:'REFRESHSCANHISTORY', payload:false});\r\n                }).catch(function (thrown) {\r\n                        store.dispatch({ type:'REFRESHSCANHISTORY', payload:false});\r\n                        if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message);\r\n                        } else { console.log(\"ERROR\", thrown);}\r\n                });\r\n}\r\n\r\n\r\n\r\n\r\nexport const FetchSingleScanResult = (scanID, scan)=>{\r\n\r\n        store.dispatch({ type:'STORESELECTEDUI', payload:{active:false,processing:true,activeID:scanID} }); \r\n\r\n\r\n        console.log(\"scanID\", scanID)\r\n        const AWSURL=' https://intactanalytiq.s3-ap-southeast-2.amazonaws.com/';\r\n       // 6002d5ece940b655642d22df.json\r\n       // headers: axiosHeader\r\n       axios({ url: AWSURL+scanID+'.json', method: 'get'})\r\n        .then((result) => { \r\n        \r\n                //console.log(result.data);\r\n                //result.data.SCANSTATE\r\n                const UICHANGE={active:true,processing:false, activeID:scanID}   \r\n                store.dispatch({ type:'STORESELECTEDMODEL', payload:result.data}); \r\n                store.dispatch({ type:'STORESELECTEDMODELMETA', payload:scan}); \r\n                \r\n                store.dispatch({ type:'STORESELECTEDUI', payload:UICHANGE}); \r\n                //console.log(scan)\r\n                }).catch(function (thrown) {\r\n                        if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message);\r\n                        } else { console.log(\"ERROR\", thrown);}\r\n                });\r\n}\r\n\r\n\r\n\r\n\r\nconst FetchAPI = (Route, TYPE, i=0)=>{\r\n        const APIFETCH =useAPILOCATION()+Route\r\n        const JWTToken = store.getState().AUTH.jwt;\r\n        //console.log(JWTToken)\r\n        const axiosHeader = {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization': \"Bearer \" + JWTToken\r\n       }\r\n      \r\n\r\n\r\n        axios({ url: APIFETCH, method: 'get', headers: axiosHeader})\r\n        .then((result) => { \r\n        \r\n                //console.log(result);\r\n                store.dispatch({ type:TYPE, payload:result.data});\r\n\r\n                }).catch(function (thrown) {\r\n                        if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message);\r\n                        } else { \r\n                                console.log(\"ERROR\", thrown);\r\n                                //console.log(\"i = \", i)\r\n                                if(i<3){\r\n                                        \r\n                                        setTimeout(()=>{ FetchAPI(Route, TYPE, i=i+1) },3000)\r\n                                }\r\n                                else{\r\n                                        store.dispatch({ type:'DATAFETCHFAIL', payload:true}); \r\n                                }\r\n                                \r\n                        }\r\n                });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const FetchDataIntegrity=()=>{\r\n        // list out the items needed to fetch\r\n        // do a look up to see if these items are already in the reducer\r\n        \r\n     \r\n        GetTradeTypes();\r\n        // FOr testing purposes pause this one\r\n        setTimeout(()=>{ GetCustomers(); },3000)\r\n        \r\n       GetTradeAllocations();\r\n        FetchPreviousScans();\r\n}\r\n\r\n\r\nconst GetCustomers=()=>{\r\n        //console.log(\"GetCustomers\")\r\n        if(store.getState().STRAPI.UserData.Customers === false)\r\n                FetchAPI('customers/intact', 'STORECUSTOMERS')        \r\n}\r\n\r\nconst GetSites=()=>{\r\n        //console.log(\"GetSites\")\r\n        if(store.getState().STRAPI.sites === false)\r\n                FetchAPI('sites/intact', 'STORESITES')        \r\n}\r\n\r\nconst GetTradeTypes=()=>{\r\n        //console.log(\"GetTradeTypes\")\r\n        if(store.getState().STRAPI.UserData.tradetypes === false)\r\n                FetchAPI('trade-types/intact', 'STORETRADETYPES')         \r\n}\r\n\r\nconst GetTradeAllocations=()=>{\r\n        //console.log(\"GetTradeAllocations\")\r\n        if(store.getState().STRAPI.UserData.tradeAllocationRatio === false)\r\n                FetchAPI('trade-allocation-ratios', 'STORETRADEALLOCATION')        \r\n}\r\n\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Landing\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\AuthLogin\\index.js",["813"],"import React, { useEffect } from 'react';\r\nimport {useContext_AUTH_FULL} from \"../../../Context/AUTH\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {LogoMain} from \"../../../Assets/logo\"\r\nimport LoginForm from \"../../../venders/MaterialUI/Forms/LoginForm\"\r\n\r\n\r\nconst AuthLogin = ()=>{\r\n\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const Pushhistory = useHistory();\r\n    \r\n \r\n    \r\n    useEffect(()=>{ if(AUTH.jwt !== false){Pushhistory.push(\"/auth\");}},[AUTH])\r\n    return(\r\n        <div className=\"LoginForm\">\r\n             <LogoMain />\r\n            <h1>Intact AnalytiQ</h1>\r\n \r\n            <LoginForm />\r\n           <Disclaimer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthLogin;\r\n\r\n\r\nconst Disclaimer = ()=>{\r\n    return(\r\n          <div className=\"disclaimer\">\r\n              <p>This is a prototype build of Intact Analyiq alpha v0.1 </p>\r\n              <p>Please wait whilst we fire up the Dyno's</p>\r\n          </div>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\index.js",["814","815","816","817","818","819","820","821"],"import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router} from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport {useContext_AUTH_FULL} from \"Context/AUTH\";\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\n\r\n// actions\r\nimport {FetchDataIntegrity} from \"actions/authUser\";\r\n// Components\r\nimport history from  '../../History'\r\nimport DashBoard from \"../../Template/AuthDashboard\"\r\n\r\n// Dataloading\r\nimport {LogoMainWhite} from \"../../Assets/logo\"\r\n\r\n// Routes\r\nimport ComponentLanding from \"./Landing\";\r\nimport ComponentDataDump from \"./DataDump\"\r\nimport ComponentCreateModel from \"./CreateModel\";\r\nimport ComponentViewModels from \"./ViewModels\";\r\nimport CompareComponent from \"./CompareModels\";\r\nimport ComponentScan from \"./ResourceAllocationScan\"\r\nimport UIComponents from \"./UICompnents/index\"\r\n//import ResultsComponent from \"./MarkerBasedScan/MarkerBasedScan\";\r\nimport ResultsComponent from \"./SingleModelResult\";\r\n\r\nconst routes = [\r\n    { Rpath: \"/\", component: ComponentLanding, exact:true},\r\n    { Rpath: \"/view-models\", component: ComponentViewModels, exact:true},\r\n    { Rpath: \"/create-model\", component: ComponentCreateModel, exact:false},\r\n    { Rpath: \"/compare-models\", component: CompareComponent, exact:false},\r\n    { Rpath: \"/MarkerBasedScan\", component: ComponentScan, exact:false},\r\n    { Rpath: \"/integity\", component: ComponentDataDump, exact:false},\r\n    { Rpath: \"/results\", component: ResultsComponent, exact:false},\r\n    { Rpath: \"/UIComponents\", component: UIComponents, exact:false},\r\n  \r\n];\r\n\r\nconst Auth = (props)=>{\r\n\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const Pushhistory = useHistory();\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n\r\n    const [DataStatus, setDataStatus] = useState(true)\r\n\r\n    useEffect(()=>{\r\n        //console.log(AUTH)\r\n        if(AUTH.jwt === false){\r\n            console.log(\"USER DENIED\")\r\n            //Pushhistory.push(\"/demo/login\");\r\n            Pushhistory.push(\"/\");\r\n        }else{ \r\n            console.log(\"USER AUTHED\")\r\n        }\r\n    }, [AUTH])\r\n\r\n\r\n    const checkDataStatus=()=>{\r\n        let DS=true\r\n        Object.keys( STRAPI.UserData).map(function(key, index) { \r\n            if(STRAPI.UserData[key] === false){\r\n                DS = STRAPI.UserData[key] \r\n            }\r\n        });\r\n        setDataStatus(DS)\r\n    }\r\n\r\n    useEffect(()=>{ checkDataStatus() },[STRAPI.UserData])\r\n\r\n    return(\r\n           <>\r\n            { DataStatus ? <AuthRouters {...props} />:<FetchData /> }\r\n           </>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n//   </Switch> \r\n\r\n\r\nconst FetchData=()=>{\r\n\r\n    const [Fetch, setFetch] = useState(null)\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n\r\n    useEffect(()=>{\r\n        if(Fetch === null){\r\n            FetchDataIntegrity()\r\n            setFetch(true)\r\n        }\r\n    },[])\r\n    return( \r\n        <div className=\"DataLoad\">\r\n            <div className=\"LoadThis\">    \r\n                <LoadingCopy />\r\n                <div className=\"loader\">\r\n                <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>\r\n                <LogoMainWhite />\r\n                \r\n                {\r\n                    STRAPI.DataError ? 'There was an Error loading the data. Please try again later':''\r\n                }\r\n              <Disclaimer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoadingCopy=()=>{\r\n    return(\r\n      <div>\r\n           <h1>Intact AnalytiQ</h1>\r\n            <h2>Fetching Data</h2>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const Disclaimer = ()=>{\r\n      return(\r\n            <div className=\"disclaimer\">\r\n                <p>This is a prototype build of Intact Analyiq alpha v0.1 </p>\r\n                <p>Please wait whilst we fire up the Dyno's and fetch your profile</p>\r\n            </div>\r\n      )\r\n  }\r\n\r\n\r\nconst AuthRouters = (props)=>{\r\n\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const Pushhistory = useHistory();\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n\r\n    const [DataStatus, setDataStatus] = useState(true)\r\n\r\n    useEffect(()=>{\r\n        //console.log(AUTH)\r\n        if(AUTH.jwt === false){\r\n            console.log(\"USER DENIED\")\r\n            //Pushhistory.push(\"/demo/login\");\r\n            Pushhistory.push(\"/\");\r\n        }else{ \r\n            console.log(\"USER AUTHED\")\r\n        }\r\n    }, [AUTH])\r\n\r\n    return(\r\n      \r\n        <Router  basename={'/auth/'} >\r\n            <Switch history={history}>\r\n                <DashBoard>\r\n                {\r\n                    routes.map((route, i) => (<Route key={i}  exact={route.exact} path={route.Rpath} render={()=> <route.component {... props}/> }/> ))\r\n                }\r\n                </DashBoard>\r\n                </Switch>\r\n        </Router>\r\n    \r\n)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\About\\about.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Contact\\contact.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\index.js",["822","823","824","825"],"import React from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport PublicLayout from \"../../Template/PublicLayout\";\r\n// Components\r\nimport history from  '../../History'\r\n\r\nimport ComponentAbout from \"./About/about\";\r\nimport ComponentLanding from \"./Landing/index\"\r\nimport ComponentContact from \"./Contact/contact\";\r\nimport ComponentLogin from \"./AuthLogin/index\";\r\nimport ComponentUnAuth from \"./unAuth/UnAuth\";\r\n\r\nconst publicPath='demo'\r\nconst routes = [\r\n    { Rpath: `/${publicPath}/`, component: ComponentLogin, exact:true},\r\n   // { Rpath: `/${publicPath}/about`, component: ComponentAbout, exact:false},\r\n   // { Rpath: `/${publicPath}/contact`, component: ComponentContact, exact:false},\r\n   // { Rpath: `/${publicPath}/login`, component: ComponentLogin, exact:false},\r\n   // { Rpath: `/${publicPath}/unauthorized`, component: ComponentUnAuth, exact:false},\r\n  ];\r\n\r\n\r\nconst Landing = (props)=>{\r\n\r\n    return(\r\n\r\n                <Switch  history={history}>\r\n                    <PublicLayout>\r\n                    {\r\n                        routes.map((route, i) => (<Route key={i}  exact={route.exact} path={route.Rpath} render={()=> <route.component {... props}/> }/> ))\r\n                    }\r\n                    </PublicLayout>\r\n                </Switch> \r\n    )\r\n}\r\n\r\nexport default Landing\r\n\r\n// </Switch>\r\n/**\r\n * *\r\n *  <div className=\"InnerFrame\">\r\n            <h1>Landing Page</h1>\r\n            <h2>Asset Set List</h2>\r\n            <h3>Header 3</h3>\r\n            <p>Paragragh</p>\r\n            <ul>\r\n                <li>List item</li>\r\n                <li>List item</li>\r\n                <li>List item</li>\r\n            </ul>\r\n\r\n        <h2> For Testing </h2>\r\n            <Login />\r\n\r\n        </div>\r\n */","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\unAuth\\UnAuth.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\AUTH.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\AUTH.js",["826"],"import React ,  { createContext, useContext, useMemo }from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*\r\n\r\nReducer State\r\n\r\n\r\n*/\r\n// Create Draft Context for provider\r\n\r\nexport const Context_AUTH_FULL = createContext()\r\n\r\n// Custom Hooks\r\n\r\nexport const useContext_AUTH_FULL = ()=>{\r\n    return useContext(Context_AUTH_FULL)\r\n}\r\n\r\n\r\n \r\nexport const AUTHContextProvider = ({children})=>{\r\n    const AUTH = useSelector(state => state.AUTH );\r\n\r\n    useMemo(()=>{  },[AUTH]) \r\n\r\n    return(\r\n            <Context_AUTH_FULL.Provider value={AUTH}>\r\n                {children}            \r\n            </Context_AUTH_FULL.Provider>     \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\AuthDashboard.js",["827"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport SideBar from \"../Navigation/SideBar\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n   // width: `calc(100% - ${drawerWidth}px)`,\r\n    //marginLeft: drawerWidth,\r\n    zIndex:999\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    backgroundColor:'#ffc20e',\r\n    zIndex:99\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor:'#fff',\r\n    borderRight:'1px solid #ffc20e'\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  content: { \r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function PermanentDrawerRight(props) {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <h1>Intact AnalytiQ </h1>\r\n            <p>Front end Portal</p>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n    \r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <div className={classes.toolbar} />\r\n      \r\n        <SideBar />\r\n       \r\n      </Drawer>\r\n      \r\n      <main className=\"Auth\">  \r\n         <div className={classes.toolbar} />\r\n          <div  className=\"InnerFrame\">\r\n            {props.children}\r\n          </div>\r\n      </main>\r\n\r\n \r\n    </div>\r\n  );\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\PublicLayout.js",["828","829","830"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\n\r\n// Components\r\nimport PublicNavigation from \"./Public/Navigation\"\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n   // width: `calc(100% - ${drawerWidth}px)`,\r\n    //marginLeft: drawerWidth,\r\n    zIndex:999\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    backgroundColor:'#ffc20e',\r\n    zIndex:99\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor:'#ffc20e'\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function PermanentDrawerRight(props) {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <h1>Intact AnalytiQ </h1>\r\n            <p>Front end Portal</p>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n    \r\n    \r\n      \r\n      <main className=\"Public\">  \r\n        <div className={classes.toolbar} />\r\n         \r\n            <div  className=\"InnerFrame\">\r\n                {props.children}\r\n            </div>\r\n\r\n            \r\n      </main>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n//    <PublicNavigation />\r\n\r\n/*\r\n\r\n  <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <div className={classes.toolbar} />\r\n      \r\n      </Drawer>\r\n\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Public\\Navigation.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\input.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\LoginForm.js",["831"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_AUTH_FULL} from \"Context/AUTH\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport {StrapiAuth} from \"actions/authUser\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicTextFields() {\r\n    const AUTH = useContext_AUTH_FULL();\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{},[AUTH])\r\n  return (\r\n        <>\r\n            {\r\n                AUTH.process ? <Processing />:<LoginForm />\r\n            }\r\n        </>\r\n  );\r\n}\r\n\r\n\r\nconst Processing = ()=>{\r\n   \r\n    return(\r\n        <><h3>Authenticating User ...</h3></>\r\n    )\r\n}\r\n\r\nconst Error = ()=>{\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const ErrorTrue='There was an Error in the Username or Password when processing your details'\r\n    const ErrorFalse=''\r\n    useEffect(()=>{},[AUTH])\r\n    return(\r\n        <>{\r\n            AUTH.error ? <h3>{ErrorTrue}</h3>:<h3>{ErrorFalse}</h3>\r\n            }\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nconst LoginForm = ()=>{\r\n    const classes = useStyles();\r\n    const [USERNAME, setUsername] = useState('')\r\n    const [PASSWORD, setPassword] = useState('')\r\n\r\n    const handleClick=()=>{\r\n\r\n        StrapiAuth(USERNAME,PASSWORD)\r\n    }\r\n\r\n    const handleEmail=(e)=>{setUsername(e.target.value)}\r\n    const handlePassword=(e)=>{setPassword(e.target.value)}\r\n\r\n    return(\r\n        <div className=\"LoginContainer\">\r\n            <Error />\r\n            <div className=\"loginInput\">\r\n                <TextField \r\n                    id=\"outlined-basic\" \r\n                    label=\"e-mail\" \r\n                    variant=\"outlined\" \r\n                    onChange={handleEmail}\r\n                />\r\n            </div>\r\n            <div className=\"loginInput\">\r\n                <TextField\r\n                    id=\"standard-password-input\"\r\n                    label=\"password\"\r\n                    type=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    variant=\"outlined\"\r\n                    onChange={handlePassword}\r\n                />\r\n            </div>\r\n            <button className=\"SelectClientBtn\" onClick={()=>{handleClick()}}>Login</button>\r\n                \r\n        </div>\r\n        )\r\n}\r\n\r\n/*\r\n\r\n<TextField id=\"standard-basic\" label=\"Standard\" />\r\n      <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Landing.js",["832"],"import React, { useEffect } from 'react';\r\n\r\nimport Footer from \"./Components/Layout/Footer\";\r\n\r\nconst Profile = ()=>{    \r\n    return(\r\n        <div className=\"AuthLayout\">\r\n        <div className=\"Header\">\r\n            <h1>Profile</h1>\r\n            <h2>User</h2>\r\n        </div>\r\n\r\n        <div className=\"Content\">\r\n            <div>\r\n               <h2>What is a Model</h2>\r\n               <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p>\r\n            </div>\r\n            <div>\r\n                <h2>Viewing saved Models</h2>\r\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p>\r\n            </div>\r\n            <div>\r\n                <h2>Comparing Models</h2>\r\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. </p>\r\n            </div>\r\n            </div>\r\n\r\n            <Footer />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Public\\Loading\\Loading.js",["833","834"],"import React, { useEffect } from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {LogoMainWhite} from \"../../../Assets/logo\"\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nconst Loading=()=>{\r\n    const UX = useContext_UX_FULL();\r\n    const Pushhistory = useHistory();\r\n    useEffect(()=>{\r\n        //console.log(UX)\r\n        if(UX.STRAPIRECEIVED){ Pushhistory.push(\"/demo\");}\r\n    },[UX])\r\n    return(\r\n        <div className=\"App\">\r\n            <div className=\"LoadThis\">\r\n                \r\n                <LoadingCopy />\r\n                <div className=\"loader\">\r\n                <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>\r\n                <LogoMainWhite />\r\n              <Disclaimer />\r\n            </div>\r\n      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n\r\n\r\n\r\nconst LoadingCopy=()=>{\r\n    return(\r\n      <div>\r\n           <h1>Intact AnalytiQ</h1>\r\n            <h2>Fetching Data</h2>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const Disclaimer = ()=>{\r\n      return(\r\n            <div className=\"disclaimer\">\r\n                <p>This is a prototype build of Intact Analyiq alpha v0.1 </p>\r\n                <p>Please wait whilst we fire up the Dyno's</p>\r\n            </div>\r\n      )\r\n  }","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\DataDump.js",["835","836"],"import React, { useEffect, useState } from 'react';\r\n\r\nconst DataDump = ()=>{\r\n    return(\r\n        <>\r\n            Remove THiS\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataDump;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan.js",["837","838","839","840"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_STRAPI_FULL} from \"../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../Context/SCAN\";\r\nimport {ScanSites} from \"../../actions/HandleMarkerBasedScan\";\r\n\r\n// Components\r\nimport ResourceAllocationMap from \"./ResourceAllocationScan/Map\";\r\n\r\nconst RenderScamSites = new ScanSites();\r\n\r\nconst RecourseAllocationScan = ()=>{\r\n\r\n    \r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n\r\n\r\n    const Scan = ()=>{\r\n        //console.log(STRAPI.sites);\r\n        // Pass only fully loaded sites\r\n        let SiteList=[]\r\n        STRAPI.sites.map((site)=>{\r\n                console.log(site.count)\r\n    \r\n                // Add any new rules if required\r\n                if(site.count.length!== 0){\r\n                    SiteList.push(site)\r\n                }\r\n        })\r\n        RenderScamSites.SiteList=SiteList;\r\n        RenderScamSites.Search();\r\n    }\r\n\r\n\r\n    useEffect(()=>{ if(SCAN.active){Scan() }},[SCAN.active])\r\n\r\n    return(\r\n        <>\r\n            {SCAN.MarkerScanResults ?  <ResourceAllocationMap />: false}\r\n        </>\r\n    )\r\n}\r\n//  <ScanBtn />\r\nexport default RecourseAllocationScan;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Map.js",["841","842"],"import React, {useEffect, useState} from 'react'\r\n//import {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\n//import {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {ScanSites} from \"actions/HandleMarkerBasedScan\";\r\nimport { GoogleMap,} from '@react-google-maps/api';\r\n\r\n// Components\r\nimport Markers from \"./MapComponents/LocationMarkers\";\r\nimport ResidualMarkers from \"./MapComponents/ResidualLocationMarkers\";\r\nimport CenterPoints from \"./MapComponents/MarkersCenterpoints\";\r\nimport MarkerBasedResults from \"./MapComponents/MarkerBasedResults\";\r\nimport ColorKey from \"./Results/ColorKey\"\r\n\r\nconst RenderScamSites = new ScanSites();\r\n\r\nconst containerStyle = { height: \"600px\", width: \"auto\" };\r\n\r\n\r\nconst ResourceAllocationMap=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    useEffect(()=>{\r\n        //console.log(SCAN.MarkerScanResults)\r\n    },[SCAN])\r\nreturn(\r\n    <div className=\"ScanMapMain\" id=\"MainMap\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={{\r\n                    lat: -37.813629,\r\n                    lng: 144.963058\r\n                  }}\r\n                zoom={14}\r\n               \r\n            >\r\n            { /* Child components, such as markers, info windows, etc. */ }\r\n            \r\n                <Markers />\r\n                <CenterPoints />\r\n                <ResidualMarkers />\r\n            </GoogleMap>\r\n\r\n            <ColorKey />\r\n            <MarkerBasedResults />\r\n        </div>\r\n)\r\n}\r\n\r\nexport default ResourceAllocationMap;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\ResidualLocationMarkers.js",["843","844","845","846","847","848","849","850","851"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkersALL = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        //console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        \r\n        let StoreMarkers=[]         \r\n                markers.map((site,i)=>{\r\n                    Targeticon = {\r\n                        path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                        fillColor: '#fff',\r\n                        fillOpacity: .9,\r\n                        anchor: new window.google.maps.Point(0,0),\r\n                        strokeWeight: 0,\r\n                        scale: 1,\r\n                        zIndex:10\r\n                    };\r\n                    StoreMarkers.push( \r\n                        \r\n                            <Marker\r\n                                key={i}\r\n                                onLoad={onLoadMarker}\r\n                                title={site.name}\r\n                                label={site.name}\r\n                                icon={Targeticon}\r\n                                onClick={()=>{OnMarkerClick(site.name)}}\r\n                                position={{\r\n                                        lat: parseFloat(site.lat),\r\n                                        lng: parseFloat(site.long)\r\n                                    }}\r\n                            />\r\n                    )\r\n                })\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ \r\n         \r\n          CreateMarkers(SCAN.MarkerScanResidual)},[SCAN.MarkerScanResidual])\r\n\r\n      return(  <>{DisplayMarkers}</>) \r\n\r\n}\r\n\r\nexport default MarkerBasedLocationMarkersALL;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkerBasedResults.js",["852"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport ClusterResults from \"../Results/ClusterResults\";\r\nimport {GroupArrayByOccurances} from \"actions/HandleUX\";\r\n\r\nconst MarkerBasedResults = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n\r\n    const [Results, setResults] = useState(null)\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]])\r\n    const extractResults=()=>{\r\n        //console.log(SCAN.MarkerScanCenterPoints);\r\n\r\n        let ResultArr=[];\r\n        let CategoryInt=[]\r\n            SCAN.MarkerScanCenterPoints.map((result,i)=>{\r\n                ResultArr.push( <li key={i}> <ClusterResults  result={result} i={i}/></li>)\r\n                CategoryInt.push(result.scanCategory)\r\n                return true\r\n            })\r\n            setResults(ResultArr);\r\n            setCategoryOccurance(GroupArrayByOccurances(CategoryInt))\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        if(SCAN.MarkerScanCenterPoints !==null)\r\n            extractResults()\r\n\r\n    },[SCAN]);\r\n\r\n    return(\r\n        <>\r\n            <div className=\"ResultsHeader\">\r\n            <h2>Results</h2>\r\n            <h3>Clusters : <strong>{SCAN.MarkerScanCenterPoints.length}</strong></h3>\r\n            <h4>By Category:</h4>\r\n            <ul className=\"ClustersbyCategory\">\r\n            {\r\n                CategoryOccurance[0].map((cat,i)=>{\r\n                    return(\r\n                        <li key={i}>\r\n                                {cat} : {CategoryOccurance[1][i]}\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n            <h3>Sites were not allocated a Cluster : <strong>{SCAN.MarkerScanResidual.length} </strong></h3>\r\n            <h3>Sites were not included in this scan : <strong>{SCAN.NoLongLat.length} </strong></h3>\r\n            </div>\r\n\r\n            <ul className=\"ListResults\">\r\n                    {Results}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerBasedResults;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\LocationMarkers.js",["853","854","855","856","857","858","859","860","861","862"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\nimport {RegionColor} from \"actions/HandleUX\"\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name, Region)=>{console.log(\"Marker Clicked\", name, Region) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        //console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        let StoreMarkers=[];\r\n\r\n        markers.map((centerPoint,i)=>{\r\n          //console.log(centerPoint.sites)\r\n          centerPoint.sites.map((site,ii)=>{\r\n\r\n              Targeticon = {\r\n                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                fillColor: RegionColor(centerPoint.scanCategory),\r\n                fillOpacity: .9,\r\n                anchor: new window.google.maps.Point(0,0),\r\n                strokeWeight: 0,\r\n                scale: 1\r\n            }; \r\n          \r\n            StoreMarkers.push( \r\n                \r\n                    <Marker\r\n                        key={site.name}\r\n                        onLoad={onLoadMarker}\r\n                        title={site.name}\r\n                        label={site.name}\r\n                        icon={Targeticon}\r\n                        onClick={()=>{OnMarkerClick(site.name, centerPoint.scanCategory)}}\r\n                        position={{\r\n                                lat: parseFloat(site.lat),\r\n                                lng: parseFloat(site.long)\r\n                            }}\r\n                    />\r\n                \r\n            )\r\n            })\r\n        })\r\n        /*\r\n        Object.keys(markers).map((key, value)=>{\r\n            //console.log(markers[key], value)\r\n              markers[key].map((sites,i)=>{\r\n                  sites.map((site,ii)=>{\r\n\r\n                  \r\n                  })\r\n              })\r\n          })*/\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ \r\n        if(CreateMarkers(SCAN.MarkerScanCenterPoints) != undefined)\r\n          CreateMarkers(SCAN.MarkerScanCenterPoints)\r\n      },[SCAN.MarkerScanCenterPoints])\r\n\r\n      return(  <>{DisplayMarkers}</>)\r\n\r\n}\r\n\r\n\r\nexport default MarkerBasedLocationMarkers;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\MapComponents\\MarkersCenterpoints.js",["863","864"],"\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Circle } from '@react-google-maps/api';\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport {RegionColor} from \"../../../../actions/HandleUX\"\r\n\r\n\r\n\r\nconst MarkerCenterpoints = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [Centerpoints, setCenterpoints] = useState(null)\r\n    \r\n    const CreateCenterpoints = ()=>{\r\n        let StorePoints=[]       \r\n        SCAN.MarkerScanCenterPoints.map((center,i)=>{\r\n        \r\n/*\r\n                        {\r\n                            name:site.name,\r\n                            center:{\r\n                                lat: site.lat,\r\n                                lng: site.long\r\n                              },\r\n                            range:Range.range[1]\r\n                        }\r\n            */\r\n           //console.log(center.center, center.range)\r\n           \r\n           \r\n\r\n           let options = {\r\n               strokeColor: RegionColor(center.scanCategory),\r\n               strokeOpacity: 0.9,\r\n               strokeWeight: 1,\r\n               fillColor: RegionColor(center.scanCategory),\r\n               fillOpacity: 0.2,\r\n               radius: ((center.range*1000)),\r\n               zIndex: 1\r\n             }\r\n            let Featheroptions = {\r\n                strokeColor: RegionColor(center.scanCategory),\r\n                strokeOpacity: 0.7,\r\n                strokeWeight: 3,\r\n                fillColor: RegionColor(center.scanCategory),\r\n                fillOpacity: 0.01,\r\n                radius: (( (center.range+((center.feather/100)*center.range)) *1000)),  \r\n                zIndex: 1\r\n              }\r\n           StorePoints.push(\r\n                <span key={i}>\r\n                    <Circle center={center.center} options={options}/>\r\n                    <Circle center={center.center} options={Featheroptions}/>\r\n                </span>\r\n           )\r\n            \r\n        })\r\n        setCenterpoints(StorePoints)\r\n        \r\n    }\r\n    \r\n    \r\n    useEffect(()=>{  CreateCenterpoints() },[SCAN.MarkerScanCenterPoints])\r\n\r\n    useEffect(()=>{},[ Centerpoints])\r\n\r\n    return(\r\n        <>\r\n        {Centerpoints}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerCenterpoints;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ColorKey.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ResourceAllocationScan\\Results\\ClusterResults.js",["865","866","867","868"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport{NumberReducer} from \"../../../../actions/HandleUX\";\r\n\r\n//import DeleteClusterBtn from \"../Controls/buttons/DeleteClusterBtn\";\r\n//import BacktoMap from \"../Controls/buttons/BacktoMapBtn\";\r\n//import ClusterMap from \"../../Prototype/Components/Map/clusterMap/clustermap\"\r\n//import MoreInfo from \"./MoreInfo\";\r\n\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [Multiplier, setMultiplier]= useState(1000)\r\n    const [ClusterTotal, setClusterTotal] = useState(0)\r\n\r\n\r\n    const FindClusterTotal = (result)=>{\r\n        let total=0;\r\n        result.ClusterCost.map((type,i)=>{ total = total + type[1] })\r\n        \r\n        setClusterTotal(NumberReducer(parseFloat((total*Multiplier).toFixed(2))))\r\n    }\r\n\r\n\r\n    useEffect(()=>{ \r\n        //FindClusterTotal(result) \r\n        //console.log(result)\r\n    },[result])\r\n\r\n    return(\r\n        <>\r\n            <h3><LocationCityIcon /> Cluster { (i+1) }  - <strong>{result.scanCategory}</strong></h3>\r\n            <h3>Cluster Resource Quota : <strong>{result.resourceQuota.toFixed(2)}</strong></h3> \r\n            <h3>est Cluster Cost : <strong>${0}</strong></h3>\r\n            <div className=\"ListResultContainer\">\r\n                <div className=\"Title\">\r\n                <h3> {result.name}</h3>\r\n                </div>\r\n                Add Map and Cluster Details once Data dump has been completed\r\n\r\n            </div>\r\n                \r\n               \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClusterResult;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\HistoryRerfresh.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ViewSingleResultBtn.js",["869"],"import React, {useEffect} from 'react';\r\nimport store from \"store/index\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { Link} from \"react-router-dom\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport{FetchSingleScanResult} from \"actions/authUser\"\r\n\r\n\r\n// this button has 3 states\r\n// Falsey .. nothign downloaded ot process\r\n// Active .. there is a active result in memory\r\n// processing .. system is downloading a result\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function IconButtons(props) {\r\n    const {scanID, scan} = props\r\n    const SCAN = useContext_SCAN_FULL();\r\n    useEffect(()=>{},[SCAN])\r\n\r\n    return (\r\n          <>\r\n            {\r\n              SCAN.SelectedModelUI.active ? <ActiveTrue scanID={scanID} scan={scan} />:<ActiveFalse scanID={scanID} scan={scan} />\r\n            }\r\n          </>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst ActiveTrue = (props)=>{\r\n  const {scanID, scan} = props\r\n  const SCAN = useContext_SCAN_FULL();\r\n  useEffect(()=>{\r\n      //console.log(scanID,SCAN.SelectedModelUI.activeID )\r\n  },[])\r\n    return(\r\n      <>\r\n        {\r\n          SCAN.SelectedModelUI.activeID === scanID ? <ViewResult /> : <DownloadResult scanID={scanID} scan={scan}/>\r\n        }\r\n      </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ActiveFalse = (props)=>{\r\n  const {scanID, scan} = props\r\n  const SCAN = useContext_SCAN_FULL();\r\n  useEffect(()=>{\r\n      //console.log(scanID,SCAN.SelectedModelUI.activeID )\r\n  },[])\r\n  return(\r\n    <>\r\n      {\r\n          SCAN.SelectedModelUI.processing  ? <Processing /> : <DownloadResult scanID={scanID} scan={scan}/>\r\n        }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nconst DownloadResult = (props)=>{\r\n  const {scanID, scan} = props\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton aria-label=\"refresh\" onClick={()=>{FetchSingleScanResult(scanID, scan)}}>\r\n        <GetAppIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst ViewResult = (props)=>{\r\n  const {scanID} = props\r\n  const classes = useStyles();\r\n  \r\n  const ClearOldModel=()=>{\r\n    //console.log(\"Clear out old Model\")\r\n    store.dispatch({ type:'MODELREVIEWREADY', payload:false});\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton aria-label=\"refresh\"\r\n        component={Link}\r\n        onClick={ClearOldModel}\r\n        to='/results/locations'\r\n\r\n       >\r\n        <VisibilityIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst Processing = ()=>{\r\n  return(\r\n    <>\r\n        <div className=\"loader\">\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    </>\r\n  )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateSingleScanBtn.js",["870"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CreateNewScan} from \"actions/HandleScanProcess\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ContainedButtons() {\r\n  const classes = useStyles();\r\n\r\n\r\n    const HandleSingle=()=>{ console.log(\"Create Single\", CreateNewScan(0));}\r\n    const HandleCompare=()=>{ console.log(\"Create Single\", CreateNewScan(1));}\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <Button variant=\"contained\" onClick={HandleSingle} className=\"btn-Next\">\r\n            Select Clients \r\n        </Button>\r\n    </div>\r\n  );\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoAddItemsSingleScan.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\BacktoScanType.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\SetSelectedBtn.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\MaterialUI\\Forms\\CreateScanoptions.js",["871","872","873","874"],"import 'date-fns';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useContext_SCAN_FULL} from \"../../../Context/SCAN\";\r\n\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n\r\nimport {FetchSelectedItems} from \"../../../actions/HandleScanProcess\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\n\r\n\r\n/* Handle Scna Form*/\r\nexport default function CreateNewScanForm() {\r\n  return (<ScanForm />);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Processing = ()=>{\r\n   \r\n    return(\r\n        <>\r\n            processing\r\n        </>\r\n    )\r\n}\r\n\r\n/*\r\nconst Error = ()=>{\r\n    const AUTH = useContext_AUTH_FULL();\r\n    const ErrorTrue='There was an Error in the Username or Password when processing your details'\r\n    const ErrorFalse=''\r\n    useEffect(()=>{},[AUTH])\r\n    return(\r\n        <>{\r\n            AUTH.error ? <h3>{ErrorTrue}</h3>:<h3>{ErrorFalse}</h3>\r\n            }\r\n           \r\n        </>\r\n    )\r\n}\r\n*/\r\n\r\n\r\n\r\n\r\nconst ScanForm = ()=>{\r\n    \r\n    const SCAN = useContext_SCAN_FULL();\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n\r\n    const classes = useStyles();\r\n    const [TITLE, setTITLE] = useState('')\r\n    const [DESCRIPTION, setDESCRIPTION] = useState('')\r\n    const[Start, setStart] = useState()\r\n    const[End, setEnd] = useState()\r\n\r\n    const handleClick=()=>{\r\n        FetchSelectedItems(USERSCAN.UserScanSingleDataSets, TITLE, DESCRIPTION, Start, End)\r\n    }\r\n\r\n    const handleTitle=(e)=>{setTITLE(e.target.value)}\r\n    const handleDescription=(e)=>{setDESCRIPTION(e.target.value)}\r\n    const SetStartDate=(START)=>{\r\n        setStart(new Date(`${START}`).getTime() / 1000)\r\n    }\r\n    const SetEndDate=(END)=>{\r\n        setEnd(new Date(`${END}`).getTime() / 1000)\r\n    }\r\n    \r\n    return(\r\n        <div className=\"LoginContainer\">\r\n            {Start}{End}\r\n            <MaterialUIPickers  SetEndDate={SetEndDate} SetStartDate={SetStartDate}/>\r\n\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                label=\"Model Name\" \r\n                variant=\"outlined\" \r\n                onChange={handleTitle}\r\n            />\r\n            \r\n            <TextField\r\n                id=\"outlined-multiline-static\"\r\n                label=\"Model Description\"\r\n                multiline\r\n                rows={6}\r\n                onChange={handleDescription}\r\n                variant=\"outlined\"\r\n                />\r\n\r\n            \r\n            <Button variant=\"contained\" onClick={()=>{handleClick()} } className=\"btn-Confirm\">\r\n                Create Model\r\n            </Button>\r\n                \r\n        </div>\r\n        )\r\n}\r\n\r\n\r\n\r\nfunction MaterialUIPickers(props) {\r\n    const{SetStartDate, SetEndDate} = props\r\n    // The first commit of Material-UI\r\n    const [selectedStartDate, setSelectedStartDate] = React.useState(new Date());\r\n    const [selectedEndDate, setSelectedEndDate] = React.useState(new Date());\r\n  \r\n    const handleDateChange = (date) => {\r\n        setSelectedStartDate(date);\r\n      SetStartDate(date)\r\n     \r\n    };\r\n\r\n    const handleEndDateChange = (date) => {\r\n        setSelectedEndDate(date);\r\n    \r\n        SetEndDate(date)\r\n      };\r\n  \r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            id=\"date-picker-dialog\"\r\n            label=\"Start Date\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={selectedStartDate}\r\n            onChange={handleDateChange}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n          <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            id=\"date-picker-dialog\"\r\n            label=\"End Date\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={selectedEndDate}\r\n            onChange={handleEndDateChange}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n  ","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\CreateNewModel.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectCompare.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\ViewModels.js",["875","876","877","878","879","880"],"import React, { useEffect } from 'react';\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_AUTH_FULL} from \"Context/AUTH\";\r\nimport{FetchPreviousScans} from \"actions/authUser\"\r\n\r\n// Layout\r\nimport {H1, H2, H3,H4, P, S} from \"./Components/Type\";\r\nimport Section from \"./Components/Layout/Section\"\r\n\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\nimport LocationDisabledIcon from '@material-ui/icons/LocationDisabled';\r\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\r\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\n\r\n\r\nimport {HandleTZDate} from \"actions/HandleUX\";\r\nimport ScanHistoryRefreshBtn from \"./Components/buttons/HistoryRerfresh\";\r\nimport ViewSingleResultBtn from \"./Components/buttons/ViewSingleResultBtn\";\r\nimport Footer from \"./Components/Layout/Footer\"\r\n\r\nconst Profile = ()=>{\r\n    const AUTH = useContext_AUTH_FULL();\r\n    return(\r\n        <div className=\"AuthLayout\">\r\n                <div className=\"Header\">\r\n                    <H2 Copy={`View Models`} />\r\n                </div>\r\n\r\n                <div className=\"Content\">\r\n        \r\n                        <div className=\"ControlBar\">\r\n                            {  AUTH.RefreshScanHistory ? <Refreshloading />: <ScanHistoryRefreshBtn /> }\r\n                        </div> \r\n                    \r\n                    <Section>\r\n                        <ModelHistory />\r\n                    </Section>\r\n                \r\n                </div>\r\n            \r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\nconst ModelHistory = ()=>{\r\n    const AUTH = useContext_AUTH_FULL();\r\n\r\n    const HandleDate=(timestamp)=>{\r\n        var a = new Date(timestamp * 1000);\r\n        var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n        var year = a.getFullYear();\r\n        var month = months[a.getMonth()];\r\n        var date = a.getDate();\r\n        var time = date + ' ' + month + ' ' + year;\r\n        return time;\r\n        \r\n    }\r\n    useEffect(()=>{\r\n        //console.log(AUTH.ScanHistory);\r\n    },[AUTH.ScanHistory])\r\n    return(\r\n        <div className=\"ModelHistory\">\r\n            <ul className=\"Card_List\">\r\n                    \r\n\r\n            {\r\n                AUTH.ScanHistory.map((scan,i)=>{\r\n                    //console.log(scan);\r\n                    return(\r\n                        <li key={i} className=\"Card\">\r\n\r\n                             <div className=\"Card_Header\">\r\n                                <div><H2 Copy={scan.Name}/></div>\r\n                                <p><strong>{HandleDate(scan.DateStart)} - {HandleDate(scan.DateEnd) }</strong></p>\r\n                              \r\n                                { scan.ScanState=== 'Complete'? <CTA scan={scan}/>: <ProcessingStatus scan={scan} />  }\r\n                             </div>\r\n                            \r\n\r\n                             <div className=\"Card_Body\">\r\n                               \r\n                                <div className=\"description\">\r\n                                    <P Copy={scan.Description}/>    \r\n                                </div>\r\n\r\n                                <div className=\"ResultStats\">\r\n                                    <ul> \r\n                                        <li><span>{scan.IntClients}</span><PersonPinIcon />Clients</li>\r\n                                        <li><span>{scan.IntCluster}</span><GroupWorkIcon />Clusters</li>\r\n                                        <li><span>{scan.IntSites}</span><LocationCityIcon />Locations</li>\r\n                                        <li><span>{(scan.IntSites-scan.IntLocationsunaccommodated)}</span><LocationSearchingIcon />Inscope</li>\r\n                                        <li><span>{scan.IntLocationsunaccommodated}</span><LocationDisabledIcon />Out of Scope</li>\r\n                            \r\n                                    </ul>\r\n                                </div>\r\n                               \r\n                             </div>\r\n                             <div className=\"Card_Footer\">\r\n                                <CreatedAt scan={scan}/>\r\n                                { scan.ScanState=== 'Complete'? <ProcessingStatus scan={scan} />: false }\r\n                             </div>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Refreshloading=()=>{\r\n    return(\r\n        <div className=\"loader\"><div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>\r\n    )\r\n}\r\n\r\n\r\nconst CreatedAt=(props)=>{\r\n    const {scan} = props\r\n    return(\r\n        <div className=\"ModelDateCreated\">\r\n            <S Copy={`Created : ${HandleTZDate(scan.createdAt)}`}/>                        \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProcessingStatus=(props)=>{\r\n    const {scan} = props\r\n    return(<>\r\n            <div className={`${scan.ScanState} status`}>\r\n                \r\n                {\r\n                    scan.ScanState=== 'Complete' ? `Processing Time ${scan.CreateModel_TimeTaken}`:`ETA: ${scan.CreateModel_RemainingTime} `\r\n                }\r\n                <br />\r\n                {scan.ScanState} \r\n             \r\n            </div>\r\n    </>\r\n        \r\n    )\r\n}\r\n\r\n\r\nconst CTA = (props)=>{\r\n    const {scan} = props\r\n    return(\r\n        <div className=\"cta\">\r\n            <div><ViewSingleResultBtn scanID={scan.id} scan={scan}/></div>\r\n            <div>Delete</div>\r\n        </div>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CompareModels.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\COMPARE.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleCompare.js",["881"],"\r\n// Private Functions\r\nimport store from \"../store/index\"\r\nimport axios from 'axios';\r\n\r\nexport const StoreCompareItem = (scan,i)=>{\r\n    const UserSelected = store.getState().COMPARE.CompareData.UserSelected;\r\n    UserSelected[i] = scan\r\n    console.log(scan,i, UserSelected)\r\n    store.dispatch({ type:'STOREUSERSELECTED', payload:UserSelected});\r\n}\r\n\r\nexport const ConfirmCompare = (bool)=>{\r\n    store.dispatch({ type:'COMPAREPROCESSING', payload:true}); \r\n\r\n    const UserSelected = store.getState().COMPARE.CompareData.UserSelected;\r\n    UserSelected.map((models,i)=>{\r\n        FetchCompareModel(models.id, i, UserSelected.length)\r\n    })\r\n\r\n   \r\n    store.dispatch({ type:'COMPARESTATUS', payload:true}); \r\n}\r\n\r\n\r\nexport const ResetCompare = ()=>{\r\n\r\n    store.dispatch({ type:'COMPARESTATUS', payload:false}); \r\n    store.dispatch({ type:'COMPAREPROCESSING', payload:false}); \r\n    store.dispatch({ type:'STOREUSERSELECTED', payload:[]});\r\n    store.dispatch({ type:'STOREMODELS', payload:[]});\r\n}\r\n\r\n\r\nexport const FetchCompareModel = (scanID, int, total)=>{\r\n\r\n\r\n    console.log(\"scanID\", scanID, int)\r\n    const AWSURL=' https://intactanalytiq.s3-ap-southeast-2.amazonaws.com/';\r\n   // 6002d5ece940b655642d22df.json\r\n   // headers: axiosHeader\r\n   axios({ url: AWSURL+scanID+'.json', method: 'get'})\r\n    .then((result) => { \r\n    \r\n            console.log(result.data);\r\n            //result.data.SCANSTATE\r\n            const FetchedModels = store.getState().COMPARE.CompareData.FetchedModels;\r\n\r\n            \r\n            FetchedModels[int] = result.data\r\n            store.dispatch({ type:'STOREMODELS', payload:FetchedModels}); \r\n\r\n            if(FetchedModels.length === total)\r\n                store.dispatch({ type:'COMPAREPROCESSING', payload:false}); \r\n        \r\n            }).catch(function (thrown) {\r\n                    if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message);\r\n                    } else { console.log(\"ERROR\", thrown);}\r\n            });\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\COMPARE.js",["882"],"import React ,  { createContext, useContext, useMemo }from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*\r\n\r\nReducer State\r\n\r\n\r\n*/\r\n// Create Draft Context for provider\r\n\r\nexport const Context_COMPARE_FULL = createContext()\r\n\r\n// Custom Hooks\r\n\r\nexport const useContext_COMPARE_FULL = ()=>{\r\n    return useContext(Context_COMPARE_FULL)\r\n}\r\n\r\n\r\n \r\nexport const COMPAREContextProvider = ({children})=>{\r\n    const COMPARE = useSelector(state => state.COMPARE );\r\n\r\n    useMemo(()=>{  },[COMPARE]) \r\n\r\n    return(\r\n            <Context_COMPARE_FULL.Provider value={COMPARE}>\r\n                {children}            \r\n            </Context_COMPARE_FULL.Provider>     \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ConfirmCompareBtn.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\SelectModels.js",["883","884","885"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_COMPARE_FULL} from \"Context/COMPARE\";\r\n\r\n\r\nimport SelectCompare from \"../Components/selects/SelectCompare\"\r\nimport ConfirmCompareBtn from \"../Components/buttons/ConfirmCompareBtn\";\r\n\r\n const CompareModels=()=>{\r\n\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    // useContext_COMPARE_FULL\r\n    const [ModelLimit, setLimit] = useState(2)\r\n    const [ModelsSelected, setModelsSelected] = useState(2)\r\n    const [ModelSelects, setModelSelects] = useState([])\r\n\r\n    const CreateSelects = ()=>{\r\n        let i=0\r\n        let temp=[]\r\n        while(i<ModelLimit){\r\n            \r\n            temp.push(<SelectCompare pos={i}/>)\r\n            i++;\r\n        }\r\n        setModelSelects(temp)\r\n    }\r\n    useEffect(()=>{\r\n        CreateSelects()\r\n    },[ModelsSelected])\r\n\r\n    useEffect(()=>{ \r\n        //console.log(COMPARE) \r\n    },[COMPARE])\r\n    return(\r\n        <>\r\n            <div className=\"SectionHeaderWithControls\">\r\n            <h1>Compare Models</h1>\r\n                <div className=\"controls\">\r\n                {ModelSelects }\r\n                    <ConfirmCompareBtn />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div className=\"ComparedSelectedItems\">\r\n\r\n                <ul className=\"ComparableItem\">\r\n                                        <li>Model Name</li>\r\n                                        <li>Clients</li>\r\n                                        <li>Clusters</li>\r\n                                        <li>Sites</li>\r\n                                        <li>Description</li>\r\n                                </ul>   \r\n\r\n\r\n                    {\r\n                        COMPARE.CompareData.UserSelected.map((model,i)=>{\r\n                            return(\r\n                                <ul key={i} className=\"ComparableItem\">\r\n                                        <li>{model.Name}</li>\r\n                                        <li>{model.IntClients}</li>\r\n                                        <li>{model.IntCluster}</li>\r\n                                        <li>{model.IntSites}</li>\r\n                                        \r\n                                        <li>{model.Description}</li>\r\n                                </ul>    \r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompareModels","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareModels.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ResetCompareModels.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableHeader.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableClusters.js",["886","887"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_COMPARE_FULL} from \"../../../../Context/COMPARE\";\r\nimport {numberWithCommas} from \"../../../../actions/HandleUX\";\r\nimport { runInContext } from 'lodash';\r\nconst Title='Clusters';\r\n\r\nconst TableWorkOrders = ()=>{\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    const MODELS = COMPARE.CompareData.FetchedModels;\r\n    const [Values, setValues] = useState([])\r\n   \r\n    useEffect(()=>{},[COMPARE])\r\n\r\n    return(\r\n        <div className=\"ComparisonRow\">\r\n            <div>{Title}</div>\r\n            {Values}\r\n            {\r\n                MODELS.map((model,i)=>{\r\n                    return(\r\n                        <div key={i}> {numberWithCommas(model.CLUSTERSTATS.clusters)} </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default TableWorkOrders;\r\n\r\n\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalWorkOrders.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalLocations.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableLocationsInScope.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableLocationsUnaccomidated.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalWorkOrdersCoveredInCluster.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableWorkorders.js",["888"],"import React, {useEffect} from 'react'\r\n\r\nimport CompareTableTotalWorkOrdersCoveredInCluster from \"./CompareTable/TableTotalWorkOrdersCoveredInCluster\";\r\nimport CompareTableTotalWorkOrders from \"./CompareTable/TableTotalWorkOrders\"\r\nimport WorkorderByClient from \"./CompareTable/TableWorkOrderByClient\";\r\nconst TableSectionWorkorders = ()=>{\r\n    return(\r\n        <>\r\n        \r\n          <div className=\"TableSection\">\r\n            <div className=\"SectionHeader\"><h2>Work Orders</h2></div>\r\n                <CompareTableTotalWorkOrders />\r\n                <WorkorderByClient />\r\n                <CompareTableTotalWorkOrdersCoveredInCluster />\r\n            </div>\r\n        </>\r\n    )\r\n}    \r\n\r\nexport default TableSectionWorkorders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableClusters.js",["889"],"import React, {useEffect} from 'react'\r\n\r\nimport CompareClusters from \"./CompareTable/TableClusters\"\r\nimport ClusterBreakdown from \"./CompareTable/TableClusterBreakDown\";\r\n\r\nconst TableSectionWorkorders = ()=>{\r\n    return(\r\n        <>\r\n            <div className=\"TableSection\">\r\n                <div className=\"SectionHeader\"><h2>Clusters</h2></div>\r\n                <CompareClusters />\r\n                <ClusterBreakdown />\r\n            </div> \r\n        </>\r\n    ) \r\n}   \r\n\r\nexport default TableSectionWorkorders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableLocations.js",["890"],"import React, {useEffect} from 'react'\r\n\r\n    // Locations\r\n    import CompareTableTotalLocations from \"./CompareTable/TableTotalLocations\"\r\n    import CompareTableLocationsInscope from \"./CompareTable/TableLocationsInScope\";\r\n    import CompareTableLocationsUnaccomidated from \"./CompareTable/TableLocationsUnaccomidated\";\r\n    import LocationSitesByTier from \"./CompareTable/TableSitesByTier\";\r\n\r\nconst TableSectionWorkorders = ()=>{\r\n    return(\r\n        <>\r\n          <div className=\"TableSection\">\r\n              <div className=\"SectionHeader\">\r\n                  <h2>Locations</h2>\r\n               </div>\r\n\r\n                    <CompareTableTotalLocations />\r\n                    <CompareTableLocationsInscope />\r\n                    <LocationSitesByTier />\r\n                    <CompareTableLocationsUnaccomidated />\r\n        </div>  \r\n        </>\r\n    )\r\n}   \r\n\r\nexport default TableSectionWorkorders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableResourceAllocation.js",["891"],"import React, {useEffect} from 'react'\r\n\r\n    // Locations\r\n    import TotalResourceAllocation from \"./CompareTable/TableTotalResourceAllocation\"\r\n    import TableResourceAllocationPerResourceTotal from \"./CompareTable/TableResourceAllocationPerResourceTotal\"\r\nconst TableSectionWorkorders = ()=>{\r\n    return(\r\n        <>\r\n          <div className=\"TableSection\">\r\n              <div className=\"SectionHeader\">\r\n                  <h2>Resource Allocations</h2>\r\n               </div>\r\n            <TotalResourceAllocation />\r\n            <TableResourceAllocationPerResourceTotal/>\r\n                   \r\n        </div>  \r\n        </>\r\n    )\r\n}   \r\n\r\nexport default TableSectionWorkorders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTotalResourceAllocation.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableResourceAllocationPerResourceTotal.js",["892"],"import React, {useEffect} from 'react'\r\nimport {useContext_COMPARE_FULL} from \"../../../../Context/COMPARE\";\r\nimport {numberWithCommas} from \"../../../../actions/HandleUX\";\r\n\r\nconst Title='Avg WO Completed per resource';\r\n\r\nconst TableWorkOrders = ()=>{\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    const MODELS = COMPARE.CompareData.FetchedModels;\r\n    \r\n    useEffect(()=>{ },[COMPARE])\r\n\r\n    return(\r\n        <div className=\"ComparisonRow\">\r\n            <div>{Title}</div>\r\n            {\r\n                MODELS.map((model,i)=>{\r\n                    return( \r\n                        <div key={i}> {((model.CLUSTERSTATS.WorkOrdersCoveredInModel/model.CLUSTERSTATS.ResourceAllocation)/250).toFixed(2)} </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableWorkOrders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableClusterBreakDown.js",["893","894","895"],"import React, {useEffect, useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nimport {useContext_COMPARE_FULL} from \"../../../../Context/COMPARE\";\r\nimport {numberWithCommas, GroupArrayByOccurances} from \"../../../../actions/HandleUX\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n  }));\r\n\r\nconst Title='Tier Breakdown';\r\n\r\nconst TableClusterBreakdown = ()=>{\r\n    const classes = useStyles();\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    const MODELS = COMPARE.CompareData.FetchedModels;\r\n    const extractResults=(data)=>{\r\n        let CategoryInt=[]\r\n        data.map((result,i)=>{ CategoryInt.push(result.scanCategory) })\r\n        //console.log(GroupArrayByOccurances(CategoryInt))\r\n            return GroupArrayByOccurances(CategoryInt)\r\n    }\r\n\r\n\r\n    useEffect(()=>{ },[COMPARE])\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Accordion className=\"ComparisonAccordion\">\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    {Title}\r\n                </AccordionSummary>\r\n\r\n                <AccordionDetails className=\"ComparisonRow\">\r\n                    <div>&nbsp;</div>\r\n                        {\r\n                            MODELS.map((model,i)=>{\r\n                                let Breakdown = extractResults(model.STOREMARKERCENTERPOINTS);\r\n                                return(\r\n                                    <div key={i}>\r\n                                        <DisplayBreakdown Breakdown={Breakdown}/>\r\n                                    </div>\r\n                                )\r\n                                    \r\n                            })\r\n                        }\r\n                </AccordionDetails>\r\n\r\n            </Accordion>\r\n            </div>\r\n\r\n      \r\n    )\r\n}\r\n\r\nexport default TableClusterBreakdown;\r\n\r\nconst DisplayBreakdown = (props)=>{\r\n    const {Breakdown} = props\r\n    return(\r\n        Breakdown[0].map((cat,i)=>{\r\n            return(\r\n                <div key={i} className=\"AccordionData\">\r\n                    <div>{cat}</div>\r\n                    <div>{Breakdown[1][i]}</div>\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableWorkOrderByClient.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\TableTradeTypes.js",["896"],"import React, {useEffect} from 'react'\r\n\r\n    // Trade TYpes\r\nimport TradetypeBreakDown from \"./CompareTable/TableTradeTypeBreakdown\";\r\nconst TableSectionTradeTypes = ()=>{\r\n    return(\r\n        <>\r\n          <div className=\"TableSection\">\r\n              <div className=\"SectionHeader\">\r\n                  <h2>Trade Types</h2>\r\n               </div>\r\n          \r\n                   <TradetypeBreakDown />\r\n        </div>  \r\n        </>\r\n    )\r\n}   \r\n\r\nexport default TableSectionTradeTypes;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableTradeTypeBreakdown.js",["897"],"import React, {useEffect} from 'react'\r\nimport {useContext_COMPARE_FULL} from \"../../../../Context/COMPARE\";\r\nimport {numberWithCommas} from \"../../../../actions/HandleUX\";\r\nimport {FindTradeTypeAllocation} from \"../../../../actions/ClusterAnalysis\";\r\nconst Title='Model Trades';\r\n\r\nconst TableWorkOrders = ()=>{\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    const MODELS = COMPARE.CompareData.FetchedModels;\r\n    \r\n    useEffect(()=>{},[COMPARE])\r\n\r\n    return(\r\n        <div className=\"ComparisonRow\">\r\n            <div>{Title}</div>\r\n            {\r\n                        MODELS.map((model,i)=>{\r\n                           let  Breakdown= FindTradeTypeAllocation(model.STOREMARKERCENTERPOINTS)\r\n                            return(\r\n                                <div key={i}>\r\n                                    <DisplayBreakdown Breakdown={Breakdown}/>\r\n                                </div>\r\n                            )\r\n                                \r\n                        })\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableWorkOrders;\r\n\r\nconst DisplayBreakdown = (props)=>{\r\n    const {Breakdown} = props\r\n    return(\r\n        <>\r\n        {\r\n              Breakdown[0].map((cat,i)=>{\r\n                return(\r\n                    <div key={i} className=\"AccordionData\">\r\n                        <div>{cat}</div>\r\n                        <div>{Breakdown[1][i]}</div>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n        </>       \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Compare\\CompareTable\\TableSitesByTier.js",["898","899"],"import React, {useEffect} from 'react'\r\nimport {useContext_COMPARE_FULL} from \"../../../../Context/COMPARE\";\r\n\r\nimport {SitesbyTier} from \"../../../../actions/ClusterAnalysis\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport {numberWithCommas} from \"../../../../actions/HandleUX\";\r\nimport {findClientName} from \"../../../../actions/ClusterAnalysis\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n  }));\r\n\r\nconst Title='Locations allocation by Tier';\r\n\r\nconst WorkordersByClient = ()=>{\r\n    const classes = useStyles();\r\n    const COMPARE = useContext_COMPARE_FULL();\r\n    const MODELS = COMPARE.CompareData.FetchedModels;\r\n\r\n    useEffect(()=>{ },[COMPARE])\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n        <Accordion className=\"ComparisonAccordion\">\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                {Title}\r\n            </AccordionSummary>\r\n\r\n            <AccordionDetails className=\"ComparisonRow\">\r\n                <div>&nbsp;</div>\r\n                   \r\n\r\n                    {\r\n                        MODELS.map((model,i)=>{\r\n                            let Breakdown = SitesbyTier(model.STOREMARKERCENTERPOINTS)\r\n                            return(\r\n                                <div key={i}>\r\n                                    <DisplayBreakdown Breakdown={Breakdown}/>\r\n                                </div>\r\n                            )\r\n                                \r\n                        })\r\n                    }\r\n            </AccordionDetails>\r\n\r\n        </Accordion>\r\n        </div>\r\n    )\r\n} \r\nexport default WorkordersByClient;\r\n\r\n\r\nconst DisplayBreakdown = (props)=>{\r\n    const {Breakdown} = props\r\n    return(\r\n        <>\r\n        {\r\n              Breakdown[0].map((cat,i)=>{\r\n                return(\r\n                    <div key={i} className=\"AccordionData\">\r\n                        <div>{cat}</div>\r\n                        <div>{Breakdown[1][i]}</div>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n        </>        \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult.js",["900","901","902","903","904","905"],"import React from 'react'\r\nimport { Route, Switch,useRouteMatch } from \"react-router-dom\";\r\n\r\n\r\n// Layout \r\nimport AppBar from \"Pages/Auth/SingleModelResult/Layout/AppBar\"\r\nimport HeaderTitles from \"Pages/Auth/SingleModelResult/Layout/HeaderTitle\"\r\n\r\n// Sub Sections \r\n import SubSection_Locations from \"Pages/Auth/SingleModelResult/SubSections/SubSection_Locations\";\r\n import SubSection_Client from \"Pages/Auth/SingleModelResult/SubSections/SubSection_Client\";\r\n import SubSection_FullMap from \"Pages/Auth/SingleModelResult/SubSections/SubSection_FullMap\";\r\n import SubSection_Clusters from \"Pages/Auth/SingleModelResult/SubSections/SubSection_Clusters\";\r\n import SubSection_Trade from \"Pages/Auth/SingleModelResult/SubSections/SubSection_Trade\";\r\n import SubSection_Workorders from \"Pages/Auth/SingleModelResult/SubSections/SubSection_Workorders\";\r\n  \r\n\r\n\r\nconst SingleModelResult = ()=>{ \r\n    let match = useRouteMatch(); \r\n    \r\n    return(\r\n        <>\r\n            <HeaderTitles />\r\n                    <Switch> \r\n                        <Route path={`${match.path}/locations`}>\r\n                            <SubSection_Locations />\r\n                        </Route>\r\n                        \r\n                        <Route path={`${match.path}/trades`}>\r\n                            <SubSection_Trade />\r\n                        </Route>  \r\n                         \r\n                        <Route path={`${match.path}/clients`}>\r\n                            <SubSection_Client />\r\n                        </Route>\r\n\r\n\r\n                        <Route path={`${match.path}/workorders`}>\r\n                            <SubSection_Workorders />\r\n                        </Route>\r\n\r\n                        <Route path={`${match.path}/map`}>\r\n                            <SubSection_FullMap />\r\n                        </Route>\r\n\r\n                        <Route path={`${match.path}/cluster`}>\r\n                            <SubSection_Clusters />\r\n                        </Route>\r\n                         \r\n                    </Switch> \r\n            <AppBar />\r\n        </>\r\n    ) \r\n}\r\n\r\nexport default SingleModelResult; \r\n\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\buttons\\ScanStateBtn.js",["906"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\Footer.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\UICompnents\\index.js",["907"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n// Type\r\nimport {H1, H2, H3,H4, P, S} from \"../Components/Type\";\r\nimport Section from \"../Components/Layout/Section\"\r\nconst UIComponentList = ()=>{\r\n    return(\r\n        <>\r\n        <H1 Copy={`UI COMPONENTS`}/>\r\n            <Section><BasicTypeOptions /></Section>            \r\n            <Section><ColorPallete /></Section>\r\n            <Section><Cards /></Section>\r\n            <Section><Pods /></Section>\r\n            <Section><StatBar /></Section>\r\n            <Section><Buttons /></Section>\r\n            <Section><ControlBar /></Section>\r\n            \r\n\r\n            <Section>\r\n               \r\n             Controls\r\n            charts\r\n            </Section>\r\n           \r\n\r\n\r\n        </> \r\n    )\r\n}\r\n\r\nexport default UIComponentList; \r\n\r\n\r\nconst ControlBar=()=>{\r\n    return(\r\n        <div className=\"ControlBar\">\r\n            Icon\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Buttons=()=>{\r\n    return(\r\n        <>\r\n             <H2 Copy={`Buttons`}/>\r\n             <Button variant=\"contained\" className=\"btn-Back\"> Back </Button>\r\n             <Button variant=\"contained\" className=\"btn-Select\"> Select </Button>\r\n             <Button variant=\"contained\" className=\"btn-Next\"> Next </Button>\r\n             <Button variant=\"contained\" className=\"btn-Confirm\"> Confirm </Button>\r\n             <Button variant=\"contained\" className=\"btn-Create\"> Create </Button>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst StatBar=()=>{\r\n\r\n        return(\r\n            <>\r\n             <H2 Copy={`Stat/Data Bar`}/>\r\n                <ul className=\"Stat_Bar\">\r\n                    <li>Title : Number</li>\r\n                    <li>Title : Number</li>\r\n                    <li>Title : Number</li>\r\n                    <li>Title : Number</li>\r\n                    <li>Title : Number</li>\r\n                    <li>Title : Number</li>\r\n                </ul>\r\n            </>\r\n        )\r\n}\r\n\r\nconst Pods =()=>{\r\n    return(\r\n        <>\r\n            <H2 Copy={`Data Pods`}/>\r\n\r\n            <ul className=\"Pod_List\">\r\n                <li className=\"Pod\">\r\n                    \r\n                    <div className=\"Data\"><P Copy={`Pod Data`}/></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Pod Title`}/></div>\r\n                    <div className=\"Data Strong\"><P Copy={`Secondary  Data`}/></div>\r\n                </li>\r\n                <li className=\"Pod\">\r\n                    <div className=\"Data\"><P Copy={`Pod Data`}/></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Pod Title`}/></div>\r\n                    \r\n                </li>\r\n                <li className=\"Pod\">\r\n                    \r\n                    <div className=\"Data\"><P Copy={`Pod Data`}/></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Pod Title`}/></div>\r\n                    <div className=\"Data Strong\"><P Copy={`Secondary  Data`}/></div>\r\n                </li>\r\n                <li className=\"Pod\">\r\n                    <div className=\"Data\"><P Copy={`Pod Data`}/></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Pod Title`}/></div>\r\n                    \r\n                </li>\r\n            </ul>\r\n        </>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst Cards = ()=>{\r\n    return(\r\n        <>\r\n        <H2 Copy={`Cards`}/>\r\n\r\n        <ul className=\"Card_List\">\r\n            <li className=\"Card\">\r\n                    <div className=\"Card_Header\">\r\n                            <H2 Copy={`Card Header`}/>\r\n                    </div>\r\n                    <div className=\"Card_Body\">\r\n                            <P Copy={`Card Body`}/>\r\n                    </div>\r\n                    <div className=\"Card_Footer\">\r\n                            <H4 Copy={`Card Footer`}/>\r\n                    </div>\r\n            </li>\r\n\r\n            <li className=\"Card\">\r\n                    <div className=\"Card_Header\">\r\n                            <H2 Copy={`Card Header`}/>\r\n                    </div>\r\n                    <div className=\"Card_Body\">\r\n                            <P Copy={`Card Body`}/>\r\n                    </div>\r\n                    <div className=\"Card_Footer\">\r\n                            <H4 Copy={`Card Footer`}/>\r\n                    </div>\r\n            </li>\r\n        </ul>\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ColorPallete=()=>{\r\n    return(\r\n        <>\r\n        <H2 Copy={`Color palettes`}/>\r\n        <H3 Copy={`Baseline Colors`}/>\r\n            <ul className=\"ColorPalette\">\r\n                <li>\r\n                    <span className=\"color1\"></span>\r\n                    <H4 Copy={`Color 1`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"color2\"></span>\r\n                    <H4 Copy={`Color 2`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"color3\"></span>\r\n                    <H4 Copy={`Color 3`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"color4\"></span>\r\n                    <H4 Copy={`Color 4`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"color5\"></span>\r\n                    <H4 Copy={`Color 5`}/>\r\n                </li>\r\n            </ul>\r\n        <H3 Copy={`Accent Colors`}/>\r\n            <ul className=\"ColorPalette\">\r\n                <li>\r\n                    <span className=\"true\"></span>\r\n                    <H4 Copy={`Accent True`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"false\"></span>\r\n                    <H4 Copy={`Accent False`}/>\r\n                </li>\r\n                <li>\r\n                    <span className=\"Link\"></span>\r\n                    <H4 Copy={`Link`}/>\r\n                </li>\r\n               \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst ULList = ()=>{\r\n    return(\r\n        <ul>\r\n            <li>List Item</li>\r\n            <li>List Item</li>\r\n            <li>List Item</li>\r\n            <li>List Item</li>\r\n            <li>List Item</li>\r\n            <li>List Item</li>\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst BasicTypeOptions=()=>{\r\n    return(\r\n        <>\r\n            \r\n            \r\n            <H1 Copy={`Header H1. Font : Roboto`}/>\r\n            <H2 Copy={`Header H2. Font : Roboto`}/>\r\n            <H3 Copy={`Header H3. Font : Roboto`}/>\r\n            <H4 Copy={`Header H4. Font : Roboto`}/>\r\n            \r\n            <P Copy={`Paragraph Font : Montserrat`}/>\r\n            <S Copy={`Small Copy Font : Montserrat`}/>\r\n        </>\r\n    )\r\n}\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Type.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\Section.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Locations.js",["908","909","910","911","912"],"import React  from 'react'\r\n\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1} from \"Pages/Auth/Components/Type\";\r\n\r\n\r\n// components\r\nimport Locations_Basic_Stats from \"../components/Locations_Basic_Stats\"\r\nimport Locations_Basic_Charts from \"../components/Locations_Basic_Charts\";\r\nimport Locations_ByTier from \"../components/Locations_ByTier\";\r\nimport LocationHeatMap from \"../components/Location_Heatmap\";\r\nimport Location_ResourceSpread from \"../components/Location_ResourceSpread\";\r\nimport Location_WorkorderSpread from \"../components/Location_WorkOrderSpread\";\r\nconst SubSection_Locations = ()=>{\r\n\r\n    return(\r\n        <>\r\n            <H1 Copy={`Locations`} /> \r\n            <Section>\r\n            Out of Scope breakdown \r\n                <Locations_Basic_Stats />   \r\n                <Locations_Basic_Charts />\r\n                <Locations_ByTier />\r\n                <LocationHeatMap />\r\n                <Location_ResourceSpread />\r\n                <Location_WorkorderSpread />\r\n              \r\n            </Section> \r\n\r\n        </>\r\n    )\r\n}\r\n\r\n// <Location_CLusterSpreadbyClient />\r\nexport default SubSection_Locations;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\HeaderTitle.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\AppBar.js",["913","914","915"],"import React from 'react';\r\nimport { Link} from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport BlurCircularIcon from '@material-ui/icons/BlurCircular';\r\nimport BuildIcon from '@material-ui/icons/Build';\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\nimport FilterChips from \"./FilterChips\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n  },\r\n}));\r\n\r\n\r\nexport default function BottomAppBar() {\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n    <React.Fragment>\r\n    \r\n      <AppBar position=\"fixed\" className={`ModelSingleResultBottom ${classes.appBar} `}>\r\n            <FilterChips />\r\n            <Toolbar className=\"ModelSingleResultAppBar\">\r\n            \r\n            <IconButton edge=\"end\" color=\"inherit\" component={Link} to={`/results/locations`} >\r\n                <LocationCityIcon />\r\n                <p>locations</p>\r\n            </IconButton>\r\n            <IconButton edge=\"end\" color=\"inherit\" component={Link} to={`/results/trades`} >\r\n                <BuildIcon />\r\n                <p>Resources</p>\r\n            </IconButton>\r\n            \r\n            <IconButton edge=\"end\" color=\"inherit\" component={Link} to={`/results/clients`} >\r\n                <PeopleIcon />\r\n                <p>clients</p>\r\n            </IconButton>\r\n\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\"  component={Link} to={`/results/workorders`} >\r\n                <AssignmentIcon />\r\n                <p>Work Orders</p>\r\n            </IconButton>\r\n\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" component={Link} to={`/results/map`} >\r\n                <MapIcon />\r\n                <p>Map</p>\r\n            </IconButton>\r\n            <IconButton color=\"inherit\" component={Link} to={`/results/cluster`} >\r\n                <BlurCircularIcon />\r\n                <p>Clusters</p>\r\n            </IconButton>\r\n            \r\n         \r\n           \r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_FullMap.js",["916"],"import React  from 'react'\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1} from \"Pages/Auth/Components/Type\";\r\n\r\nimport Map_Full_Main from \"Pages/Auth/SingleModelResult/components/Map_Full_MAin\";\r\nconst SubSection_FullMap = ()=>{\r\n\r\n    return(\r\n        <>\r\n         <H1 Copy={`Model Overview`} />\r\n            <Section>\r\n                <Map_Full_Main />\r\n            </Section>\r\n        </>\r\n    )  \r\n} \r\n\r\nexport default SubSection_FullMap;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Client.js",["917","918"],"import React, { useEffect }  from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1,H4, P} from \"Pages/Auth/Components/Type\";\r\n\r\nimport ClientBasicChart from \"Pages/Auth/SingleModelResult/components/Client_Basic_Differences\";\r\nimport ClientResourceSiteStatsBar from \"Pages/Auth/SingleModelResult/components/Clients_Site_Resource_StatsBar\";\r\nimport ClientWorkordersOverTime from \"Pages/Auth/SingleModelResult/components/Client_WorkordersOverTime\";\r\nimport ClientResourceAllocationOverTime from \"Pages/Auth/SingleModelResult/components/Client_ResourceAllocationOverTime\";\r\n\r\nimport ClientResourceDistribution from \"Pages/Auth/SingleModelResult/components/Client_ResourceDistribution\";\r\n\r\n\r\nconst SubSection_Client = ()=>{\r\n    const UX = useContext_UX_FULL();\r\n    \r\n    return(\r\n        <>\r\n            <H1 Copy={`Clients`} />\r\n            <Section>\r\n         \r\n                <ClientBasicChart />\r\n                <ClientResourceSiteStatsBar />\r\n                <ClientWorkordersOverTime />\r\n                <ClientResourceAllocationOverTime />\r\n            </Section>\r\n            {\r\n                 UX.AreaSelectFilter.ByClient === null ? <SelectAClient /> :<ClientSpecificComponents />\r\n            }\r\n       </>\r\n    )\r\n} \r\n\r\nexport default SubSection_Client;\r\n\r\n\r\nconst SelectAClient=()=>{\r\n    return(\r\n        <Section>\r\n            <H4 Copy={`No Client Selected`}/>\r\n            <P Copy={`To use this Section a Client must be selected from the Filter Above.`} />\r\n        </Section>\r\n    )\r\n}\r\n\r\n\r\nconst ClientSpecificComponents = ()=>{\r\n    return(\r\n        <Section>\r\n             <H4 Copy={`Client Specific Components`}/>\r\n             \r\n\r\n                By Client:\r\n                client distrubution as a $ against cluster type and job type\r\n                <H4 Copy={`Resource distribution `}/>\r\n                    <ClientResourceDistribution />\r\n                    Cluster funnel on Resource distribution by cluster\r\n                    Radial Resource distribution \r\n\r\n               \r\n        </Section>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Clusters.js",["919","920","921","922","923","924"],"import React, { useEffect }  from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1} from \"Pages/Auth/Components/Type\";\r\nimport Clusters_ResultsList from \"Pages/Auth/SingleModelResult/components/Clusters_ResultsList\";\r\n\r\nimport{sumBy, groupBy, chain} from 'lodash'\r\n\r\nconst SubSection_Clusters = ()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const MODEL = useContext_SCAN_FULL()\r\n\r\n    useEffect(()=>{\r\n        console.log(MODEL.SelectedModel.STOREMARKERCENTERPOINTS)\r\n    },[])\r\n    return(\r\n        <>\r\n        <H1 Copy={`Clusters`} />\r\n           <Section>\r\n            \r\n                <Clusters_ResultsList />\r\n           </Section>\r\n       </>\r\n    ) \r\n}\r\n\r\nexport default SubSection_Clusters;  \r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Workorders.js",["925","926","927","928"],"import React  from 'react'\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1,H2, P} from \"Pages/Auth/Components/Type\";\r\n\r\nimport WorkOrders_Basics from \"Pages/Auth/SingleModelResult/components/WorkOrders_Basics\";\r\nimport WorkOrder_Radial_Charts from \"Pages/Auth/SingleModelResult/components/WorkOrder_Radial_Charts\";\r\n\r\nimport WorkordersOverTime from \"Pages/Auth/SingleModelResult/components/WorkOrders_OverTime\";\r\n\r\nconst SubSection_Workorders = ()=>{\r\n\r\n    return(\r\n        <>\r\n         <H1 Copy={`Work Orders`} />\r\n         <Section>\r\n            <WorkOrders_Basics />\r\n            <WorkOrder_Radial_Charts /> \r\n            <WorkordersOverTime />\r\n         </Section>\r\n            \r\n        </>\r\n    ) \r\n}\r\n\r\nexport default SubSection_Workorders;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\SubSections\\SubSection_Trade.js",["929","930","931","932","933","934","935"],"import React  from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H1,H2,H4,P} from \"Pages/Auth/Components/Type\";\r\n\r\nimport Trade_ResourceAllocation from \"Pages/Auth/SingleModelResult/components/Trade_ResourceAllocation\";\r\nimport Trade_Radial_Charts from \"Pages/Auth/SingleModelResult/components/Trade_Radial_Charts\";\r\nimport Trade_Radial_Clients from \"Pages/Auth/SingleModelResult/components/Trade_Radial_Clients\";\r\nimport Trade_ResourceAllocationOverTime from \"Pages/Auth/SingleModelResult/components/Trade_AllocationOverTime\";\r\nimport TradeSpecific_ClientBreakdown from \"Pages/Auth/SingleModelResult/components/Trade_Specific_ClientBreakdown\";\r\nimport TradeSpecific_Overview from \"Pages/Auth/SingleModelResult/components/Trade_Specific_Overview\";\r\nimport Trade_Ratios from \"Pages/Auth/SingleModelResult/components/Trade_Ratios\";\r\nimport TradeHeatMap from  \"Pages/Auth/SingleModelResult/components/Trade_Heatmap\";\r\n\r\n\r\nconst SubSection_Trade = ()=>{\r\n    const UX = useContext_UX_FULL();\r\n    return(\r\n        <>\r\n        <H1 Copy={`Resources`} />\r\n        <Section>\r\n      \r\n           \r\n            stat bar : resource figures\r\n            stat bar resources by client.\r\n            Bar WO spread over resources\r\n            Bar : resources by cluster type\r\n           \r\n        \r\n\r\n            <Trade_ResourceAllocation />\r\n             \r\n            <Trade_Radial_Charts />\r\n            <Trade_Radial_Clients />   \r\n            <TradeHeatMap />\r\n                <Section>\r\n                    <H2 Copy={`Resource Specific Stats`} />\r\n                    <P Copy={`Use the Resource filter to select a Resource Type. The currently selected Resource should show in the bottom corner`}/>\r\n                </Section>\r\n            {\r\n                  UX.AreaSelectFilter.ByResourceType === null ? <SelectATrade /> :<TradeSpecificComponents />\r\n            }\r\n            \r\n        </Section>  \r\n           \r\n       </>\r\n    ) \r\n}\r\n\r\n//  <Trade_Ratios />\r\nexport default SubSection_Trade;\r\n\r\n\r\nconst SelectATrade = ()=>{\r\n    return(\r\n        <Section>\r\n            <H4 Copy={`No Resource Type Selected`}/>\r\n            <P Copy={`To use this Section a Resource Type must be selected from the Filter Above.`} />\r\n        </Section>\r\n    )\r\n}\r\n\r\nconst TradeSpecificComponents=()=>{\r\n    return(\r\n        <Section>\r\n                <TradeSpecific_Overview />\r\n                <TradeSpecific_ClientBreakdown />\r\n                <Trade_ResourceAllocationOverTime />\r\n                \r\n                break down stats for each resource Type. i.e. handyman section\r\n           </Section>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_Basic_Stats.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_ByTier.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Locations_Basic_Charts.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_Basics.js",["936","937","938"],"import React from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {numberWithCommas} from \"actions/HandleUX\";\r\n\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H4,H3, P} from \"Pages/Auth/Components/Type\";\r\n\r\n\r\nconst HeaderTotalWorkOrder = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const Model = SCAN.SelectedModel;\r\n    \r\n    const TotalWorkOrders=(Data)=>{\r\n        let TotalWOs=[]\r\n        Data.map((site,i)=>{\r\n            if(site.SumWorkOrder !== undefined) \r\n                TotalWOs.push(site.SumWorkOrder)\r\n        })\r\n        return TotalWOs.reduce((a, b) => a + b, 0)\r\n    } \r\n\r\n    const WOsCoveredInModel = ()=>{ \r\n        let ModelTotal=[];\r\n            Model.STOREMARKERCENTERPOINTS.map((site)=>{\r\n                ModelTotal.push(TotalWorkOrders(site.sites))\r\n            })\r\n        return ModelTotal.reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    return(\r\n        <> \r\n        <H3 Copy={`Breakdown`} />\r\n   \r\n                <ul className=\"Pod_List\">\r\n                    <li className=\"Pod\">\r\n                        <div className=\"Data\"><P Copy= {numberWithCommas(TotalWorkOrders(Model.USERSELECTEDLIST))}/></div>\r\n                        <div className=\"Title\"> <H4 Copy={`Clients Total Work Orders`}/></div>\r\n                    </li>\r\n                    \r\n                    <li className=\"Pod\">\r\n                       \r\n                        <div className=\"Data\"><P Copy={numberWithCommas(WOsCoveredInModel())} /></div>\r\n                        <div className=\"Title\"> <H4 Copy={`Work Orders Covered in model`}/></div>\r\n                        <div className=\"Data Strong\"><P Copy={`${((WOsCoveredInModel()/TotalWorkOrders(Model.USERSELECTEDLIST))*100).toFixed(2)}%`} />\r\n                    </div>\r\n                    </li>\r\n                  \r\n                </ul>\r\n       \r\n        </>\r\n    )\r\n}\r\nexport default HeaderTotalWorkOrder;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_Basic_Charts.js",["939","940","941","942","943","944"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clients_Names.js",["945","946","947"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {findClientName} from \"actions/ClusterAnalysis\";\r\n\r\n\r\nconst ClusterByClientName = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [byClient, setByClient] = useState([])\r\n    const Model = SCAN.SelectedModel;\r\n    const ByClient=()=>{\r\n        let client=[];\r\n        let SumByClient\r\n        Model.STOREMARKERCENTERPOINTS.map((sites,i)=>{\r\n            sites.sites.map((site,i)=>{\r\n                client.push({\r\n                    sum:site.SumWorkOrder,\r\n                    client:site.customers[0]\r\n                })\r\n            })\r\n        })\r\n      \r\n        SumByClient = client.reduce(function (r, o) { (r[o.client])? r[o.client] += o.sum : r[o.client] = o.sum; return r; }, {});\r\n\r\n        setByClient(SumByClient)\r\n    }\r\n\r\n    useEffect(()=>{ByClient()},[SCAN])\r\n\r\n    return(\r\n        <>\r\n            <ul className=\"Stat_Bar Column\">\r\n            {\r\n                Object.keys(byClient).map(function(key, i) {\r\n                    return(\r\n                        <li key={i}>\r\n                            <div>\r\n                                <div>{findClientName(key)}</div>\r\n                                <div>{byClient[key]} </div>\r\n                            </div>\r\n                        </li>\r\n                        )\r\n                    })        \r\n            }\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClusterByClientName;",["948","949"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_ResourceAllocation.js",["950"],"import React,{useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport { workingDaysBetweenDates} from \"actions/HandleUX\";\r\n\r\nimport {WOsCoveredInModel, TotalWorkOrders, FindTotalResourceAllocation} from \"actions/CreateSingleViewModel\"\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H4,H3, P} from \"Pages/Auth/Components/Type\";\r\n \r\nconst ResourceAllocationRatios = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const Model = SCAN.SelectedModel;\r\n    const [WorkingDays, setWorkingDays] = useState(0)\r\n   \r\n    useEffect(()=>{\r\n        console.log(SCAN.SelectedModel)\r\n        setWorkingDays(workingDaysBetweenDates(SCAN.SelectedModelMeta.DateStart,SCAN.SelectedModelMeta.DateEnd))\r\n    },[])\r\n   \r\n    return(\r\n        <> \r\n        <H3 Copy={`Model Resource Allocations`} />\r\n        <Section>\r\n            <ul className=\"Pod_List\">\r\n                <li className=\"Pod\">\r\n                    <div className=\"Data\"><P Copy= {FindTotalResourceAllocation().toFixed(2)}/></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Resource Allocation`}/></div>\r\n                </li> \r\n                <li className=\"Pod\">\r\n                    <div className=\"Data\"><P Copy={(FindTotalResourceAllocation()/WorkingDays).toFixed(2)} /></div>\r\n                    <div className=\"Data\">{WOsCoveredInModel()}<P Copy={(WOsCoveredInModel()/WorkingDays)/FindTotalResourceAllocation()} /></div>\r\n                    <div className=\"Title\"> <H4 Copy={`Avg WO Completed per resource`}/></div>\r\n                    <div className=\"Data Strong\"><P Copy={`${((WOsCoveredInModel()/TotalWorkOrders(Model.USERSELECTEDLIST))*100).toFixed(2)}%`} />\r\n                </div>\r\n                </li>\r\n            </ul>\r\n        </Section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResourceAllocationRatios;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Ratios.js",["951","952","953","954","955"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {FindTradeTypeAllocation} from \"actions/ClusterAnalysis\";\r\n\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H4,H2, P} from \"Pages/Auth/Components/Type\";\r\n \r\nconst ByTradeRatio = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const Model = SCAN.SelectedModel;\r\n    \r\n    const [TradeAllocationTotal, setTradeAllocationTotal] = useState(0)\r\n    const [TradeAllocation,setTradeAllocation] = useState([[],[]])\r\n    \r\n    const TradeWoRatioForDemo=(num)=>{\r\n        return ((num/TradeAllocationTotal)*100).toFixed(2)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let TWV=0\r\n        FindTradeTypeAllocation(Model.STOREMARKERCENTERPOINTS)[1].map((value,i)=>{TWV= TWV+value})\r\n        setTradeAllocationTotal(TWV)\r\n    },[])\r\n    \r\n    return(\r\n        <>\r\n        <H2 Copy={`Workorders by Trade Type`} />\r\n        <Section>\r\n            <ul className=\"Stat_Bar\">\r\n                {\r\n                    TradeAllocation[0].map((trade,i)=>{\r\n                        return(\r\n                            <li key={i}>\r\n                                <span>{TradeWoRatioForDemo(TradeAllocation[1][i])}%</span>\r\n                                {trade} \r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </Section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByTradeRatio;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\OLD_ResultHeader.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Map_Full_MAin.js",["956"],"import React from 'react'\r\n\r\n// Components\r\nimport Map_SingleModelReview_FULLModel from \"Pages/Auth/Components/Maps/Map_SingleModelReview_FULLModel\"\r\nimport MapColorKey from \"Pages/Auth/Components/Maps/MapColorKey\"\r\nimport MainMapFilters from \"Pages/Auth/Components/Maps/MapMainFilter\";\r\n\r\nconst ResultMap = ()=>{\r\n    return(\r\n        <>\r\n  \r\n            <div className=\"ScanMapMain\" id=\"MainMap\">\r\n                <MainMapFilters />\r\n                <MapColorKey />\r\n                <Map_SingleModelReview_FULLModel />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResultMap; ","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Map_SingleModelReview_FULLModel.js",["957"],"import React, { useEffect, useRef } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport { GoogleMap } from '@react-google-maps/api';\r\n\r\n// Components\r\n\r\nimport Markers from \"Pages/Auth/Components/Maps/LocationMarkers\";\r\nimport ResidualMarkers from \"Pages/Auth/Components/Maps/ResidualLocationMarkers\";\r\n//import CenterPoints from \"Pages/Auth/Components/Maps/MarkersCenterpoints\";\r\n//import MarkerBasedResults from \"Pages/Auth/Components/Maps/MarkerBasedResults\";\r\nimport Polygons from \"Pages/Auth/Components/Maps/Polygons\"\r\n\r\nconst containerStyle = { height: \"700px\", width: \"auto\" };\r\nconst Map=()=>{\r\n    const UX = useContext_UX_FULL();\r\n\r\n    useEffect(()=>{\r\n        console.log(UX)\r\n    },[UX])\r\n        return(\r\n                <div className=\"ScanMapMain\" id=\"MainMap\">\r\n                        <GoogleMap \r\n                            mapContainerStyle={containerStyle}\r\n                            center={UX.MapParameters.LatLngBoundaries}\r\n                            zoom={UX.MapParameters.zoom}\r\n                        >\r\n                            { /* Child components, such as markers, info windows, etc. */ }\r\n                            \r\n                            <Markers />\r\n                            <ResidualMarkers />\r\n                            <Polygons />\r\n                        </GoogleMap> \r\n                    </div>\r\n                )\r\n}\r\n\r\n//<CenterPoints />\r\n \r\nexport default Map;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\LocationMarkers.js",["958","959","960","961","962","963","964","965","966","967","968","969","970"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker, MarkerClusterer  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {findIndex} from 'lodash'; \r\nimport {RegionColor} from \"actions/HandleUX\"\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n  const mcOptions = {\r\n    styles: [{\r\n        height: 53,\r\n        url: \"/clusters/m1.png\",\r\n        width: 53, \r\n\r\n      },\r\n      {\r\n        height: 56,\r\n        url: \"/clusters/m2.png\",\r\n        width: 56,\r\n      },\r\n      {\r\n        height: 66,\r\n        url: \"/clusters/m3.png\",    \r\n        width: 66,\r\n      },\r\n      {\r\n        height: 78,\r\n        url: \"/clusters/m4.png\",\r\n        width: 78,\r\n      },\r\n      {\r\n        height: 90,\r\n        url: \"/clusters/m5.png\",\r\n        width: 90,\r\n      }\r\n    ]\r\n  }\r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name, Region)=>{console.log(\"Marker Clicked\", name, Region) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n        console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers,  clusterer)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        let StoreMarkers=[];\r\n\r\n        markers.map((centerPoint,i)=>{\r\n\r\n          //console.log(centerPoint, UX.AreaSelectFilter.ByResourceType)\r\n/* ******************************************************************************** */         \r\n// Map Filters\r\n\r\n// Filter Results by Cluster Type\r\n          if(UX.AreaSelectFilter.ByClusterType !== null)  \r\n            if(centerPoint.scanCategory != UX.AreaSelectFilter.ByClusterType)\r\n              return\r\n// Filter Results by Reource Type \r\n            if(UX.AreaSelectFilter.ByResourceType !== null)  \r\n             if(findIndex(centerPoint.resourceQuota, function(o) { return o.Trade === UX.AreaSelectFilter.ByResourceType}) === -1)\r\n              return\r\n// End Map Filters\r\n/* ******************************************************************************** */  \r\n\r\n          centerPoint.sites.map((site,ii)=>{\r\n\r\n              Targeticon = {\r\n                //path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                path:\"M-24-48h48v48h-48z\",\r\n                fillColor: RegionColor(centerPoint.scanCategory),\r\n                fillOpacity: .9,\r\n                anchor: new window.google.maps.Point(0,0),\r\n                strokeWeight: 0,\r\n                scale: .3\r\n            }; \r\n          \r\n            \r\n            StoreMarkers.push( \r\n                \r\n                    <Marker\r\n                        clusterer={clusterer}\r\n                        key={site.name}\r\n                        onLoad={onLoadMarker}\r\n                        title={site.name}\r\n                        //label={site.name}\r\n                        icon={Targeticon}\r\n                        onClick={()=>{OnMarkerClick(site.name, centerPoint.scanCategory)}}\r\n                        position={{\r\n                                lat: parseFloat(site.lat),\r\n                                lng: parseFloat(site.long)\r\n                            }}\r\n                    />\r\n                \r\n            )\r\n            })\r\n        })\r\n        /*\r\n        Object.keys(markers).map((key, value)=>{\r\n            //console.log(markers[key], value)\r\n              markers[key].map((sites,i)=>{\r\n                  sites.map((site,ii)=>{\r\n\r\n                  \r\n                  })\r\n              })\r\n          })*/\r\n     //   setDisplayMarkers(StoreMarkers);\r\n        return StoreMarkers;\r\n        }\r\n\r\n\r\n \r\n   \r\n\r\n      useEffect(()=>{ \r\n        if(CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS) != undefined)\r\n          CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS)\r\n      },[SCAN.SelectedModel])\r\n\r\n      useEffect(()=>{ },[UX])\r\n      return(  <>\r\n               \r\n                 <MarkerClusterer options={mcOptions} maxZoom={12} minimumClusterSize={30}>\r\n                    {(clusterer) =>\r\n                       CreateMarkers(SCAN.SelectedModel.STOREMARKERCENTERPOINTS, clusterer)\r\n                    }\r\n                  </MarkerClusterer>\r\n                </>\r\n                )\r\n\r\n}\r\n\r\n\r\nexport default MarkerBasedLocationMarkers;\r\n\r\n//  {DisplayMarkers}\r\n/*\r\nlocations.map((location) => (\r\n                        <Marker key={createKey(location)} position={location} clusterer={clusterer} />\r\n                      ))\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ResidualLocationMarkers.js",["971","972","973","974","975","976","977","978","979"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst MarkerBasedLocationMarkersALL = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n   \r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n\r\n       // console.log(\"FindMinMax\", Data)\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        \r\n        let StoreMarkers=[]         \r\n                markers.map((site,i)=>{\r\n                    Targeticon = {\r\n                        //path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                        path:\"M-24-48h48v48h-48z\",\r\n                        fillColor: '#3D3D3D',\r\n                        fillOpacity: 1,\r\n                        anchor: new window.google.maps.Point(0,0),\r\n                        strokeWeight: 0,\r\n                        scale: .2,\r\n                        zIndex:10\r\n                    };\r\n                    StoreMarkers.push( \r\n                        \r\n                            <Marker\r\n                                key={i}\r\n                                onLoad={onLoadMarker}\r\n                                title={site.name}\r\n                                //label={site.name}\r\n                                icon={Targeticon}\r\n                                onClick={()=>{OnMarkerClick(site.name)}}\r\n                                position={{\r\n                                        lat: parseFloat(site.lat),\r\n                                        lng: parseFloat(site.long)\r\n                                    }}\r\n                            />\r\n                    )\r\n                })\r\n        setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{  CreateMarkers(SCAN.SelectedModel.STORERESIDUALMARKERS)},[SCAN.SelectedModel])\r\n\r\n      return(  <>{DisplayMarkers}</>) \r\n\r\n}\r\n\r\nexport default MarkerBasedLocationMarkersALL;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Polygons.js",["980","981","982","983","984","985","986","987"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {RegionColor} from \"actions/HandleUX\"\r\nimport {Polygon} from '@react-google-maps/api';\r\nimport {findIndex} from 'lodash'; \r\n\r\nconst options = {\r\n    fillColor: \"lightblue\",\r\n    fillOpacity: .1,\r\n    strokeColor: \"red\",\r\n    strokeOpacity: 1,\r\n    strokeWeight: 2,\r\n    clickable: false,\r\n    draggable: false,\r\n    editable: false,\r\n    geodesic: false,\r\n    zIndex: 1\r\n  }\r\n\r\n\r\nconst Polygons = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const [DisplayPolygons, setPolygons] = useState([])\r\n\r\n    const CreatePolygons = ()=>{\r\n        let CreatePolyPaths=[]\r\n        SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((centerpoint,i)=>{\r\n\r\n  \r\n            \r\n/* ******************************************************************************** */         \r\n// Map Filters\r\n\r\n        //console.log(centerpoint.scanCategory)\r\n        // Filter Results by Cluster Type    \r\n        if(UX.AreaSelectFilter.ByClusterType !== null)  \r\n            if(centerpoint.scanCategory != UX.AreaSelectFilter.ByClusterType)\r\n                return\r\n\r\n        // Filter Results by Reource Type  \r\n        if(UX.AreaSelectFilter.ByResourceType !== null)  \r\n            if(findIndex(centerpoint.resourceQuota, function(o) { return o.Trade === UX.AreaSelectFilter.ByResourceType}) === -1)\r\n                 return\r\n\r\n// End Map Filters\r\n/* ******************************************************************************** */         \r\n\r\n\r\n                let options = {\r\n                    strokeColor: RegionColor(centerpoint.scanCategory),\r\n                    strokeOpacity: 1,\r\n                    strokeWeight: 1.5,\r\n                    fillColor: RegionColor(centerpoint.scanCategory),\r\n                    fillOpacity: 0.1,\r\n                  \r\n                    zIndex: 1\r\n                  }\r\n\r\n                let PolygonPath=[]\r\n                centerpoint.polygon.map((point,i)=>{\r\n                    //console.log(point)\r\n                    PolygonPath.push({ lat: point[0], lng: point[1]})\r\n                })\r\n                CreatePolyPaths.push(\r\n                    <Polygon paths={PolygonPath} options={options} />\r\n                )\r\n                \r\n        })\r\n\r\n        setPolygons(CreatePolyPaths)\r\n    }\r\n\r\n\r\n\r\n     useEffect(()=>{ CreatePolygons() },[SCAN.SelectedModel])\r\n     useEffect(()=>{},[DisplayPolygons])\r\n     useEffect(()=>{ CreatePolygons() },[UX])\r\n    return(\r\n        <>\r\n            {DisplayPolygons}\r\n        </>\r\n    )\r\n} \r\n\r\nexport default Polygons;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MarkersCenterpoints.js",["988","989"],"\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Circle } from '@react-google-maps/api';\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n\r\nimport {RegionColor} from \"actions/HandleUX\"\r\n\r\n\r\n\r\nconst MarkerCenterpoints = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [Centerpoints, setCenterpoints] = useState(null)\r\n     \r\n    const CreateCenterpoints = ()=>{\r\n        let StorePoints=[]       \r\n        SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((center,i)=>{\r\n        \r\n/*\r\n                        {\r\n                            name:site.name,\r\n                            center:{\r\n                                lat: site.lat,\r\n                                lng: site.long\r\n                              },\r\n                            range:Range.range[1]\r\n                        }\r\n            */\r\n           //console.log(center.center, center.range)\r\n           \r\n           \r\n\r\n           let options = {\r\n               strokeColor: RegionColor(center.scanCategory),\r\n               strokeOpacity: 0.9,\r\n               strokeWeight: 1,\r\n               fillColor: RegionColor(center.scanCategory),\r\n               fillOpacity: 0.2,\r\n               radius: ((center.range*1000)),\r\n               zIndex: 1\r\n             }\r\n            let Featheroptions = {\r\n                strokeColor: RegionColor(center.scanCategory),\r\n                strokeOpacity: 0.7,\r\n                strokeWeight: 3,\r\n                fillColor: RegionColor(center.scanCategory),\r\n                fillOpacity: 0.01,\r\n                radius: (( (center.range+((center.feather/100)*center.range)) *1000)),  \r\n                zIndex: 1\r\n              }\r\n           StorePoints.push(\r\n                <span key={i}>\r\n                    <Circle center={center.center} options={options}/>\r\n                    <Circle center={center.center} options={Featheroptions}/>\r\n                </span>\r\n           )\r\n            \r\n        })\r\n        setCenterpoints(StorePoints)\r\n        \r\n    }\r\n    \r\n    \r\n    useEffect(()=>{  CreateCenterpoints() },[SCAN.SelectedModel])\r\n\r\n    useEffect(()=>{},[ Centerpoints])\r\n\r\n    return(\r\n        <>\r\n            {Centerpoints}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerCenterpoints;",["990","991"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MarkerBasedResults.js",["992"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport ClusterResults from \"Pages/Auth/Components/Maps/ClusterMiniMapResults/ClusterResults\";\r\nimport {GroupArrayByOccurances} from \"actions/HandleUX\";\r\nimport {FindTradeTypeAllocation, findClientName} from \"actions/ClusterAnalysis\";\r\n\r\n\r\nconst MarkerBasedResults = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n\r\n    const CLUSTERSTATS = SCAN.SelectedModel.CLUSTERSTATS;\r\n    \r\n    const [Results, setResults] = useState(null)\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n    const [TradeAllocation,setTradeAllocation] = useState([[],[]])\r\n\r\n\r\n    const extractResults=()=>{\r\n        //console.log(SCAN.SelectedModel.STOREMARKERCENTERPOINTS);\r\n\r\n        let ResultArr=[];\r\n        let CategoryInt=[]\r\n            SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((result,i)=>{\r\n                ResultArr.push( <li key={i}> <ClusterResults  result={result} i={i}/></li>)\r\n                CategoryInt.push(result.scanCategory)\r\n                return true\r\n            })\r\n            setResults(ResultArr);\r\n            setCategoryOccurance(GroupArrayByOccurances(CategoryInt))\r\n    }\r\n\r\n    const gl=(data)=>{\r\n        return data.length\r\n    }\r\n\r\n    useEffect(()=>{ \r\n     \r\n        if(SCAN.SelectedModel.STOREMARKERCENTERPOINTS !==null){\r\n            extractResults()\r\n            setTradeAllocation(FindTradeTypeAllocation(SCAN.SelectedModel.STOREMARKERCENTERPOINTS));\r\n        \r\n        }\r\n            \r\n     \r\n    },[SCAN]);\r\n\r\n    return(\r\n        <>\r\n            <div className=\"ResultsHeader\">\r\n            \r\n            <h2>Model Stats</h2>\r\n\r\n            <h3>Clusters : {CLUSTERSTATS.clusters}</h3>\r\n            <h3>Total Locations {gl(SCAN.SelectedModel.USERSELECTEDLIST)} </h3>\r\n            <h3>Unaccommodated Locations : {CLUSTERSTATS.UnaccommodatedLocations}</h3>\r\n            <h3>Locations Inscope {CLUSTERSTATS.Inscope} ({ ((CLUSTERSTATS.Inscope/gl(SCAN.SelectedModel.USERSELECTEDLIST)*100)).toFixed(2)}%)</h3>\r\n            \r\n            <hr />\r\n\r\n                <h3>Clients Total Work Orders {CLUSTERSTATS.TotalWorkOrders}</h3>\r\n                <h3>Work Orders Covered in model {CLUSTERSTATS.WorkOrdersCoveredInModel} ({((CLUSTERSTATS.WorkOrdersCoveredInModel/CLUSTERSTATS.TotalWorkOrders)*100).toFixed(2)}%)</h3>\r\n            \r\n            <hr />\r\n\r\n\r\n            <h4>Model Work Orders by Client</h4>\r\n            \r\n            <ul className=\"\">\r\n                {\r\n                    Object.keys(CLUSTERSTATS.ByClient).map(function(key, i) {\r\n                        return(\r\n                            <li key={i}>\r\n                                {findClientName(key)} : {CLUSTERSTATS.ByClient[key]} \r\n                            </li>\r\n                            )\r\n                      })        \r\n                }\r\n            </ul>\r\n            <hr />\r\n            <h3>Resource Allocation : {CLUSTERSTATS.ResourceAllocation}</h3>\r\n            <h3>Avg WO Completed per resource: {(CLUSTERSTATS.WorkOrdersCoveredInModel/CLUSTERSTATS.ResourceAllocation).toFixed(2)} ({((CLUSTERSTATS.WorkOrdersCoveredInModel/CLUSTERSTATS.ResourceAllocation)/250).toFixed(2)}) </h3>\r\n         \r\n            <hr />\r\n\r\n            <h4>Trade Overview:</h4>\r\n            <p>These numbers are just instances, not real numbers</p>\r\n            <ul className=\"ClustersbyCategory\">\r\n                {\r\n                    TradeAllocation[0].map((trade,i)=>{\r\n                        return(\r\n                            <li key={i}>\r\n                                {trade} {TradeAllocation[1][i]}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n\r\n            <h4>Cluster by Tiers</h4>\r\n                <ul className=\"ClustersbyCategory\">\r\n                    {\r\n                        CategoryOccurance[0].map((cat,i)=>{\r\n                            return(\r\n                                <li key={i}>\r\n                                        {cat} : {CategoryOccurance[1][i]}\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n           \r\n            </div>\r\n\r\n            <ul className=\"ListResults\">\r\n                    {Results}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MarkerBasedResults;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MapColorKey.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\OLD_ResultMap.js",["993","994"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clusters_ResultsList.js",["995","996"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport ClusterResults from \"Pages/Auth/Components/Maps/ClusterMiniMapResults/ClusterResults\";\r\n\r\n\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {H2} from \"Pages/Auth/Components/Type\";\r\nconst CulsterResults = ()=>{\r\n   \r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [Results, setResults] = useState(null)\r\n\r\n    const extractResults=()=>{\r\n        let ResultArr=[];\r\n            SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((result,i)=>{\r\n                ResultArr.push( <li key={i}> <ClusterResults  result={result} i={i}/></li>)\r\n                return true\r\n            })\r\n            setResults(ResultArr);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        //console.log(SCAN.SelectedModel.STOREMARKERCENTERPOINTS)\r\n        if(SCAN.SelectedModel.STOREMARKERCENTERPOINTS !==null)\r\n            extractResults()\r\n        \r\n    },[SCAN]);\r\n\r\n    return(\r\n        <Section>\r\n            <H2 Copy={`Cluster Breakdown`}/> \r\n            \r\n            \r\n        </Section>\r\n    )\r\n}\r\n\r\nexport default CulsterResults; \r\n\r\n// <ul className=\"ListResults\">{Results}</ul>","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ClusterMiniMapResults\\ClusterResults.js",["997","998","999","1000","1001"],"import React, { useEffect, useState } from 'react'\r\nimport{NumberReducer, RegionColor, GroupArrayByOccurances} from \"actions/HandleUX\";\r\nimport {findClientName, FindTradeTypeAllocation} from \"actions/ClusterAnalysis\";\r\nimport ClusterMiniMap from \"Pages/Auth/Components/Maps/ClusterMiniMapResults/ClusterMiniMap\"\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\n\r\n\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [WorkOrderTotal, setWorkOrderTotal] = useState(0)\r\n   \r\n    const SumWorkorders = (data)=>{\r\n        let total = []\r\n        data.map((site)=>{\r\n            if(!isNaN(site.SumWorkOrder))\r\n                total.push(site.SumWorkOrder)\r\n        })\r\n        setWorkOrderTotal(total.reduce((a, b) => a + b, 0))\r\n    }\r\n\r\n    const SumTradeType = ()=>{\r\n\r\n    }\r\n \r\n    useEffect(()=>{ \r\n        console.log(result)\r\n        //FindClusterTotal(result)\r\n        SumWorkorders(result.sites) \r\n        SumTradeType(result.sites)\r\n        \r\n    },[result])\r\n \r\n    return(\r\n        <>\r\n            \r\n            <div className=\"colorkey\" style={{backgroundColor:RegionColor(result.scanCategory)}}>\r\n             <strong>{result.scanCategory}</strong>\r\n            </div>\r\n          \r\n            <h3><LocationCityIcon /> Cluster { (i+1) }</h3>            \r\n            <ul className=\"ListStats\">\r\n                <li>Sites: <strong>{result.sites.length}</strong></li>\r\n                <li>Total Work Orders: <strong>{WorkOrderTotal}</strong></li>\r\n                <li>Resource Quota : <strong>{result.resourceQuota.toFixed(2)}</strong></li> \r\n               \r\n               <li>\r\n                   Clients\r\n                   <GetClientName clients = {GroupArrayByOccurances(JSON.parse(result.sites[0].count[0].Customers))}/></li>\r\n                <li>\r\n                    Trade Types %\r\n                   <GetTradeName Trades = {FindTradeTypeAllocation([{sites:result.sites}])}/></li>\r\n               \r\n             \r\n            </ul>\r\n            <h4></h4> \r\n           \r\n            \r\n            \r\n            <div className=\"ListResultContainer\">\r\n               <ClusterMiniMap result={result}/>\r\n            </div>\r\n                \r\n               \r\n        </>\r\n    )\r\n}\r\n\r\n/*\r\n   <li>est Cost : <strong>$?</strong></li>\r\n  <CenterPoints />\r\n                        <Markers />\r\n                        <ResidualMarkers />\r\n*/\r\nexport default ClusterResult;\r\n\r\n//<h3> {result.name}</h3>\r\n\r\nconst GetTradeName = (props)=>{\r\n    const {Trades} = props\r\n    const [TradeAllocationTotal, setTradeAllocationTotal] = useState(0)\r\n    const TradeWoRatioForDemo=(num)=>{\r\n        return ((num/TradeAllocationTotal)*100).toFixed(2)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let TWV=0\r\n        Trades[1].map((value,i)=>{TWV= TWV+value})\r\n        setTradeAllocationTotal(TWV)\r\n    },[])\r\n\r\n    return(\r\n        <ul>\r\n            {\r\n                Trades[0].map((trade,i)=>{\r\n                    return(\r\n                        <li key={i}>\r\n                            {trade} <strong>{ TradeWoRatioForDemo(Trades[1][i]) }%</strong>\r\n                        </li>\r\n                    )\r\n                })\r\n\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n \r\n\r\nconst GetClientName = (props)=>{\r\n    const {clients} = props\r\n    return(\r\n        <ul>\r\n            {\r\n                clients[0].map((client, i )=>{\r\n                    return(\r\n                        <li key={i}><strong>{findClientName(client)}</strong></li>\r\n                    )\r\n                })\r\n\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\ClusterMiniMapResults\\ClusterMiniMap.js",["1002","1003","1004","1005","1006"],"import React, { useEffect, useState } from 'react'\r\nimport { GoogleMap, Circle,Marker,Polygon } from '@react-google-maps/api';\r\n\r\nimport {RegionColor} from \"actions/HandleUX\";\r\n\r\nconst containerStyle = { height: \"300px\", width: \"auto\" };\r\nlet Targeticon = { };\r\nconst ClusterMap = (props)=>{\r\n    const {result} = props;\r\n\r\n    const [markers, setMarkers] = useState([])\r\n    const [PolyPath, setPolyPath] = useState([])\r\n\r\n    let options = {\r\n        strokeColor: RegionColor(result.scanCategory),\r\n        strokeOpacity: 0.9,\r\n        strokeWeight: 1,\r\n        fillColor: RegionColor(result.scanCategory),\r\n        fillOpacity: 0.2,\r\n        radius: ((result.range*1000)),\r\n        zIndex: 1\r\n      }\r\n\r\n      const CreateMarkers = ()=>{\r\n\r\n        //console.log(\"markers\", markers)\r\n        let StoreMarkers=[];\r\n\r\n    \r\n          //console.log(centerPoint.sites)\r\n          result.sites.map((site,ii)=>{\r\n\r\n              Targeticon = {\r\n                //path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                path:\"M-24-48h48v48h-48z\",\r\n                fillColor: RegionColor(result.scanCategory),\r\n                fillOpacity: .9,\r\n                anchor: new window.google.maps.Point(0,0), \r\n                strokeWeight: 0,\r\n                scale: .5\r\n            }; \r\n          \r\n            \r\n            StoreMarkers.push( \r\n                \r\n                    <Marker\r\n                       \r\n                        key={site.name}\r\n                     \r\n                        title={site.name}\r\n                        label={site.name}\r\n                        icon={Targeticon}\r\n                        \r\n                        position={{\r\n                                lat: parseFloat(site.lat),\r\n                                lng: parseFloat(site.long)\r\n                            }}\r\n                    />\r\n                \r\n            )\r\n            })\r\n            setMarkers(StoreMarkers);\r\n        }\r\n\r\n\r\n\r\n        const CreatePolygon = ()=>{\r\n          let Polyoptions = {\r\n            strokeColor: RegionColor(result.scanCategory),\r\n            strokeOpacity: 1,\r\n            strokeWeight: 1.5,\r\n            fillColor: RegionColor(result.scanCategory),\r\n            fillOpacity: 0.1,\r\n          \r\n            zIndex: 1\r\n          }\r\n\r\n              let PolygonPath=[]\r\n              result.polygon.map((point,i)=>{\r\n                  //console.log(point)\r\n                  PolygonPath.push({ lat: point[0], lng: point[1]})\r\n              })\r\n              \r\n              setPolyPath(<Polygon paths={PolygonPath} options={Polyoptions} />)\r\n              \r\n            }\r\n\r\n\r\n      useEffect(()=>{  \r\n        CreateMarkers() \r\n        CreatePolygon()\r\n      },[])\r\n\r\n    return(\r\n        <GoogleMap \r\n                mapContainerStyle={containerStyle}\r\n                center={result.center}\r\n                zoom={15}\r\n            >\r\n                { /* Child components, such as markers, info windows, etc. */ }\r\n               \r\n                {markers}\r\n                {PolyPath}\r\n        </GoogleMap>\r\n\r\n    )\r\n}\r\n// <Circle center={result.center} options={options}/>\r\nexport default ClusterMap;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\SelectandReview.js",["1007","1008","1009","1010","1011"],"import React, { useEffect, useState } from 'react'\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { orderBy,  remove} from 'lodash'; \r\nimport ReviewSelectionBtn from \"../Components/buttons/SetSelectedBtn\";\r\n\r\nimport SelectScanItems from \"./ScanSelectItems\";\r\nimport ReviewSelection from \"./ScanReviewSelectedItems\";\r\n\r\n\r\nconst SelectandReview = ()=>{\r\n\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{},[SCAN])\r\n \r\n        return(\r\n            <>\r\n                {\r\n                USERSCAN.SetSelectedDatabase ? <ReviewSelection />:<SelectScanItems />\r\n            } \r\n            </>\r\n        )\r\n}\r\nexport default SelectandReview;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\ScanSelectItems.js",["1012","1013","1014"],"import React, { useEffect, useState } from 'react'\r\nimport {useContext_STRAPI_FULL} from \"Context/STRAPI\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { orderBy,findIndex,  remove} from 'lodash'; \r\nimport ReviewSelectionBtn from \"../Components/buttons/SetSelectedBtn\";\r\nimport {StoreSelected_Single} from \"actions/HandleScanProcess\";\r\nimport BtnBacktoScanOptions from \"../Components/buttons/BacktoScanType\";\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nconst ScanSelectItems=()=>{\r\n   \r\n   \r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const USERSCAN = SCAN.UserScanState;\r\n    const [nonSelected, setNonselected] = useState([])\r\n    const [Selected, setSelected] = useState([])\r\n\r\n\r\n    const handleAdd=(customer)=>{\r\n    \r\n        let Index= findIndex(Selected, function(o) { return o.id === customer.id; });\r\n        if(Index === -1){\r\n            let NewSelected = [...Selected, customer]; \r\n            setSelected(NewSelected)\r\n        }\r\n       \r\n        let RemoveSelected = remove(nonSelected, function(o) {return o.id != customer.id;});\r\n        setNonselected(RemoveSelected)\r\n        \r\n            \r\n    }\r\n\r\n    const handleRemove=(customer)=>{\r\n\r\n        let Index= findIndex(nonSelected, function(o) { return o.id === customer.id; });\r\n        if(Index === -1){\r\n            let NewSelected = [...nonSelected, customer];\r\n            setNonselected(NewSelected)\r\n        }\r\n        let RemoveSelected = remove( Selected, function(o) {return o.id != customer.id;});\r\n        setSelected(RemoveSelected);\r\n      \r\n    }\r\n\r\n    useEffect(()=>{\r\n        setNonselected(JSON.parse(JSON.stringify(STRAPI.UserData.Customers)));\r\n     \r\n        setSelected(USERSCAN.UserScanSingleDataSets)\r\n      \r\n    },[USERSCAN.ScanOptionSelected])\r\n\r\n    useEffect(()=>{\r\n        StoreSelected_Single(Selected)\r\n    },[Selected,nonSelected])\r\n\r\n    return(\r\n        <div>\r\n            <h2>Select Clients for Model</h2>\r\n            \r\n            <div className=\"ControlBar\">\r\n                <ReviewSelectionBtn />\r\n                <BtnBacktoScanOptions />\r\n            </div>\r\n            \r\n            <div className=\"Dataset_Selection\">\r\n                <div>\r\n                    <ul>\r\n                            {\r\n                                \r\n                                orderBy(nonSelected, ['name'], ['asc']).map((customer,i)=>{\r\n                                    return(\r\n                                        <li key={i} >\r\n                                            {customer.name}\r\n                                            <IconButton aria-label=\"add\" onClick={()=>{handleAdd(customer)}}>\r\n                                            <AddCircleIcon />\r\n                                                \r\n                                            </IconButton>\r\n                                            \r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                      </ul>\r\n                </div>\r\n                <div>\r\n                    <ul>\r\n                        {\r\n                            orderBy(Selected, ['name'], ['asc']).map((customer,i)=>{\r\n                                return(\r\n                                    <li key={i} >\r\n                                        {customer.name}\r\n                                        <IconButton aria-label=\"delete\"onClick={()=>{handleRemove(customer)}}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                  </ul>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScanSelectItems;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\CreateModel\\ScanReviewSelectedItems.js",["1015","1016","1017","1018","1019","1020"],"import React, { useEffect, useState } from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { orderBy,  remove} from 'lodash'; \r\n//import {FetchSelectedItems} from \"actions/HandleScanProcess\";\r\nimport BacktoSelectItems from \"../Components/buttons/BacktoAddItemsSingleScan\"\r\nimport ScanForm from \"../../../venders/MaterialUI/Forms/CreateScanoptions\";\r\nimport CreateNewModelBtn from \"../Components/buttons/CreateNewModel\";\r\n\r\nconst ReviewSelected = ()=>{\r\n\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    \r\n    const [Fetching, setFetching] = useState('Review items')\r\n\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{\r\n    \r\n        if(USERSCAN.UserWorkingDataSet_Single.length === 0){\r\n          //  FetchSelectedItems(USERSCAN.UserScanSingleDataSets)\r\n        }\r\n        \r\n        console.log(USERSCAN.processing)\r\n        \r\n    },[USERSCAN])\r\n    \r\n    return(\r\n        <>\r\n            {\r\n                USERSCAN.processing ? <ReviewSent />:<ReviewScanContnt />\r\n            }\r\n               \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ReviewSelected; \r\n\r\n\r\nconst ReviewScanContnt = ()=>{\r\n    \r\n    const SCAN = useContext_SCAN_FULL();\r\n    \r\n    const [Fetching, setFetching] = useState('Model Name and Description')\r\n\r\n    const USERSCAN = SCAN.UserScanState;\r\n\r\n    useEffect(()=>{\r\n    \r\n        if(USERSCAN.UserWorkingDataSet_Single.length === 0){\r\n          //  FetchSelectedItems(USERSCAN.UserScanSingleDataSets)\r\n        }\r\n        \r\n        console.log(USERSCAN.processing)\r\n        \r\n    },[USERSCAN])\r\n    return(\r\n        <div>\r\n                <h2>Name and Save Model</h2>\r\n                \r\n                <div className=\"ControlBar\">\r\n                    <BacktoSelectItems />\r\n                </div>\r\n            \r\n\r\n                <div className=\"ModelReview\">\r\n                    <div>\r\n                        <h2>Model Name and Description</h2>\r\n                        <p>Add a clear and consis name and description for this model. This will be used later when comparing and anylisis models against each other.</p>\r\n                        <ScanForm  DataSet={USERSCAN.UserScanSingleDataSets} />\r\n                    </div>\r\n                    <div>\r\n                        <ul> \r\n                            {\r\n                                USERSCAN.UserScanSingleDataSets.map((item,i)=>{\r\n                                    return(\r\n                                        <li key={i}>\r\n                                            {item.name}\r\n                                        </li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n\r\n\r\n                   \r\n                </div>\r\n               \r\n\r\n               \r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReviewSent=()=>{\r\n    return(\r\n        <>\r\n            <h2>Building new Model</h2>\r\n            <p>We are currently building the new model as requested.</p>\r\n            <p>You can check the progess of the model under the \"Resource Models\" page</p>\r\n            <p>Once the model status has changed to 'complete' your results will be viewable</p>\r\n            <CreateNewModelBtn />\r\n        </>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\RadialSIngleChart.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_CLusterSpreadbyCLient.js",["1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {GroupArrayByOccurances} from \"actions/HandleUX\";\r\nimport {findClientName} from \"actions/ClusterAnalysis\";\r\n// Chart\r\nimport PieChart from \"venders/apexCharts/SimplePie\";\r\nimport RadialMultiChart from \"venders/apexCharts/RadialMultiChart\";\r\n\r\n\r\nimport {H3, P} from \"Pages/Auth/Components/Type\";\r\n\r\nimport {find, findIndex} from 'lodash'; \r\n\r\nconst HeaderLocations=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const MODEL = SCAN.SelectedModel\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    const gl=(data)=>{\r\n        return data.length\r\n    }\r\n\r\n    const extractResults=()=>{\r\n        let CategoryInt=[]\r\n           \r\n        SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((result,i)=>{\r\n                CategoryInt.push(result.scanCategory)\r\n                return true\r\n            })\r\n/* data = [\r\n  {\r\n    subject: 'Math', A: 120, B: 110, fullMark: 150,\r\n  },\r\n  {\r\n    subject: 'Chinese', A: 98, B: 130, fullMark: 150,\r\n  },\r\n  {\r\n    subject: 'English', A: 86, B: 130, fullMark: 150,\r\n  },\r\n  {\r\n    subject: 'Geography', A: 99, B: 100, fullMark: 150,\r\n  },\r\n  {\r\n    subject: 'Physics', A: 85, B: 90, fullMark: 150,\r\n  },\r\n  {\r\n    subject: 'History', A: 65, B: 85, fullMark: 150,\r\n  },\r\n];\r\n*/\r\n        let Data=[] \r\n        let ClientSpread=[]\r\n            console.log(GroupArrayByOccurances(CategoryInt));\r\n            let RegionArray=GroupArrayByOccurances(CategoryInt);\r\n           \r\n           \r\n            RegionArray[0].map((cat,i)=>{\r\n              \r\n                Data.push({ name: cat, value: RegionArray[1][i] })\r\n                let ClientPush=[]\r\n\r\n\r\n                SCAN.SelectedModel.STOREMARKERCENTERPOINTS.map((CP,i)=>{\r\n                        if(CP.scanCategory === cat)\r\n                        {\r\n                            \r\n                            // Check to see if Name exists\r\n                            let TierID = findIndex(ClientSpread, function(o) { return o.name === cat; })\r\n                            if(TierID === -1){ ClientSpread.push({name:cat}); }\r\n                            TierID = findIndex(ClientSpread, function(o) { return o.name === cat; })\r\n                        \r\n\r\n                            \r\n                           // console.log(ClientSpread[TierID], TierID, ClientSpread)\r\n                            CP.sites.map((client,i)=>{\r\n                                client.customers.map((name,i)=>{\r\n                                    if(ClientSpread[TierID][findClientName(name)] === undefined){\r\n                                        ClientSpread[TierID][findClientName(name)] = 1\r\n                                    }else{\r\n                                        ClientSpread[TierID][findClientName(name)] = ClientSpread[TierID][findClientName(name)]+1\r\n                                    }\r\n                                    //console.log()\r\n                                    //console.log(findClientName(name))\r\n                                })\r\n                            })\r\n                        }\r\n                       \r\n                })\r\n            });\r\n\r\n            console.log(ClientSpread)\r\n\r\n        setCategoryOccurance(ClientSpread)\r\n    }\r\n\r\n    const inScope=()=>{\r\n        return gl(MODEL.USERSELECTEDLIST)-gl(MODEL.STORERESIDUALMARKERS)\r\n    }\r\n\r\n    useEffect(()=>{ console.log(MODEL)  },[]) \r\n    useEffect(()=>{extractResults()},[SCAN])\r\n\r\n    return(\r\n        <> \r\n            <H3 Copy={`Cluster Spread by Client`} />\r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                    <RadialMultiChart Data={CategoryOccurance} term={`Clusters`}/>\r\n                </div>\r\n               \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n//<PieChart Data={CategoryOccurance}/>\r\nexport default HeaderLocations;",["1032","1033"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\RadialMultiChart.js",["1034"],"import React from 'react';\r\nimport {\r\n  Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis,ResponsiveContainer,Legend, Tooltip\r\n} from 'recharts';\r\n\r\n\r\n\r\nconst SimpleRadial = (props)=>{\r\n    const {Data, term} = props\r\n    return(\r\n        <ResponsiveContainer width='100%' height={300}>\r\n        <RadarChart  outerRadius={100}  data={Data}>\r\n            <PolarGrid />\r\n            <PolarAngleAxis dataKey=\"name\" />\r\n            <PolarRadiusAxis />\r\n            \r\n            {\r\n                Data.map((tier,i)=>{\r\n                    console.log(tier )\r\n                    return(\r\n                        <Radar key={`cell-${i}`} name={tier.name} dataKey={tier} stroke=\"#030303\" fill=\"#030303\" fillOpacity={0.6} />\r\n                    )\r\n                })\r\n            }\r\n            \r\n            <Tooltip />\r\n            <Legend />\r\n        </RadarChart>\r\n      </ResponsiveContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default SimpleRadial;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\MapMainFilter.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_ResourceSpread.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\StackedBarChart.js",["1035"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByResourceType.js",["1036","1037"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { setMainMapLocation, SetMapClusterType,SetMapResourceType } from \"actions/HandleUX\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n  /* ************************************************** */\r\nconst ByResourceType = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL()\r\n    const UX = useContext_UX_FULL()\r\n    const ResourceType=[\"HandyMan\",\"Electrician\",\"Plumber\",\"Specialized\"]\r\n    const [type,setType] = useState(UX.AreaSelectFilter.ByResourceType)\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleChange = (event) => { \r\n        //console.log(event.target.value.Center)\r\n        \r\n        setType(event.target.value)\r\n        SetMapResourceType(event.target.value)\r\n        //StoreCompareItem(event.target.value, pos)\r\n    };\r\n\r\n\r\n    useEffect(()=>{ console.log(SCAN) },[SCAN])\r\n    useEffect(()=>{ setType(UX.AreaSelectFilter.ByResourceType)},[UX])\r\n\r\n    return(\r\n        <FormControl variant=\"outlined\" className={`${classes.formControl} Map_Filters`}>\r\n        <InputLabel id=\"ByTier\">Resource Type</InputLabel>\r\n             <Select\r\n                labelId=\"ByTier\"\r\n                id=\"ByTier-outlined\"\r\n                value={type}\r\n                onChange={handleChange}\r\n                label=\"Select Resource Type\"\r\n                >\r\n                <MenuItem value={null}> <em>All</em> </MenuItem>\r\n\r\n                {\r\n                    ResourceType.map((Resource,i)=>{\r\n                        return(\r\n                            <MenuItem key={Resource}  value={Resource}>{Resource}</MenuItem>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ByResourceType;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByClusterType.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Maps\\Filters\\Filter_ByCapitalCities.js",["1038","1039"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport { setMainMapLocation } from \"actions/HandleUX\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\nconst ByCapitalCities = ()=>{\r\n    const UX = useContext_UX_FULL()\r\n    const CapitalCities=[\r\n        {\r\n            Name:'Sydney',\r\n            Zoom:10,\r\n            Center: { lat:   -33.868820, lng: 151.209290}\r\n        },\r\n        {\r\n            Name:'Melbourne',\r\n            Zoom:8,\r\n            Center: { lat:   -37.813629, lng: 144.963058}\r\n        },\r\n        {\r\n            Name:'Brisbane',\r\n            Zoom:10,\r\n            Center: { lat:-27.4678, lng:153.0281}\r\n        },\r\n        {\r\n            Name:'Perth',\r\n            Zoom:10,\r\n            Center: { lat:-31.9522, lng:115.8589}\r\n        },\r\n        {\r\n            Name:'Adelaide',\r\n            Zoom:10,\r\n            Center: { lat:-34.9289, lng:138.6011}\r\n        },\r\n        {\r\n            Name:'Canberra',\r\n            Zoom:13,\r\n            Center: { lat:-35.2931, lng:149.1269}\r\n        },\r\n        {\r\n            Name:'Gold Coast',\r\n            Zoom:10,\r\n            Center: { lat:-28.0167, lng:153.4000}\r\n        },\r\n        {\r\n            Name:'Newcastle',\r\n            Zoom:10,\r\n            Center: { lat:-32.9167, lng:151.7500}\r\n        },\r\n        {\r\n            Name:'Hobart',\r\n            Zoom:10,\r\n            Center: { lat:-42.8806, lng:147.3250}\r\n        }\r\n]\r\n\r\n    const classes = useStyles();\r\n    const [city, setCity] = React.useState(UX.MapParameters.Location);\r\n\r\n    const handleChange = (event, key, payload) => { \r\n        console.log(CapitalCities[event.target.value])\r\n        \r\n        setMainMapLocation(CapitalCities[event.target.value]); \r\n        setCity(CapitalCities[event.target.value].Name)\r\n    \r\n    };\r\n\r\n    return(\r\n       <FormControl variant=\"outlined\" className={`${classes.formControl} Map_Filters`}>\r\n        <InputLabel id=\"MajorCities\">Major Cities</InputLabel>\r\n             <Select\r\n                labelId=\"MajorCities\"\r\n                id=\"MajorCities-outlined\"\r\n                value={city}\r\n                onChange={handleChange}\r\n                label=\"Select Major City\"\r\n                >\r\n          <MenuItem value=\"\"> <em>Select</em> </MenuItem>\r\n\r\n          {\r\n              CapitalCities.map((city,i)=>{\r\n                  return(\r\n                    <MenuItem key={i} value={i}>{city.Name}</MenuItem>\r\n                  )\r\n              })\r\n          }\r\n\r\n        </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ByCapitalCities;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectResourceType.js",["1040"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {SetMapResourceType } from \"actions/HandleUX\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n  /* ************************************************** */\r\nconst ByResourceType = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL()\r\n    const UX = useContext_UX_FULL()\r\n    const ResourceType=[\"HandyMan\",\"Electrician\",\"Plumber\",\"Specialized\"]\r\n    const [type,setType] = useState(UX.AreaSelectFilter.ByResourceType)\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleChange = (event) => { \r\n        //console.log(event.target.value.Center)\r\n        \r\n        setType(event.target.value)\r\n        SetMapResourceType(event.target.value)\r\n        //StoreCompareItem(event.target.value, pos)\r\n    };\r\n\r\n  \r\n   \r\n\r\n    useEffect(()=>{ setType(UX.AreaSelectFilter.ByResourceType)},[UX])\r\n\r\n\r\n    return(\r\n        <FormControl variant=\"outlined\" className={`${classes.formControl} Map_Filters`}>\r\n        <InputLabel id=\"ByTier\">Resource Type</InputLabel>\r\n             <Select\r\n                labelId=\"ByTier\"\r\n                id=\"ByTier-outlined\"\r\n                value={type}\r\n                onChange={handleChange}\r\n                label=\"Select Resource Type\"\r\n                >\r\n                <MenuItem value={null}> <em>All</em> </MenuItem>\r\n\r\n                {\r\n                    ResourceType.map((Resource,i)=>{\r\n                        return(\r\n                            <MenuItem key={Resource}  value={Resource}>{Resource}</MenuItem>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ByResourceType;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_WorkOrderSpread.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\ChartHeader.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\Layout\\ReviewGlobalFilter.js",["1041","1042"],"import React from 'react';\r\n\r\n// Template\r\nimport Section from \"Pages/Auth/Components/Layout/Section\"\r\nimport {P} from \"Pages/Auth/Components/Type\";\r\n\r\n// Filter\r\nimport FilterByResourceType from \"Pages/Auth/Components/selects/SelectResourceType\";\r\nimport FilterByClusterType from \"Pages/Auth/Components/selects/SelectClusterType\";\r\nimport SelectClient from \"Pages/Auth/Components/selects/SelectClient\";\r\nconst GlobalFilter = ()=>{\r\n\r\n    return(\r\n        <>\r\n            \r\n            <div className=\"GlobalFilter\">\r\n                <div className=\"options\">\r\n                    <SelectClient />    \r\n                    <FilterByResourceType /> \r\n                    <FilterByClusterType />\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        </> \r\n    )\r\n}\r\n\r\nexport default GlobalFilter;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\Layout\\FilterChips.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Location_Heatmap.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectClusterType.js",["1043"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport { SetMapClusterType } from \"actions/HandleUX\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n  /* ************************************************** */\r\nconst ByClusterType = ()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL()\r\n    const UX = useContext_UX_FULL()\r\n    const ClusterType=['SameBuilding','CBD','InnerCity','Metro','OuterMetro','Regional','Remote','ExtremeRemote' ]\r\n    const [type,setType] = useState(UX.AreaSelectFilter.ByClusterType)\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleChange = (event) => { \r\n        //console.log(event.target.value.Center)\r\n        \r\n        setType(event.target.value)\r\n        SetMapClusterType(event.target.value)\r\n        //StoreCompareItem(event.target.value, pos)\r\n    };\r\n\r\n\r\n    \r\n    useEffect(()=>{\r\n      \r\n        setType(UX.AreaSelectFilter.ByClusterType)},[UX])\r\n\r\n \r\n    return(\r\n        <FormControl variant=\"outlined\" className={`${classes.formControl} Map_Filters`}>\r\n        <InputLabel id=\"ByTier\">Cluster Type</InputLabel>\r\n             <Select\r\n                labelId=\"ByTier\"\r\n                id=\"ByTier-outlined\"\r\n                value={type}\r\n                onChange={handleChange}\r\n                label=\"Select Cluster Type\"\r\n                >\r\n                <MenuItem value={null}> <em>All</em> </MenuItem>\r\n\r\n                {\r\n                    ClusterType.map((city,i)=>{\r\n                        return(\r\n                            <MenuItem key={city}  value={city}>{city}</MenuItem>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ByClusterType;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Radial_Charts.js",["1044"],"import React, {useEffect, useState} from 'react'\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n\r\n// Actions\r\nimport {CreateRadial_ResourcesAgainstClusters} from \"actions/CreateSingleViewModel\"\r\n\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n\r\n// Chart\r\nimport PieChart from \"venders/apexCharts/SimplePie\";\r\nimport RadialSIngleChart from \"venders/apexCharts/RadialSIngleChart\";\r\n\r\nconst Chart1={\r\n    Icon:'radial',\r\n    Header:\"Resources Allocation to Cluster Type\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"The Radial Graph shows the number of Resource Allocations by Cluster Type in a given model. Use the 'Cluster Type' filter to find Resource Allocation numbers for a specific resource.\"\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const MODELCENTER = SCAN.SelectedModel.STOREMARKERCENTERPOINTS\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    useEffect(()=>{ \r\n        setCategoryOccurance(CreateRadial_ResourcesAgainstClusters(MODELCENTER))  \r\n     \r\n    },[UX]) \r\n    \r\n    return(\r\n  \r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                    <ChartHeader \r\n                        Icon={Chart1.Icon}\r\n                        Header={Chart1.Header}\r\n                        Tip={Chart1.Tip}\r\n                        Copy={Chart1.Copy}\r\n                    />\r\n                    <RadialSIngleChart Data={CategoryOccurance} term={`Resource Allocation`}/>\r\n                </div>\r\n                <div>\r\n                 <ChartHeader \r\n                    Icon='pie'\r\n                    Header=\"Resource Split by Cluster type\"\r\n                    Copy=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.\"\r\n                />\r\n                    <PieChart Data={CategoryOccurance}/>\r\n                </div>\r\n            </div>\r\n  \r\n    )\r\n}\r\n\r\nexport default Trade_Radial_Charts;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Heatmap.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\ModelSingleReview.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SINGLE.js",["1045"],"import React ,  { createContext, useContext, useMemo }from 'react';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n/*\r\n\r\nReducer State\r\n\r\n*/\r\n// Create Draft Context for provider\r\n\r\nexport const Context_SINGLE_FULL = createContext()\r\n\r\n// Custom Hooks\r\n\r\nexport const useContext_SINGLE_FULL = ()=>{\r\n    return useContext(Context_SINGLE_FULL)\r\n}\r\n\r\n\r\n \r\nexport const SINGLEContextProvider = ({children})=>{\r\n    const SINGLE = useSelector(state => state.SINGLE );\r\n\r\n    useMemo(()=>{  },[SINGLE]) \r\n\r\n    return(\r\n            <Context_SINGLE_FULL.Provider value={SINGLE}>\r\n                {children}            \r\n            </Context_SINGLE_FULL.Provider>     \r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\CreateSingleViewModel.js",["1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"/* Action file for Single Model Review Functions */\r\n/*\r\n    THIS IS FOR PROTOTYPE AND LIMITED DEV TIME ONLY\r\n    ALL OF THIS WILL NEED REFACTORING WHEN YOU HAVE TIME!!!\r\n    \r\n*/\r\n\r\n\r\nimport store from \"../store/index\"\r\nimport axios from 'axios';\r\nimport {GroupArrayByOccurances, HandleResourceFilter} from \"actions/HandleUX\";\r\nimport {findIndex,partial,sumBy,orderBy} from 'lodash';\r\nimport {findClientName} from \"actions/ClusterAnalysis\"\r\n\r\n\r\n export const fixNumber=(num)=>{\r\n    if(num != undefined)\r\n        return parseFloat(num.toFixed(2)) \r\n            return 0\r\n}\r\n\r\n/* ******************************** */\r\n// FILTERS\r\n\r\n    const RunFilter=(filter,ByType)=>{\r\n        if(ByType != null)\r\n            if(filter != ByType )\r\n                return false\r\n                    return true\r\n    }\r\n\r\n/**/\r\n\r\n/* ************************************************************************************************* */\r\n// Location Functions\r\n\r\n\r\n\r\n/* ************************************************************************************************* */\r\n\r\n\r\nexport const ClusterNumbersByResourceType=()=>{\r\n        // Simple Loop FUnction\r\n        // This function loops the clusterpoints and stores Cluster References\r\n\r\n        // Get Filters\r\n        const UX = store.getState().UX\r\n        const MODEL = store.getState().SCANSTATE\r\n        let ClusterTypeArr=[];\r\n\r\n        MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n\r\n            if(!HandleResourceFilter(model, UX.AreaSelectFilter.ByResourceType)){\r\n                ClusterTypeArr.push(model.scanCategory)\r\n                return true\r\n            } \r\n\r\n        });\r\n\r\n        return ClusterTypeArr    \r\n}\r\n\r\n\r\nexport const ModelNumSitesTotal=()=>{\r\n    // Simple Loop Function\r\n    // This function loops the clusterpoints and stores Cluster References\r\n\r\n    // Get Filters\r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    let SiteNumberArr=[];\r\n\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        SiteNumberArr.push(model.sites.length)\r\n            return true\r\n    });\r\n\r\n    return SiteNumberArr    \r\n}\r\n\r\n\r\n\r\nexport const CreateObj_Clustertype_ResourceAllocation=()=>{\r\n    // Obj Loop\r\n    // Creates an Object with a cluster Name and resource Allocation totals\r\n\r\n    // Get Filters\r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    let Clusters_ResourceAllocation=[];\r\n\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n\r\n            let Index = findIndex(Clusters_ResourceAllocation,{name:model.scanCategory})\r\n\r\n            if(Index === -1){ Clusters_ResourceAllocation.push({name:model.scanCategory})}\r\n            Index = findIndex(Clusters_ResourceAllocation,{name:model.scanCategory})\r\n            \r\n            model.resourceQuota.map((quote,ii)=>{\r\n \r\n       \r\n            /* ********************************** */       \r\n                // Run Filter\r\n                if(!RunFilter(quote.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n            /* ********************************** */ \r\n               \r\n\r\n                if(Clusters_ResourceAllocation[Index][`Resource_${quote.Trade}`] === undefined){\r\n                    Clusters_ResourceAllocation[Index][`Resource_${quote.Trade}`] = fixNumber(quote.ResourceAllocation) \r\n                }else{\r\n                    Clusters_ResourceAllocation[Index][`Resource_${quote.Trade}`] =   (fixNumber(Clusters_ResourceAllocation[Index][`Resource_${quote.Trade}`]  +quote.ResourceAllocation))\r\n                }\r\n                    \r\n            })\r\n    \r\n    });\r\n\r\n    return Clusters_ResourceAllocation    \r\n}\r\n\r\n\r\nexport const CreateObj_Clustertype_WorkOrders=()=>{\r\n        // Get Filters\r\n        const UX = store.getState().UX\r\n        const MODEL = store.getState().SCANSTATE\r\n        let Clusters_Workorders=[];\r\n\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n\r\n        let Index = findIndex(Clusters_Workorders,{name:model.scanCategory})\r\n        if(Index === -1){ Clusters_Workorders.push({name:model.scanCategory})}\r\n        Index = findIndex(Clusters_Workorders,{name:model.scanCategory})\r\n\r\n        Object.keys( model.ResourcesGroupedBy).map(function(key, index) {\r\n   \r\n            model.ResourcesGroupedBy[key].map((quote,ii)=>{\r\n\r\n                /* ********************************** */       \r\n                    // Run Filter\r\n                    if(!RunFilter(quote.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n                /* ********************************** */ \r\n                /* ********************************** */       \r\n                    // Run Filter\r\n                  //  console.log(quote.Customer ,UX.AreaSelectFilter.ByClient) \r\n                   // if(!RunFilter(quote.Customer ,UX.AreaSelectFilter.ByClient)) return false\r\n                /* ********************************** */ \r\n\r\n                if(Clusters_Workorders[Index][quote.Trade] === undefined){  Clusters_Workorders[Index][quote.Trade] = (quote.WOS) }\r\n                else{ Clusters_Workorders[Index][quote.Trade] =   ((Clusters_Workorders[Index][quote.Trade]  +quote.WOS))}\r\n\r\n            })\r\n          });\r\n    })\r\n\r\n    return Clusters_Workorders;\r\n}\r\n\r\n\r\n\r\nexport const Location_HeatMap=()=>{\r\n    // Simple Loop FUnction\r\n    // This function loops locations for heat map\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    let HeatMapLocations=[];\r\n\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n       \r\n        /* ********************************** */       \r\n            // Run Filter\r\n            if(!RunFilter(model.scanCategory ,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n            model.sites.map((site,ii)=>{\r\n                HeatMapLocations.push(new window.google.maps.LatLng(site.lat, site.long))\r\n            })\r\n    });\r\n\r\n    return HeatMapLocations    \r\n}\r\n\r\n\r\n\r\n\r\n// Location Chart building\r\n\r\nexport const ChartData_ClustersBy_ResourceType=()=>{\r\n    \r\n    // Fetch occurances of clusters from ClusterNumbersByResourceType()\r\n    // find occurances and loop to create radial data\r\n    let Preapred_Chart_Data=[] \r\n    let ClustersGroupedBy;\r\n    ClustersGroupedBy=GroupArrayByOccurances(ClusterNumbersByResourceType());\r\n\r\n    ClustersGroupedBy[0].map((cat,i)=>{ Preapred_Chart_Data.push({ name: cat, value: ClustersGroupedBy[1][i] }) });\r\n    \r\n    return Preapred_Chart_Data\r\n}\r\n\r\n\r\n\r\nexport const ChartData_SitesInScope=()=>{\r\n    const MODEL = store.getState().SCANSTATE\r\n    let Sites = ModelNumSitesTotal()\r\n    \r\n    let ChartData=[\r\n        { name: 'InScope', value: Sites.reduce((a, b) => a + b, 0) }, \r\n        { name: 'Out of Scope', value: MODEL.SelectedModel.USERSELECTEDLIST.length - Sites.reduce((a, b) => a + b, 0) }\r\n    ]\r\n\r\n    return ChartData\r\n}\r\n\r\n\r\nexport const MapData_LocationHeatmap=()=>{\r\n   return [Location_HeatMap(), Location_HeatMap().length]\r\n}\r\n\r\n\r\n\r\n\r\n/* ************************************************************************************************* */\r\n// Resource Functions\r\n\r\n/* ************************************************************************************************* */\r\n\r\nexport  const FindTotalResourceAllocation = ()=>{\r\n\r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let TotalResources = []\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n           TotalResources.push(sumBy(model.resourceQuota, function(o) { return o.ResourceAllocation; }));\r\n        }) \r\n    return TotalResources.reduce((a, b) => a + b, 0)\r\n}\r\n\r\n\r\nexport const WOsCoveredInModel = (CENTERPOINTS)=>{\r\n\r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    let ModelTotal=[];\r\n    let QuotaCount=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((site)=>{\r\n        ModelTotal.push(TotalWorkOrders(site.sites))\r\n        Object.keys(site.ResourcesGroupedBy).map(function(key, index) {\r\n            site.ResourcesGroupedBy[key].map((q,ii)=>{\r\n                QuotaCount.push(q.WOS)\r\n            })\r\n        });\r\n    })\r\n\r\n    return QuotaCount.reduce((a, b) => a + b, 0)\r\n}\r\n\r\n\r\n\r\nexport const Resources_HeatMap=()=>{\r\n\r\n\r\n     // LOOK OVER THIS\r\n     // POSSIBLY WRONG\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    let HeatMapLocations=[];\r\n\r\n    let Quota=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        \r\n\r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory ,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */   \r\n                    \r\n        // Loop Quotas to find volume numbers \r\n        model.resourceQuota.map((quota,ii)=>{\r\n\r\n            /* ********************************** */       \r\n            // Run Filter\r\n            if(!RunFilter(quota.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n            /* ********************************** */ \r\n            \r\n            Quota.push(quota.ResourceAllocation)\r\n        })\r\n\r\n\r\n       \r\n        //loop over volume numbers to create HEAT!!!!\r\n        // Math.ceil to round decimals up to 1 so they are counted\r\n        let n=0\r\n        while (n <= Math.ceil((Quota.reduce((a, b) => a + b, 0)))) {\r\n            HeatMapLocations.push(new window.google.maps.LatLng(model.center.lat, model.center.lng))\r\n            n++;\r\n        } \r\n    })\r\n    let ReduceNumber = Quota.reduce((a, b) => a + b, 0)\r\n\r\n    return [HeatMapLocations, ReduceNumber]\r\n}\r\n\r\n\r\n\r\n// Objs\r\n\r\nexport const CreateOBJ_ResourcesAgainstClients=()=>{\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n\r\n  \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        //console.log(model)\r\n        \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n        \r\n           \r\n        // loop\r\n        Object.keys(model.ResourcesGroupedBy).map(function(key, index) {\r\n\r\n            // Run Loop\r\n            model.ResourcesGroupedBy[key].map((q,ii)=>{\r\n                let Index;\r\n           \r\n           \r\n            /* ********************************** */       \r\n            // Run Filter\r\n                if(!RunFilter(q.Trade,UX.AreaSelectFilter.ByResourceType)) return false\r\n            /* ********************************** */ \r\n            \r\n\r\n                //console.log(q)\r\n                Index = findIndex(Resources_Clients,{name:findClientName(q.Customer)})\r\n                if(Index === -1){ \r\n                    Resources_Clients.push({name:findClientName(q.Customer)})\r\n                    Index = findIndex(Resources_Clients,{name:findClientName(q.Customer)})\r\n                }\r\n\r\n               \r\n                if(Resources_Clients[Index][key] === undefined)\r\n                {Resources_Clients[Index][key] = fixNumber(q.Ratio)}\r\n                else{Resources_Clients[Index][key] = fixNumber(Resources_Clients[Index][key]) + fixNumber(q.Ratio)}\r\n                        \r\n\r\n                if(Resources_Clients[Index][`Sum`] === undefined)\r\n                {Resources_Clients[Index][`Sum`] = fixNumber(q.Ratio) }\r\n                else{Resources_Clients[Index][`Sum`] = fixNumber(Resources_Clients[Index][`Sum`]) + fixNumber(q.Ratio)}\r\n                    \r\n            })\r\n        });\r\n    })\r\n  \r\n \r\n   return orderBy(Resources_Clients, ['name'], [])\r\n\r\n}\r\n\r\n\r\nexport const CreateOBJ_ResourcesAgainstDates=()=>{\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n  \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        //console.log(model)\r\n       \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        // loop\r\n        Object.keys(model.ResourcesGroupedBy).map(function(key, index) {\r\n\r\n            // Run Loop\r\n            model.ResourcesGroupedBy[key].map((q,ii)=>{\r\n                let Index;\r\n\r\n  \r\n        /* ********************************** */       \r\n        // Run Filter\r\n          if(!RunFilter(q.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n        /* ********************************** */ \r\n\r\n\r\n                Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                if(Index === -1){ \r\n                    Resources_Clients.push({name:(q.Date), UnixDate:q.UnixDate})\r\n                    Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                }\r\n               \r\n                if(Resources_Clients[Index][key] === undefined){\r\n                    Resources_Clients[Index][key] = fixNumber(q.Ratio)\r\n                }else{\r\n                    Resources_Clients[Index][key] = fixNumber(Resources_Clients[Index][key] + fixNumber(q.Ratio))\r\n                }\r\n                   \r\n                        \r\n\r\n                if(Resources_Clients[Index][`ratio`] === undefined){\r\n                    Resources_Clients[Index][`ratio`] = fixNumber(q.Ratio)\r\n                }\r\n                else{\r\n                    Resources_Clients[Index][`ratio`] = (fixNumber(Resources_Clients[Index][`ratio`]  +fixNumber(q.Ratio)))\r\n                }\r\n                     \r\n            })\r\n        });\r\n    })\r\n   return Resources_Clients\r\n}\r\n\r\n\r\n\r\n// Charts\r\nexport const CreateRadial_ResourcesAgainstClusters = ()=>{\r\n    let ChartData=[];\r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        model.resourceQuota.map((quote,ii)=>{\r\n        let Index = findIndex(ChartData,{name:quote.Trade})\r\n        if(Index === -1){ ChartData.push({name:quote.Trade})}\r\n            Index = findIndex(ChartData,{name:quote.Trade})\r\n\r\n\r\n        /* ********************************** */       \r\n        // Run Filter\r\n          if(!RunFilter(model.scanCategory ,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n            if(ChartData[Index].value === undefined)\r\n            {  ChartData[Index].value  = parseFloat(quote.ResourceAllocation.toFixed(2)) }\r\n            else\r\n            {  ChartData[Index].value  =  parseFloat(ChartData[Index].value.toFixed(2))  + parseFloat(quote.ResourceAllocation.toFixed(2))  }\r\n        })\r\n    })\r\n   \r\n    \r\n    return orderBy(ChartData, ['name'], [])\r\n}\r\n\r\n\r\nexport const CreateRadial_ResourcesAgainstClients = ()=>{\r\n    let ChartData=[];\r\n    \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n\r\n        console.log(model);\r\n        model.resourceQuota.map((quote,ii)=>{\r\n\r\n            console.log(quote);\r\n\r\n        let Index = findIndex(ChartData,{name:quote.Trade})\r\n        if(Index === -1){ ChartData.push({name:quote.Trade})}\r\n            Index = findIndex(ChartData,{name:quote.Trade})\r\n\r\n                /* ********************************** */       \r\n                // Run Filter\r\n                if(!RunFilter(model.scanCategory ,UX.AreaSelectFilter.ByClusterType)) return false\r\n                /* ********************************** */ \r\n                 \r\n                if(Resources_Clients[Index][quote.Trade] === undefined){  Resources_Clients[Index][quote.Trade] = (quote.WOS) }\r\n                else{ Resources_Clients[Index][quote.Trade] =   ((Resources_Clients[Index][quote.Trade]  +quote.WOS))}\r\n               /*        \r\n                    if(ChartData[Index].value === undefined)\r\n                    {  ChartData[Index].value  = parseFloat(quote.ResourceAllocation.toFixed(2)) }\r\n                    else\r\n                    {  ChartData[Index].value  =  parseFloat(ChartData[Index].value.toFixed(2))  + parseFloat(quote.ResourceAllocation.toFixed(2))  }\r\n                */\r\n        })\r\n    })\r\n    return ChartData\r\n}\r\n\r\n\r\n/* ************************************************************************************************* */\r\n// Work Orders\r\n/* ************************************************************************************************* */\r\n\r\n\r\nexport const TotalWorkOrders=(data)=>{\r\n    let TotalWOs=[]\r\n    data.map((site,i)=>{\r\n        if(site.SumWorkOrder !== undefined) \r\n            TotalWOs.push(site.SumWorkOrder)\r\n    })\r\n    return TotalWOs.reduce((a, b) => a + b, 0)\r\n}\r\n\r\n\r\nexport const WorkOrderCompletion = ()=>{\r\n    \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n    \r\n    let WOCover= WOsCoveredInModel(MODEL.SelectedModel.STOREMARKERCENTERPOINTS);\r\n    let GetTotalWorkOrders = TotalWorkOrders(MODEL.SelectedModel.USERSELECTEDLIST)\r\n    \r\n    return [WOCover, (GetTotalWorkOrders-WOCover)]\r\n}\r\n\r\n\r\nexport const CreateOBJ_WO_Overtime=()=>{\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n  \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        console.log(model)\r\n       \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        // loop\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n\r\n            // Run Loop\r\n            model.ClientGroupedBy[key].map((q,ii)=>{\r\n                let Index;\r\n\r\n  \r\n                /* ********************************** */       \r\n                // Run Filter\r\n                if(!RunFilter(q.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n                /* ********************************** */ \r\n\r\n\r\n                Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                if(Index === -1){ \r\n                    Resources_Clients.push({name:(q.Date), UnixDate:q.UnixDate})\r\n                    Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                }\r\n               \r\n                if(Resources_Clients[Index][key] === undefined){\r\n                    Resources_Clients[Index][key] = fixNumber(q.WOS)\r\n                }else{\r\n                    Resources_Clients[Index][key] = fixNumber(Resources_Clients[Index][key] + fixNumber(q.WOS))\r\n                }\r\n                   \r\n                        \r\n\r\n                if(Resources_Clients[Index][`Work Orders`] === undefined){\r\n                    Resources_Clients[Index][`Work Orders`] = fixNumber(q.WOS)\r\n                }\r\n                else{\r\n                    Resources_Clients[Index][`Work Orders`] = (fixNumber(Resources_Clients[Index][`Work Orders`]  +fixNumber(q.WOS)))\r\n                }\r\n                     \r\n            })\r\n        });\r\n    })\r\n   return Resources_Clients\r\n}\r\n\r\n\r\n/* ************************************************************************************************* */\r\n// Clients\r\n/* ************************************************************************************************* */\r\n\r\nexport const FindClientList = ()=>{\r\n    const MODEL = store.getState().SCANSTATE;\r\n    let ClientNames = []\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n            model.ClientGroupedBy[key].map((c,ii)=>{\r\n           \r\n                if(ClientNames.indexOf(c.Customer) === -1){\r\n                    ClientNames.push(c.Customer)\r\n                }\r\n            })\r\n            \r\n        })\r\n    })\r\n    return ClientNames\r\n}\r\n\r\nexport const Client_Split_by_Site=()=>{\r\n        \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE;\r\n\r\n    let Temp=[]\r\n    let ChartData=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n            model.ClientGroupedBy[key].map((c,ii)=>{\r\n\r\n        /* ********************************** */       \r\n        // Run Filter\r\n          if(!RunFilter(c.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n        /* ********************************** */ \r\n\r\n                let Index = findIndex(Temp,{name:c.Customer})\r\n                if(Index === -1){ \r\n                    Temp.push({name:c.Customer})\r\n                    Index = findIndex(Temp,{name:c.Customer})\r\n                }\r\n                \r\n                if(Temp[Index]['sites'] === undefined) { Temp[Index]['sites']=[]; }\r\n                    \r\n                if(Temp[Index].sites.indexOf(c.site) === -1){ Temp[Index]['sites'].push(c.site)}\r\n                \r\n            })\r\n        })\r\n    })\r\n\r\n    Temp.map((client,i)=>{ ChartData.push({name:findClientName(client.name), value:client.sites.length}) })\r\n\r\n    return ChartData\r\n}\r\n\r\n\r\n\r\nexport  const Client_Split_by_Resources=()=>{\r\n    \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE;\r\n\r\n    let Temp=[]\r\n    let ChartData=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        //console.log(model)\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n            model.ClientGroupedBy[key].map((c,ii)=>{\r\n            \r\n            /* ********************************** */       \r\n            // Run Filter\r\n            if(!RunFilter(c.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n            /* ********************************** */ \r\n\r\n                let Index = findIndex(Temp,{name:c.Customer})\r\n                if(Index === -1){ \r\n                    Temp.push({name:c.Customer})\r\n                    Index = findIndex(Temp,{name:c.Customer})\r\n                }\r\n                \r\n                if(Temp[Index]['Ratio'] === undefined) { Temp[Index]['Ratio']=[]; }\r\n                if(Temp[Index].Ratio.indexOf(c.Ratio) === -1){ Temp[Index]['Ratio'].push(c.Ratio)}\r\n                \r\n            })\r\n        })\r\n    })\r\n\r\n    Temp.map((client,i)=>{ ChartData.push({name:findClientName(client.name), value: fixNumber(client.Ratio.reduce((a, b) => a + b, 0)) })  })\r\n\r\n    return ChartData\r\n}\r\n\r\n\r\nexport  const Client_Split_by_WorkOrders=()=>{\r\n    \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE;\r\n\r\n    let Temp=[]\r\n    let ChartData=[]\r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        //console.log(model)\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n            model.ClientGroupedBy[key].map((c,ii)=>{\r\n            \r\n            /* ********************************** */       \r\n            // Run Filter\r\n            if(!RunFilter(c.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n            /* ********************************** */ \r\n\r\n                let Index = findIndex(Temp,{name:c.Customer})\r\n                if(Index === -1){ \r\n                    Temp.push({name:c.Customer})\r\n                    Index = findIndex(Temp,{name:c.Customer})\r\n                }\r\n                \r\n                if(Temp[Index]['WOS'] === undefined) { Temp[Index]['WOS']=[]; }\r\n                if(Temp[Index].WOS.indexOf(c.WOS) === -1){ Temp[Index]['WOS'].push(c.WOS)}\r\n                \r\n            })\r\n        })\r\n    })\r\n\r\n    Temp.map((client,i)=>{ ChartData.push({name:findClientName(client.name), value: fixNumber(client.WOS.reduce((a, b) => a + b, 0)) })  })\r\n\r\n    return ChartData\r\n}\r\n\r\n\r\n\r\nexport const CreateOBJ_Client_WO_Overtime=()=>{\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n  \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        //console.log(model)\r\n       \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        // loop\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n\r\n            // Run Loop\r\n            model.ClientGroupedBy[key].map((q,ii)=>{\r\n                let Index;\r\n\r\n                //console.log(q)\r\n                /* ********************************** */       \r\n                // Run Filter\r\n                if(!RunFilter(q.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n                /* ********************************** */ \r\n\r\n\r\n                Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                if(Index === -1){ \r\n                    Resources_Clients.push({name:(q.Date), UnixDate:q.UnixDate})\r\n                    Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                }\r\n               \r\n                if(Resources_Clients[Index][findClientName(key)] === undefined){\r\n                    Resources_Clients[Index][findClientName(key)] = fixNumber(q.WOS)\r\n                }else{\r\n                    Resources_Clients[Index][findClientName(key)] = fixNumber(Resources_Clients[Index][findClientName(key)] + fixNumber(q.WOS))\r\n                }\r\n                   \r\n               // Resources_Clients[Index][(q.Customer] = fixNumber(q.WOS)\r\n\r\n                if(Resources_Clients[Index][`Work Orders`] === undefined){\r\n                    Resources_Clients[Index][`Work Orders`] = fixNumber(q.WOS)\r\n                }\r\n                else{\r\n                    Resources_Clients[Index][`Work Orders`] = (fixNumber(Resources_Clients[Index][`Work Orders`]  +fixNumber(q.WOS)))\r\n                }\r\n\r\n            })\r\n        });\r\n    })\r\n    //console.log(Resources_Clients)\r\n   return Resources_Clients\r\n}\r\n\r\n\r\nexport const CreateOBJ_Client_ResourceAllocation_Overtime=()=>{\r\n\r\n    // Get Filters \r\n    const UX = store.getState().UX\r\n    const MODEL = store.getState().SCANSTATE\r\n\r\n    let Resources_Clients=[]\r\n  \r\n    MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n        //console.log(model)\r\n       \r\n        /* ********************************** */       \r\n        // Run Filter\r\n        if(!RunFilter(model.scanCategory,UX.AreaSelectFilter.ByClusterType)) return false\r\n        /* ********************************** */ \r\n\r\n        // loop\r\n        Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n\r\n            // Run Loop\r\n            model.ClientGroupedBy[key].map((q,ii)=>{\r\n                let Index;\r\n\r\n                //console.log(q)\r\n                /* ********************************** */       \r\n                // Run Filter\r\n                if(!RunFilter(q.Trade ,UX.AreaSelectFilter.ByResourceType)) return false\r\n                /* ********************************** */ \r\n\r\n\r\n                Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                if(Index === -1){ \r\n                    Resources_Clients.push({name:(q.Date), UnixDate:q.UnixDate})\r\n                    Index = findIndex(Resources_Clients,{name:(q.Date)})\r\n                }\r\n               \r\n                if(Resources_Clients[Index][findClientName(key)] === undefined){\r\n                    Resources_Clients[Index][findClientName(key)] = fixNumber(q.Ratio)\r\n                }else{\r\n                    Resources_Clients[Index][findClientName(key)] = fixNumber(Resources_Clients[Index][findClientName(key)] + fixNumber(q.Ratio))\r\n                }\r\n                   \r\n               // Resources_Clients[Index][(q.Customer] = fixNumber(q.WOS)\r\n\r\n                if(Resources_Clients[Index][`Resource Allocation`] === undefined){\r\n                    Resources_Clients[Index][`Resource Allocation`] = fixNumber(q.Ratio)\r\n                }\r\n                else{\r\n                    Resources_Clients[Index][`Resource Allocation`] = (fixNumber(Resources_Clients[Index][`Resource Allocation`]  + fixNumber(q.Ratio)))\r\n                }\r\n\r\n            })\r\n        });\r\n    })\r\n    //console.log(Resources_Clients)\r\n   return Resources_Clients\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrder_Radial_Charts.js",["1104"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n\r\nimport {CreateRadial_ResourcesAgainstClusters,WorkOrderCompletion} from \"actions/CreateSingleViewModel\"\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n// Chart\r\nimport PieChart from \"venders/apexCharts/SimplePie\";\r\nimport RadialSIngleChart from \"venders/apexCharts/RadialSIngleChart\";\r\n\r\nconst Chart1={\r\n    Icon:'radial',\r\n    Header:\"Resources Allocation to Cluster Type\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"The Radial Graph shows the number of Resource Allocations by Cluster Type in a given model. Use the 'Cluster Type' filter to find Resource Allocation numbers for a specific resource.\"\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const MODELCENTER = SCAN.SelectedModel.STOREMARKERCENTERPOINTS\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    useEffect(()=>{ \r\n        setCategoryOccurance(CreateRadial_ResourcesAgainstClusters(MODELCENTER))  \r\n    },[UX,SCAN]) \r\n    \r\n    return(\r\n  \r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                    <ChartHeader \r\n                        Icon={Chart1.Icon}\r\n                        Header={Chart1.Header}\r\n                        Tip={Chart1.Tip}\r\n                        Copy={Chart1.Copy}\r\n                    />\r\n                    <RadialSIngleChart Data={CategoryOccurance} term={`Resource Allocation`}/>\r\n                </div>\r\n                <div>\r\n                 <ChartHeader \r\n                    Icon='pie'\r\n                    Header=\"Work orders covered in Model\"\r\n                    Copy=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.\"\r\n                />\r\n                    <PieChart Data={[\r\n                        { name: 'Work Order Completed',value: WorkOrderCompletion()[0]}, \r\n                        { name: 'Out of Scope', value:WorkOrderCompletion()[1] }]}\r\n                    />\r\n                </div>\r\n            </div>\r\n  \r\n    )\r\n}\r\n\r\nexport default Trade_Radial_Charts;\r\n\r\n/*\r\n\r\n <div>\r\n                 <ChartHeader \r\n                  Icon='pie'\r\n                    Header=\"Sites covered in Model\"\r\n                    Copy=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.\"\r\n                />\r\n                    <PieChart Data={[{ name: 'Work Order Completed', value: NumSites }, { name: 'Out of Scope', value: gl(MODEL.USERSELECTEDLIST)-NumSites }]}/>\r\n                </div>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Radial_Clients.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_AllocationOverTime.js",["1105","1106"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {CreateOBJ_ResourcesAgainstDates} from \"actions/CreateSingleViewModel\"\r\nimport {colorArray} from \"actions/HandleUX\";\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n\r\nimport {orderBy} from 'lodash'\r\n\r\nimport {\r\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n  } from 'recharts';\r\n\r\nconst Chart1={\r\n    Icon:'bar',\r\n    Header:\"Resources Allocation over time\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`The Bar Graph shows the number of Resource Allocations over the time period of the Model. \r\n        Use the 'Cluster Type' and 'Resource type' filters to filter the chart to a specific Recourse or cluster type`\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    useEffect(()=>{  setCategoryOccurance(CreateOBJ_ResourcesAgainstDates())   },[UX]) \r\n    \r\n    useEffect(()=>{\r\n        console.log(orderBy(CategoryOccurance,'UnixDate'))\r\n     },[CategoryOccurance])\r\n\r\n    return(\r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                    <ChartHeader \r\n                        Icon={Chart1.Icon}\r\n                        Header={Chart1.Header} \r\n                        Tip={Chart1.Tip} \r\n                        Copy={Chart1.Copy}\r\n                    />\r\n                \r\n                    <div style={{ width: '100%', height: 400 }}>\r\n                        <ResponsiveContainer>\r\n                            <BarChart\r\n                                data={orderBy(CategoryOccurance,'UnixDate')}\r\n                                margin={{\r\n                                top: 5, right: 0, left: 0, bottom: 5,\r\n                                }}\r\n                            >\r\n                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                <XAxis dataKey=\"name\" />\r\n                                <YAxis />\r\n                                <Tooltip />\r\n                                <Legend />              \r\n                                    <Bar dataKey={UX.AreaSelectFilter.ByResourceType} fill={colorArray[0]} />\r\n                                 \r\n                            \r\n                            </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default Trade_Radial_Charts;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Specific_ClientBreakdown.js",["1107","1108"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {CreateOBJ_ResourcesAgainstClients, CreateObj_Clustertype_ResourceAllocation} from \"actions/CreateSingleViewModel\"\r\nimport {colorArray} from \"actions/HandleUX\";\r\n\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\nimport { ResponsiveContainer,PieChart, Pie,Legend, Tooltip,Cell, FunnelChart, Funnel,LabelList} from 'recharts';\r\n\r\nconst Chart1={\r\n    Icon:'pie',\r\n    Header:\"Resource Breakdown by Client\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`This chart shows the breakdown of selected resource by Allocation spread over the clients in the Model`\r\n}\r\n\r\nconst Chart2={\r\n    Icon:'bar',\r\n    Header:\"Cluster Funnel\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`The funnel below shows the Resource Allocation for the selected Trade type against the Cluster Types`\r\n}\r\n\r\nconst Resources_Client_Brekdown=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    useEffect(()=>{   },[UX]) \r\n\r\n    return(\r\n            <div className=\"resultCharts\">\r\n                        <DisplayPie />\r\n                        <DisplayFunnel />\r\n            </div>\r\n    )\r\n}\r\nexport default Resources_Client_Brekdown;\r\n\r\n\r\n\r\nconst DisplayPie = ()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n    useEffect(()=>{   \r\n        setCategoryOccurance(CreateOBJ_ResourcesAgainstClients())  \r\n    console.log(CategoryOccurance)},[UX]) \r\n\r\n    return(\r\n                <div>   \r\n                    <ChartHeader Icon={Chart1.Icon} Header={Chart1.Header}Tip={Chart1.Tip} Copy={Chart1.Copy} />\r\n                \r\n                    <div style={{ width: '100%', height: 400 }}>\r\n                        <ResponsiveContainer width='100%' height={300}>\r\n                                <PieChart >\r\n                                    <Pie dataKey=\"Sum\" isAnimationActive={false} data={CategoryOccurance}  outerRadius={80} fill=\"#ffbf00\" label >\r\n                                    {\r\n                                        CategoryOccurance.map((entry, index) => (\r\n                                        <Cell key={`cell-${index}`} fill={colorArray[index]}/>\r\n                                        ))\r\n                                    }   \r\n                                </Pie>\r\n                                <Tooltip />\r\n                                <Legend /> \r\n                            </PieChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                   \r\n                </div>\r\n    )\r\n}\r\n\r\nconst DisplayFunnel=()=>{\r\n    const UX = useContext_UX_FULL();\r\n    const [ClusterOccurances,setClusterOccurances ] = useState([[]]) \r\n    useEffect(()=>{  setClusterOccurances(CreateObj_Clustertype_ResourceAllocation())},[UX]) \r\n\r\n    return(\r\n        <div>\r\n            <ChartHeader Icon={Chart2.Icon} Header={Chart2.Header}Tip={Chart2.Tip} Copy={Chart2.Copy} />\r\n    \r\n            <ResponsiveContainer width='100%' height={300}>\r\n            <FunnelChart >\r\n                <Tooltip />\r\n                <Funnel\r\n                    dataKey={`Resource_${UX.AreaSelectFilter.ByResourceType}`}\r\n                    data={ClusterOccurances}\r\n                    isAnimationActive\r\n                >\r\n                    <LabelList position=\"center\" fill={colorArray[0]} stroke=\"none\" dataKey=\"name\" />\r\n                </Funnel>\r\n                </FunnelChart>\r\n                </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Trade_Specific_Overview.js",["1109","1110","1111","1112","1113","1114"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {colorArray} from \"actions/HandleUX\";\r\n\r\nimport {CreateRadial_ResourcesAgainstClusters} from \"actions/CreateSingleViewModel\"\r\nimport {H1,H2,H4,P} from \"Pages/Auth/Components/Type\";\r\nimport {find} from 'lodash'\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const [tradeVolume, setTradeVolume] = useState(0)\r\n\r\n    useEffect(()=>{ \r\n        console.log(SCAN.SelectedModel.STOREMARKERCENTERPOINTS) \r\n        let SetVolume = (CreateRadial_ResourcesAgainstClusters())\r\n        let FindObj = find(SetVolume, function(o) { return o.name == UX.AreaSelectFilter.ByResourceType; });\r\n        setTradeVolume(FindObj)\r\n    },[UX]) \r\n    \r\n\r\n    return( \r\n            <div >\r\n                <H4 Copy={` Resource Type Selected : ${tradeVolume.name}`}/>\r\n                <H4 Copy={`Resource Allocation : ${tradeVolume.value}`}/>\r\n                \r\n            </div>\r\n    )\r\n}\r\nexport default Trade_Radial_Charts;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_Basic_Differences.js",["1115","1116","1117","1118","1119"],"import React, {useEffect, useState} from 'react'\r\n// Context\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\n// Actions\r\nimport {Client_Split_by_Resources, Client_Split_by_Site, Client_Split_by_WorkOrders } from \"actions/CreateSingleViewModel\"\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n// Chart\r\nimport PieChart from \"venders/apexCharts/SimplePie\";\r\n\r\nimport {findIndex} from 'lodash'\r\n\r\nconst Chart1={\r\n    Icon:'pie',\r\n    Header:\"By Resource Allocation\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"Graph shows the Resource Allocation to each client within the Model\"\r\n}\r\n\r\nconst Chart2={\r\n    Icon:'pie',\r\n    Header:\"By Location\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"Graph shows the site distribution by client over the Model \"\r\n}\r\n\r\nconst Chart3={\r\n    Icon:'pie',\r\n    Header:\"By Workorders\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"Graph shows the Work Order distribution by client over the Model \"\r\n}\r\n\r\nconst Locations_Radial_Pie_Charts=()=>{\r\n    const UX = useContext_UX_FULL(); \r\n    const MODEL = useContext_SCAN_FULL()\r\n    \r\n    const [ClientResources,setClientResources ] = useState([[]]) \r\n    const [ClientSites,setClientSites ] = useState([[]]) \r\n    const [ClientWorkOrders,setClientWorkOrders ] = useState([[]]) \r\n    \r\n\r\n    const Client_Split_by_Resourcesssss=()=>{\r\n        \r\n        let Temp=[]\r\n        let ChartData=[]\r\n        MODEL.SelectedModel.STOREMARKERCENTERPOINTS.map((model,i)=>{\r\n            //console.log(model)\r\n            Object.keys(model.ClientGroupedBy).map(function(key, index) {\r\n                model.ClientGroupedBy[key].map((c,ii)=>{\r\n                    //console.log(c.Customer)\r\n\r\n                    let Index = findIndex(Temp,{name:c.Customer})\r\n                    if(Index === -1){ \r\n                        Temp.push({name:c.Customer})\r\n                        Index = findIndex(Temp,{name:c.Customer})\r\n                    }\r\n                    \r\n                    if(Temp[Index]['Ratio'] === undefined) { Temp[Index]['Ratio']=[]; }\r\n                    if(Temp[Index].Ratio.indexOf(c.Ratio) === -1){ Temp[Index]['Ratio'].push(c.Ratio)}\r\n                    \r\n                })\r\n            })\r\n        })\r\n\r\n        Temp.map((client,i)=>{ ChartData.push({name:client.name, value:client.Ratio.reduce((a, b) => a + b, 0)}) })\r\n\r\n        return ChartData\r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{ \r\n        setClientResources(Client_Split_by_Resources())\r\n        setClientSites(Client_Split_by_Site())\r\n        setClientWorkOrders(Client_Split_by_WorkOrders())\r\n        \r\n    },[UX]) \r\n    \r\n \r\n    return(\r\n        <div className=\"resultCharts\">\r\n            <div>\r\n                <ChartHeader Icon={Chart1.Icon} Header={Chart1.Header}  Copy={Chart1.Copy} Tip={Chart1.Tip} />\r\n                \r\n                <PieChart Data={ClientResources}/>\r\n            </div>\r\n            <div>\r\n                <ChartHeader Icon={Chart2.Icon} Header={Chart2.Header}  Copy={Chart2.Copy} Tip={Chart2.Tip} />\r\n                <PieChart Data={ClientSites}/>\r\n            </div> \r\n            <div>\r\n                <ChartHeader Icon={Chart3.Icon} Header={Chart3.Header}  Copy={Chart3.Copy} Tip={Chart3.Tip} />\r\n                <PieChart Data={ClientWorkOrders}/>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\nexport default Locations_Radial_Pie_Charts;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Clients_Site_Resource_StatsBar.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_WorkordersOverTime.js",["1120","1121","1122","1123","1124"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {CreateOBJ_Client_WO_Overtime} from \"actions/CreateSingleViewModel\"\r\nimport {colorArray} from \"actions/HandleUX\";\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n\r\nimport {orderBy} from 'lodash'\r\n\r\nimport {\r\n    ComposedChart, Line, Area, BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n  } from 'recharts';\r\n\r\n\r\nconst Chart1={\r\n    Icon:'bar',\r\n    Header:\"Client work orders over time\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`This Composition chart shows the selected clients work order distribution over time against the total work orders in the Model\r\n            Use the filters to dive deeper into a resource or cluster type`\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    const Ignore=['UnixDate','name','Work Orders']\r\n\r\n    const FindLabels = ()=>{\r\n        let Labels=[]  \r\n        CategoryOccurance.map((item,i)=>{\r\n            //console.log(item, 'name')\r\n              \r\n            Object.keys(item).map((key,ii)=>{\r\n                    if(Ignore.indexOf(key) === -1){\r\n                        if(Labels.indexOf(key) === -1){\r\n                            Labels.push(key)\r\n                        } \r\n                    }\r\n                })\r\n                //console.log(Labels)\r\n         })\r\n\r\n         return Labels;\r\n    }\r\n\r\n    useEffect(()=>{  setCategoryOccurance(CreateOBJ_Client_WO_Overtime())   },[UX]) \r\n    \r\n    useEffect(()=>{\r\n     \r\n     },[CategoryOccurance])\r\n\r\n    return(\r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                        <ChartHeader \r\n                            Icon={Chart1.Icon}\r\n                            Header={Chart1.Header}  \r\n                            Tip={Chart1.Tip} \r\n                            Copy={Chart1.Copy}\r\n                        />\r\n                \r\n                        <div style={{ width: '100%', height: 400 }}>\r\n                            <ResponsiveContainer>\r\n                                <ComposedChart\r\n                                    data={orderBy(CategoryOccurance,'UnixDate')}\r\n                                    margin={{\r\n                                    top: 5, right: 0, left: 0, bottom: 5,\r\n                                    }}\r\n                                >\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"name\" />\r\n                                    <YAxis />\r\n                                    <Tooltip />\r\n                                    <Legend />\r\n                                        <Bar dataKey={'Work Orders'} opacity={0.3} fill={colorArray[3]} />\r\n                                        {\r\n                                            FindLabels().map((label,i)=>{\r\n                                                return(\r\n                                                    <Line type=\"monotone\" dataKey={label} stroke={colorArray[i]} />\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                </ComposedChart>\r\n                            </ResponsiveContainer>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default Trade_Radial_Charts;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\WorkOrders_OverTime.js",["1125","1126"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {CreateOBJ_WO_Overtime} from \"actions/CreateSingleViewModel\"\r\nimport {colorArray} from \"actions/HandleUX\";\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n\r\nimport {orderBy} from 'lodash'\r\n\r\nimport {\r\n    BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n  } from 'recharts';\r\n\r\nconst Chart1={\r\n    Icon:'bar',\r\n    Header:\"Workorders\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`The Bar Graph shows the number of Resource Allocations over the time period of the Model. \r\n        Use the 'Cluster Type' and 'Resource type' filters to filter the chart to a specific Recourse or cluster type`\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    useEffect(()=>{  setCategoryOccurance(CreateOBJ_WO_Overtime())   },[UX]) \r\n    \r\n    useEffect(()=>{\r\n        //console.log(CategoryOccurance)\r\n     },[CategoryOccurance])\r\n\r\n    return(\r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                    <ChartHeader \r\n                        Icon={Chart1.Icon}\r\n                        Header={Chart1.Header} \r\n                        Tip={Chart1.Tip} \r\n                        Copy={Chart1.Copy}\r\n                    />\r\n                \r\n                    <div style={{ width: '100%', height: 400 }}>\r\n                        <ResponsiveContainer>\r\n                            <BarChart\r\n                                data={orderBy(CategoryOccurance,'UnixDate')}\r\n                                margin={{\r\n                                top: 5, right: 0, left: 0, bottom: 5,\r\n                                }}\r\n                            >\r\n                                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                <XAxis dataKey=\"name\" />\r\n                                <YAxis />\r\n                                <Tooltip />\r\n                                <Legend />              \r\n                                    <Bar dataKey={'Work Orders'} fill={colorArray[0]} />\r\n                                 \r\n                            \r\n                            </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default Trade_Radial_Charts;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_ResourceAllocationOverTime.js",["1127","1128","1129","1130","1131"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {CreateOBJ_Client_ResourceAllocation_Overtime} from \"actions/CreateSingleViewModel\"\r\nimport {colorArray} from \"actions/HandleUX\";\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n\r\nimport {orderBy} from 'lodash'\r\n\r\nimport {\r\n    ComposedChart, Line, Area, BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n  } from 'recharts';\r\n\r\n\r\nconst Chart1={\r\n    Icon:'bar',\r\n    Header:\"Clients Resource Allocation over time\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:`This Composition chart shows the selected clients Resource Allocation over time against the total Resource Allocation in the Model\r\n            Use the filters to dive deeper into a resource or cluster type`\r\n}\r\n\r\n\r\nconst Trade_Radial_Charts=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n\r\n    const Ignore=['UnixDate','name','Resource Allocation']\r\n\r\n    const FindLabels = ()=>{\r\n        let Labels=[]  \r\n        CategoryOccurance.map((item,i)=>{\r\n            //console.log(item, 'name')\r\n              \r\n            Object.keys(item).map((key,ii)=>{\r\n                    if(Ignore.indexOf(key) === -1){\r\n                        if(Labels.indexOf(key) === -1){\r\n                            Labels.push(key)\r\n                        } \r\n                    }\r\n                })\r\n                //console.log(Labels)\r\n         })\r\n\r\n         return Labels;\r\n    }\r\n\r\n    useEffect(()=>{  setCategoryOccurance(CreateOBJ_Client_ResourceAllocation_Overtime())   },[UX]) \r\n    \r\n    useEffect(()=>{\r\n     \r\n     },[CategoryOccurance])\r\n\r\n    return(\r\n            <div className=\"resultCharts\">\r\n                <div>\r\n                        <ChartHeader \r\n                            Icon={Chart1.Icon}\r\n                            Header={Chart1.Header}  \r\n                            Tip={Chart1.Tip} \r\n                            Copy={Chart1.Copy}\r\n                        />\r\n                \r\n                        <div style={{ width: '100%', height: 400 }}>\r\n                            <ResponsiveContainer>\r\n                                <ComposedChart\r\n                                    data={orderBy(CategoryOccurance,'UnixDate')}\r\n                                    margin={{\r\n                                    top: 5, right: 0, left: 0, bottom: 5,\r\n                                    }}\r\n                                >\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"name\" />\r\n                                    <YAxis />\r\n                                    <Tooltip />\r\n                                    <Legend />\r\n                                        <Bar dataKey={`Resource Allocation`} opacity={0.3} fill={colorArray[3]} />\r\n                                        {\r\n                                            FindLabels().map((label,i)=>{\r\n                                                return(\r\n                                                    <Line type=\"monotone\" dataKey={label} stroke={colorArray[i]} />\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                </ComposedChart>\r\n                            </ResponsiveContainer>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default Trade_Radial_Charts;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\Components\\selects\\SelectClient.js",["1132"],"import React, { useEffect, useState } from 'react';\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"Context/SCAN\";\r\nimport {SetFilterClient } from \"actions/HandleUX\";\r\nimport {FindClientList} from \"actions/CreateSingleViewModel\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport {findClientName} from \"actions/ClusterAnalysis\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }));\r\n  /* ************************************************** */\r\nconst ByResourceType = ()=>{\r\n\r\n    const MODEL = useContext_SCAN_FULL()\r\n    const UX = useContext_UX_FULL()\r\n    \r\n    const [type,setType] = useState(UX.AreaSelectFilter.ByClient) \r\n    const Clients = FindClientList()\r\n    const classes = useStyles();\r\n\r\n\r\n    const handleChange = (event) => { \r\n        //console.log(event.target.value)\r\n        \r\n        setType(event.target.value)\r\n        SetFilterClient(event.target.value)\r\n        //StoreCompareItem(event.target.value, pos)\r\n    };\r\n\r\n  \r\n   \r\n\r\n    useEffect(()=>{ \r\n        \r\n        console.log(UX.AreaSelectFilter.ByClient)\r\n        setType(UX.AreaSelectFilter.ByResourceType)\r\n       \r\n    },[UX])\r\n\r\n  \r\n\r\n    return(\r\n        <FormControl variant=\"outlined\" className={`${classes.formControl} Map_Filters`}>\r\n        <InputLabel id=\"ByTier\">Select Client</InputLabel>\r\n             <Select\r\n                labelId=\"ByTier\"\r\n                id=\"ByTier-outlined\"\r\n                value={type}\r\n                onChange={handleChange}\r\n                label=\"Select Client\"\r\n            >\r\n                <MenuItem value={null}> <em>All</em> </MenuItem>\r\n\r\n                {\r\n                    Clients.map((client,i)=>{\r\n                        return(\r\n                            <MenuItem  value={client}>{findClientName(client)}</MenuItem>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default ByResourceType;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Auth\\SingleModelResult\\components\\Client_ResourceDistribution.js",["1133","1134","1135","1136","1137"],"import React, {useEffect, useState} from 'react'\r\n// Context\r\nimport {useContext_UX_FULL} from \"Context/UX\";\r\n// Actions\r\nimport {ChartData_ClustersBy_ResourceType, ChartData_SitesInScope, CreateObj_Clustertype_ResourceAllocation} from \"actions/CreateSingleViewModel\"\r\n// Layout\r\nimport ChartHeader from \"Pages/Auth/Components/Layout/ChartHeader\";\r\n// Chart\r\n//import PieChart from \"venders/apexCharts/SimplePie\";\r\nimport RadialSIngleChart from \"venders/apexCharts/RadialSIngleChart\";\r\nimport { ResponsiveContainer,PieChart, Pie,Legend, Tooltip,Cell, FunnelChart, Funnel,LabelList} from 'recharts';\r\nimport {colorArray} from \"actions/HandleUX\";\r\n\r\nconst Chart1={\r\n    Icon:'radial',\r\n    Header:\"Clusters as a Radial\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"The Radial Graph shows the number of clusters per cluster type in a given model. Use the 'Resource Type' filter to find cluster numbers fopr a specific resource.\"\r\n}\r\n\r\nconst Chart2={\r\n    Icon:'pie',\r\n    Header:\"Sites covered in Model\",\r\n    Tip:\"Use the Filters\",\r\n    Copy:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.\"\r\n}\r\n\r\nconst Locations_Radial_Pie_Charts=()=>{\r\n    const UX = useContext_UX_FULL(); \r\n    const [CategoryOccurance,setCategoryOccurance ] = useState([[]]) \r\n    const [PieNumbers,setPieNumbers ] = useState([[]]) \r\n    \r\n    useEffect(()=>{  \r\n        setCategoryOccurance(ChartData_ClustersBy_ResourceType())\r\n        setPieNumbers(ChartData_SitesInScope()) \r\n    },[UX]) \r\n    \r\n    useEffect(()=>{ },[CategoryOccurance,PieNumbers])\r\n    return(\r\n        <div className=\"resultCharts\">\r\n            <div>\r\n                <ChartHeader Icon={Chart1.Icon} Header={Chart1.Header}  Copy={Chart1.Copy} Tip={Chart1.Tip} />\r\n                <RadialSIngleChart Data={CategoryOccurance} term={`Clusters`}/>\r\n            </div>\r\n            <div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Locations_Radial_Pie_Charts;\r\n\r\n// <DisplayFunnel />\r\nconst DisplayFunnel=()=>{\r\n    const UX = useContext_UX_FULL();\r\n    const [ClusterOccurances,setClusterOccurances ] = useState([[]]) \r\n    useEffect(()=>{  setClusterOccurances(CreateObj_Clustertype_ResourceAllocation())},[UX]) \r\n\r\n    return(\r\n        <div>\r\n            <ChartHeader Icon={Chart2.Icon} Header={Chart2.Header}Tip={Chart2.Tip} Copy={Chart2.Copy} />\r\n    \r\n            <ResponsiveContainer width='100%' height={300}>\r\n            <FunnelChart >\r\n                <Tooltip />\r\n                <Funnel\r\n                    dataKey={`Resource_${UX.AreaSelectFilter.ByResourceType}`}\r\n                    data={ClusterOccurances}\r\n                    isAnimationActive\r\n                >\r\n                    <LabelList position=\"center\" fill={colorArray[0]} stroke=\"none\" dataKey=\"name\" />\r\n                </Funnel>\r\n                </FunnelChart>\r\n                </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}",{"ruleId":"1138","severity":1,"message":"1139","line":22,"column":7,"nodeType":"1140","messageId":"1141","endLine":22,"endColumn":15},{"ruleId":"1142","replacedBy":"1143"},{"ruleId":"1144","replacedBy":"1145"},{"ruleId":"1146","severity":1,"message":"1147","line":153,"column":42,"nodeType":"1148","messageId":"1149","endLine":153,"endColumn":44},{"ruleId":"1150","severity":1,"message":"1151","line":16,"column":15,"nodeType":"1152","messageId":"1153","endLine":16,"endColumn":17},{"ruleId":"1150","severity":1,"message":"1151","line":16,"column":33,"nodeType":"1152","messageId":"1153","endLine":16,"endColumn":35},{"ruleId":"1150","severity":1,"message":"1151","line":31,"column":17,"nodeType":"1152","messageId":"1153","endLine":31,"endColumn":19},{"ruleId":"1150","severity":1,"message":"1151","line":32,"column":17,"nodeType":"1152","messageId":"1153","endLine":32,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1154","line":287,"column":12,"nodeType":"1140","messageId":"1141","endLine":287,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1147","line":290,"column":43,"nodeType":"1148","messageId":"1149","endLine":290,"endColumn":45},{"ruleId":"1146","severity":1,"message":"1155","line":332,"column":73,"nodeType":"1156","messageId":"1157","endLine":332,"endColumn":82},{"ruleId":"1146","severity":1,"message":"1147","line":342,"column":26,"nodeType":"1148","messageId":"1149","endLine":342,"endColumn":28},{"ruleId":"1158","severity":1,"message":"1159","line":26,"column":22,"nodeType":"1160","endLine":26,"endColumn":26,"suggestions":"1161"},{"ruleId":"1146","severity":1,"message":"1147","line":83,"column":33,"nodeType":"1148","messageId":"1149","endLine":83,"endColumn":35},{"ruleId":"1146","severity":1,"message":"1147","line":85,"column":44,"nodeType":"1148","messageId":"1149","endLine":85,"endColumn":46},{"ruleId":"1138","severity":1,"message":"1162","line":108,"column":17,"nodeType":"1140","messageId":"1141","endLine":108,"endColumn":30},{"ruleId":"1163","severity":1,"message":"1164","line":128,"column":11,"nodeType":"1165","messageId":"1166","endLine":128,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":131,"column":11,"nodeType":"1165","messageId":"1166","endLine":131,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":134,"column":11,"nodeType":"1165","messageId":"1166","endLine":134,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":137,"column":11,"nodeType":"1165","messageId":"1166","endLine":137,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":140,"column":11,"nodeType":"1165","messageId":"1166","endLine":140,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":143,"column":11,"nodeType":"1165","messageId":"1166","endLine":143,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":146,"column":11,"nodeType":"1165","messageId":"1166","endLine":146,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":149,"column":11,"nodeType":"1165","messageId":"1166","endLine":149,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":152,"column":11,"nodeType":"1165","messageId":"1166","endLine":152,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":155,"column":11,"nodeType":"1165","messageId":"1166","endLine":155,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":158,"column":11,"nodeType":"1165","messageId":"1166","endLine":158,"endColumn":17},{"ruleId":"1167","severity":1,"message":"1168","line":193,"column":3,"nodeType":"1169","messageId":"1170","endLine":219,"endColumn":4},{"ruleId":"1163","severity":1,"message":"1164","line":196,"column":13,"nodeType":"1165","messageId":"1166","endLine":196,"endColumn":19},{"ruleId":"1163","severity":1,"message":"1164","line":199,"column":9,"nodeType":"1165","messageId":"1166","endLine":199,"endColumn":15},{"ruleId":"1163","severity":1,"message":"1164","line":202,"column":11,"nodeType":"1165","messageId":"1166","endLine":202,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":205,"column":11,"nodeType":"1165","messageId":"1166","endLine":205,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":208,"column":11,"nodeType":"1165","messageId":"1166","endLine":208,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":211,"column":11,"nodeType":"1165","messageId":"1166","endLine":211,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":214,"column":11,"nodeType":"1165","messageId":"1166","endLine":214,"endColumn":17},{"ruleId":"1163","severity":1,"message":"1164","line":217,"column":11,"nodeType":"1165","messageId":"1166","endLine":217,"endColumn":17},{"ruleId":"1150","severity":1,"message":"1151","line":285,"column":16,"nodeType":"1152","messageId":"1153","endLine":285,"endColumn":18},{"ruleId":"1150","severity":1,"message":"1171","line":285,"column":31,"nodeType":"1152","messageId":"1153","endLine":285,"endColumn":33},{"ruleId":"1150","severity":1,"message":"1151","line":289,"column":14,"nodeType":"1152","messageId":"1153","endLine":289,"endColumn":16},{"ruleId":"1150","severity":1,"message":"1171","line":289,"column":31,"nodeType":"1152","messageId":"1153","endLine":289,"endColumn":33},{"ruleId":"1150","severity":1,"message":"1171","line":296,"column":41,"nodeType":"1152","messageId":"1153","endLine":296,"endColumn":43},{"ruleId":"1158","severity":1,"message":"1172","line":24,"column":22,"nodeType":"1160","endLine":24,"endColumn":28,"suggestions":"1173"},{"ruleId":"1138","severity":1,"message":"1174","line":3,"column":18,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":22},{"ruleId":"1142","replacedBy":"1175"},{"ruleId":"1144","replacedBy":"1176"},{"ruleId":"1146","severity":1,"message":"1147","line":33,"column":26,"nodeType":"1148","messageId":"1149","endLine":33,"endColumn":28},{"ruleId":"1138","severity":1,"message":"1177","line":71,"column":11,"nodeType":"1140","messageId":"1141","endLine":71,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1147","line":73,"column":29,"nodeType":"1148","messageId":"1149","endLine":73,"endColumn":31},{"ruleId":"1146","severity":1,"message":"1147","line":105,"column":24,"nodeType":"1148","messageId":"1149","endLine":105,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1147","line":106,"column":35,"nodeType":"1148","messageId":"1149","endLine":106,"endColumn":37},{"ruleId":"1146","severity":1,"message":"1147","line":112,"column":53,"nodeType":"1148","messageId":"1149","endLine":112,"endColumn":55},{"ruleId":"1146","severity":1,"message":"1147","line":122,"column":26,"nodeType":"1148","messageId":"1149","endLine":122,"endColumn":28},{"ruleId":"1146","severity":1,"message":"1147","line":140,"column":29,"nodeType":"1148","messageId":"1149","endLine":140,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1178","line":150,"column":7,"nodeType":"1140","messageId":"1141","endLine":150,"endColumn":22},{"ruleId":"1146","severity":1,"message":"1147","line":152,"column":24,"nodeType":"1148","messageId":"1149","endLine":152,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1147","line":160,"column":40,"nodeType":"1148","messageId":"1149","endLine":160,"endColumn":42},{"ruleId":"1150","severity":1,"message":"1171","line":163,"column":19,"nodeType":"1152","messageId":"1153","endLine":163,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1179","line":178,"column":9,"nodeType":"1140","messageId":"1141","endLine":178,"endColumn":17},{"ruleId":"1146","severity":1,"message":"1147","line":192,"column":34,"nodeType":"1148","messageId":"1149","endLine":192,"endColumn":36},{"ruleId":"1146","severity":1,"message":"1147","line":196,"column":37,"nodeType":"1148","messageId":"1149","endLine":196,"endColumn":39},{"ruleId":"1150","severity":1,"message":"1151","line":213,"column":94,"nodeType":"1152","messageId":"1153","endLine":213,"endColumn":96},{"ruleId":"1150","severity":1,"message":"1171","line":215,"column":30,"nodeType":"1152","messageId":"1153","endLine":215,"endColumn":32},{"ruleId":"1138","severity":1,"message":"1180","line":267,"column":9,"nodeType":"1140","messageId":"1141","endLine":267,"endColumn":27},{"ruleId":"1146","severity":1,"message":"1147","line":269,"column":28,"nodeType":"1148","messageId":"1149","endLine":269,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1147","line":287,"column":27,"nodeType":"1148","messageId":"1149","endLine":287,"endColumn":29},{"ruleId":"1146","severity":1,"message":"1147","line":289,"column":37,"nodeType":"1148","messageId":"1149","endLine":289,"endColumn":39},{"ruleId":"1146","severity":1,"message":"1147","line":303,"column":25,"nodeType":"1148","messageId":"1149","endLine":303,"endColumn":27},{"ruleId":"1146","severity":1,"message":"1147","line":305,"column":35,"nodeType":"1148","messageId":"1149","endLine":305,"endColumn":37},{"ruleId":"1181","severity":1,"message":"1182","line":5,"column":13,"nodeType":"1183","endLine":5,"endColumn":73},{"ruleId":"1181","severity":1,"message":"1182","line":9,"column":13,"nodeType":"1183","endLine":9,"endColumn":79},{"ruleId":"1150","severity":1,"message":"1151","line":6,"column":15,"nodeType":"1152","messageId":"1153","endLine":6,"endColumn":17},{"ruleId":"1150","severity":1,"message":"1151","line":6,"column":33,"nodeType":"1152","messageId":"1153","endLine":6,"endColumn":35},{"ruleId":"1150","severity":1,"message":"1151","line":21,"column":17,"nodeType":"1152","messageId":"1153","endLine":21,"endColumn":19},{"ruleId":"1150","severity":1,"message":"1151","line":22,"column":17,"nodeType":"1152","messageId":"1153","endLine":22,"endColumn":19},{"ruleId":"1146","severity":1,"message":"1147","line":59,"column":35,"nodeType":"1148","messageId":"1149","endLine":59,"endColumn":37},{"ruleId":"1184","severity":1,"message":"1185","line":108,"column":28,"nodeType":"1186","messageId":"1187","endLine":108,"endColumn":30},{"ruleId":"1184","severity":1,"message":"1185","line":108,"column":58,"nodeType":"1186","messageId":"1187","endLine":108,"endColumn":60},{"ruleId":"1146","severity":1,"message":"1147","line":119,"column":42,"nodeType":"1148","messageId":"1149","endLine":119,"endColumn":44},{"ruleId":"1146","severity":1,"message":"1147","line":145,"column":29,"nodeType":"1148","messageId":"1149","endLine":145,"endColumn":31},{"ruleId":"1146","severity":1,"message":"1147","line":146,"column":47,"nodeType":"1148","messageId":"1149","endLine":146,"endColumn":49},{"ruleId":"1146","severity":1,"message":"1188","line":231,"column":46,"nodeType":"1148","messageId":"1157","endLine":231,"endColumn":48},{"ruleId":"1150","severity":1,"message":"1151","line":245,"column":87,"nodeType":"1152","messageId":"1153","endLine":245,"endColumn":89},{"ruleId":"1146","severity":1,"message":"1147","line":295,"column":29,"nodeType":"1148","messageId":"1149","endLine":295,"endColumn":31},{"ruleId":"1150","severity":1,"message":"1151","line":297,"column":80,"nodeType":"1152","messageId":"1153","endLine":297,"endColumn":82},{"ruleId":"1146","severity":1,"message":"1147","line":50,"column":26,"nodeType":"1148","messageId":"1149","endLine":50,"endColumn":28},{"ruleId":"1138","severity":1,"message":"1189","line":183,"column":7,"nodeType":"1140","messageId":"1141","endLine":183,"endColumn":15},{"ruleId":"1158","severity":1,"message":"1190","line":15,"column":73,"nodeType":"1160","endLine":15,"endColumn":79,"suggestions":"1191"},{"ruleId":"1158","severity":1,"message":"1190","line":58,"column":8,"nodeType":"1160","endLine":58,"endColumn":14,"suggestions":"1192"},{"ruleId":"1146","severity":1,"message":"1193","line":63,"column":43,"nodeType":"1156","messageId":"1149","endLine":63,"endColumn":51},{"ruleId":"1158","severity":1,"message":"1194","line":71,"column":41,"nodeType":"1160","endLine":71,"endColumn":58,"suggestions":"1195"},{"ruleId":"1158","severity":1,"message":"1196","line":94,"column":7,"nodeType":"1160","endLine":94,"endColumn":9,"suggestions":"1197"},{"ruleId":"1138","severity":1,"message":"1198","line":136,"column":11,"nodeType":"1140","messageId":"1141","endLine":136,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1199","line":138,"column":12,"nodeType":"1140","messageId":"1141","endLine":138,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1200","line":138,"column":24,"nodeType":"1140","messageId":"1141","endLine":138,"endColumn":37},{"ruleId":"1158","severity":1,"message":"1190","line":149,"column":8,"nodeType":"1160","endLine":149,"endColumn":14,"suggestions":"1201"},{"ruleId":"1138","severity":1,"message":"1202","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1203","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1204","line":9,"column":8,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1205","line":11,"column":8,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":23},{"ruleId":"1158","severity":1,"message":"1206","line":25,"column":22,"nodeType":"1160","endLine":25,"endColumn":28,"suggestions":"1207"},{"ruleId":"1138","severity":1,"message":"1208","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1209","line":3,"column":8,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1210","line":10,"column":8,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1208","line":12,"column":8,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1211","line":56,"column":11,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1213","line":4,"column":22,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":32},{"ruleId":"1158","severity":1,"message":"1190","line":11,"column":7,"nodeType":"1160","endLine":11,"endColumn":11,"suggestions":"1214"},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":28,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1216","line":16,"column":11,"nodeType":"1140","messageId":"1141","endLine":16,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1147","line":24,"column":32,"nodeType":"1148","messageId":"1149","endLine":24,"endColumn":34},{"ruleId":"1158","severity":1,"message":"1217","line":37,"column":47,"nodeType":"1160","endLine":37,"endColumn":60,"suggestions":"1218"},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1219","line":15,"column":7,"nodeType":"1140","messageId":"1141","endLine":15,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1220","line":11,"column":9,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1221","line":14,"column":7,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1198","line":23,"column":11,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1216","line":24,"column":11,"nodeType":"1140","messageId":"1141","endLine":24,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1222","line":34,"column":13,"nodeType":"1140","messageId":"1141","endLine":34,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1223","line":39,"column":13,"nodeType":"1140","messageId":"1141","endLine":39,"endColumn":23},{"ruleId":"1146","severity":1,"message":"1147","line":43,"column":28,"nodeType":"1148","messageId":"1149","endLine":43,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1147","line":60,"column":37,"nodeType":"1148","messageId":"1149","endLine":60,"endColumn":39},{"ruleId":"1158","severity":1,"message":"1224","line":91,"column":51,"nodeType":"1160","endLine":91,"endColumn":76,"suggestions":"1225"},{"ruleId":"1158","severity":1,"message":"1226","line":30,"column":7,"nodeType":"1160","endLine":30,"endColumn":13,"suggestions":"1227"},{"ruleId":"1138","severity":1,"message":"1220","line":10,"column":9,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1221","line":13,"column":7,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1216","line":23,"column":11,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1222","line":33,"column":13,"nodeType":"1140","messageId":"1141","endLine":33,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1223","line":38,"column":13,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":23},{"ruleId":"1146","severity":1,"message":"1147","line":42,"column":28,"nodeType":"1148","messageId":"1149","endLine":42,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1147","line":59,"column":36,"nodeType":"1148","messageId":"1149","endLine":59,"endColumn":38},{"ruleId":"1146","severity":1,"message":"1147","line":61,"column":42,"nodeType":"1148","messageId":"1149","endLine":61,"endColumn":44},{"ruleId":"1150","severity":1,"message":"1171","line":104,"column":55,"nodeType":"1152","messageId":"1153","endLine":104,"endColumn":57},{"ruleId":"1158","severity":1,"message":"1224","line":106,"column":9,"nodeType":"1160","endLine":106,"endColumn":38,"suggestions":"1228"},{"ruleId":"1146","severity":1,"message":"1147","line":16,"column":51,"nodeType":"1148","messageId":"1149","endLine":16,"endColumn":53},{"ruleId":"1158","severity":1,"message":"1229","line":63,"column":45,"nodeType":"1160","endLine":63,"endColumn":74,"suggestions":"1230"},{"ruleId":"1138","severity":1,"message":"1231","line":15,"column":24,"nodeType":"1140","messageId":"1141","endLine":15,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1232","line":16,"column":12,"nodeType":"1140","messageId":"1141","endLine":16,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1233","line":19,"column":11,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":27},{"ruleId":"1146","severity":1,"message":"1147","line":21,"column":40,"nodeType":"1148","messageId":"1149","endLine":21,"endColumn":42},{"ruleId":"1138","severity":1,"message":"1234","line":96,"column":10,"nodeType":"1140","messageId":"1141","endLine":96,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1235","line":19,"column":11,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1212","line":2,"column":17,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1236","line":12,"column":3,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1237","line":41,"column":7,"nodeType":"1140","messageId":"1141","endLine":41,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1211","line":75,"column":11,"nodeType":"1140","messageId":"1141","endLine":75,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1238","line":2,"column":9,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1239","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1240","line":5,"column":8,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1241","line":8,"column":9,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1242","line":8,"column":17,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1243","line":8,"column":20,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":22},{"ruleId":"1146","severity":1,"message":"1147","line":17,"column":32,"nodeType":"1148","messageId":"1149","endLine":17,"endColumn":34},{"ruleId":"1158","severity":1,"message":"1244","line":25,"column":22,"nodeType":"1160","endLine":25,"endColumn":31,"suggestions":"1245"},{"ruleId":"1138","severity":1,"message":"1246","line":12,"column":24,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":32},{"ruleId":"1138","severity":1,"message":"1247","line":13,"column":28,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":45},{"ruleId":"1158","severity":1,"message":"1248","line":28,"column":7,"nodeType":"1160","endLine":28,"endColumn":23,"suggestions":"1249"},{"ruleId":"1138","severity":1,"message":"1250","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1251","line":10,"column":20,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1252","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1252","line":10,"column":9,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":25},{"ruleId":"1146","severity":1,"message":"1147","line":26,"column":28,"nodeType":"1148","messageId":"1149","endLine":26,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1252","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1252","line":12,"column":9,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1253","line":13,"column":9,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":23},{"ruleId":"1254","severity":1,"message":"1255","line":27,"column":29,"nodeType":"1183","endLine":27,"endColumn":53},{"ruleId":"1254","severity":1,"message":"1256","line":31,"column":29,"nodeType":"1183","endLine":31,"endColumn":49},{"ruleId":"1254","severity":1,"message":"1257","line":35,"column":29,"nodeType":"1183","endLine":35,"endColumn":50},{"ruleId":"1254","severity":1,"message":"1258","line":40,"column":29,"nodeType":"1183","endLine":40,"endColumn":54},{"ruleId":"1254","severity":1,"message":"1259","line":44,"column":29,"nodeType":"1183","endLine":44,"endColumn":51},{"ruleId":"1254","severity":1,"message":"1260","line":48,"column":29,"nodeType":"1183","endLine":48,"endColumn":52},{"ruleId":"1138","severity":1,"message":"1261","line":5,"column":10,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1262","line":198,"column":7,"nodeType":"1140","messageId":"1141","endLine":198,"endColumn":13},{"ruleId":"1254","severity":1,"message":"1263","line":22,"column":17,"nodeType":"1183","endLine":22,"endColumn":42},{"ruleId":"1254","severity":1,"message":"1264","line":23,"column":17,"nodeType":"1183","endLine":23,"endColumn":43},{"ruleId":"1254","severity":1,"message":"1265","line":24,"column":17,"nodeType":"1183","endLine":24,"endColumn":37},{"ruleId":"1254","severity":1,"message":"1266","line":26,"column":17,"nodeType":"1183","endLine":26,"endColumn":44},{"ruleId":"1254","severity":1,"message":"1267","line":27,"column":17,"nodeType":"1183","endLine":27,"endColumn":45},{"ruleId":"1138","severity":1,"message":"1268","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1269","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1270","line":9,"column":8,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":16},{"ruleId":"1254","severity":1,"message":"1271","line":13,"column":17,"nodeType":"1183","endLine":13,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1239","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1272","line":9,"column":8,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1273","line":9,"column":15,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1274","line":9,"column":24,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1216","line":13,"column":11,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":13},{"ruleId":"1158","severity":1,"message":"1275","line":18,"column":7,"nodeType":"1160","endLine":18,"endColumn":9,"suggestions":"1276"},{"ruleId":"1254","severity":1,"message":"1277","line":24,"column":17,"nodeType":"1183","endLine":24,"endColumn":41},{"ruleId":"1138","severity":1,"message":"1278","line":4,"column":12,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1279","line":4,"column":16,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":17},{"ruleId":"1254","severity":1,"message":"1280","line":17,"column":13,"nodeType":"1183","endLine":17,"endColumn":34},{"ruleId":"1254","severity":1,"message":"1281","line":18,"column":13,"nodeType":"1183","endLine":18,"endColumn":40},{"ruleId":"1138","severity":1,"message":"1282","line":13,"column":8,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":20},{"ruleId":"1254","severity":1,"message":"1283","line":32,"column":13,"nodeType":"1183","endLine":32,"endColumn":41},{"ruleId":"1254","severity":1,"message":"1284","line":34,"column":13,"nodeType":"1183","endLine":34,"endColumn":36},{"ruleId":"1254","severity":1,"message":"1285","line":35,"column":13,"nodeType":"1183","endLine":35,"endColumn":37},{"ruleId":"1254","severity":1,"message":"1286","line":67,"column":17,"nodeType":"1183","endLine":67,"endColumn":43},{"ruleId":"1254","severity":1,"message":"1287","line":68,"column":17,"nodeType":"1183","endLine":68,"endColumn":50},{"ruleId":"1254","severity":1,"message":"1288","line":69,"column":17,"nodeType":"1183","endLine":69,"endColumn":53},{"ruleId":"1138","severity":1,"message":"1289","line":6,"column":8,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":15},{"ruleId":"1146","severity":1,"message":"1147","line":16,"column":26,"nodeType":"1148","messageId":"1149","endLine":16,"endColumn":28},{"ruleId":"1146","severity":1,"message":"1147","line":25,"column":53,"nodeType":"1148","messageId":"1149","endLine":25,"endColumn":55},{"ruleId":"1146","severity":1,"message":"1147","line":16,"column":26,"nodeType":"1148","messageId":"1149","endLine":16,"endColumn":28},{"ruleId":"1146","severity":1,"message":"1147","line":25,"column":49,"nodeType":"1148","messageId":"1149","endLine":25,"endColumn":51},{"ruleId":"1146","severity":1,"message":"1147","line":34,"column":52,"nodeType":"1148","messageId":"1149","endLine":34,"endColumn":54},{"ruleId":"1146","severity":1,"message":"1147","line":35,"column":37,"nodeType":"1148","messageId":"1149","endLine":35,"endColumn":39},{"ruleId":"1146","severity":1,"message":"1193","line":46,"column":37,"nodeType":"1156","messageId":"1149","endLine":46,"endColumn":45},{"ruleId":"1158","severity":1,"message":"1290","line":55,"column":32,"nodeType":"1160","endLine":55,"endColumn":39,"suggestions":"1291"},{"ruleId":"1146","severity":1,"message":"1147","line":13,"column":52,"nodeType":"1148","messageId":"1149","endLine":13,"endColumn":54},{"ruleId":"1146","severity":1,"message":"1147","line":14,"column":37,"nodeType":"1148","messageId":"1149","endLine":14,"endColumn":39},{"ruleId":"1158","severity":1,"message":"1290","line":27,"column":32,"nodeType":"1160","endLine":27,"endColumn":38,"suggestions":"1292"},{"ruleId":"1142","replacedBy":"1293"},{"ruleId":"1144","replacedBy":"1294"},{"ruleId":"1158","severity":1,"message":"1295","line":20,"column":7,"nodeType":"1160","endLine":20,"endColumn":9,"suggestions":"1296"},{"ruleId":"1138","severity":1,"message":"1243","line":7,"column":9,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1279","line":7,"column":16,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1297","line":14,"column":28,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":46},{"ruleId":"1146","severity":1,"message":"1147","line":22,"column":80,"nodeType":"1148","messageId":"1149","endLine":22,"endColumn":82},{"ruleId":"1158","severity":1,"message":"1298","line":24,"column":7,"nodeType":"1160","endLine":24,"endColumn":9,"suggestions":"1299"},{"ruleId":"1254","severity":1,"message":"1300","line":15,"column":17,"nodeType":"1183","endLine":15,"endColumn":52},{"ruleId":"1138","severity":1,"message":"1301","line":1,"column":28,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1221","line":13,"column":7,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1302","line":54,"column":12,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1303","line":54,"column":27,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":44},{"ruleId":"1138","severity":1,"message":"1222","line":62,"column":13,"nodeType":"1140","messageId":"1141","endLine":62,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1223","line":67,"column":13,"nodeType":"1140","messageId":"1141","endLine":67,"endColumn":23},{"ruleId":"1146","severity":1,"message":"1147","line":71,"column":28,"nodeType":"1148","messageId":"1149","endLine":71,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1188","line":88,"column":36,"nodeType":"1148","messageId":"1157","endLine":88,"endColumn":38},{"ruleId":"1150","severity":1,"message":"1171","line":96,"column":41,"nodeType":"1152","messageId":"1153","endLine":96,"endColumn":43},{"ruleId":"1146","severity":1,"message":"1147","line":97,"column":15,"nodeType":"1304","messageId":"1305","endLine":97,"endColumn":21},{"ruleId":"1146","severity":1,"message":"1147","line":101,"column":15,"nodeType":"1304","messageId":"1305","endLine":101,"endColumn":21},{"ruleId":"1146","severity":1,"message":"1147","line":105,"column":42,"nodeType":"1148","messageId":"1149","endLine":105,"endColumn":44},{"ruleId":"1150","severity":1,"message":"1171","line":156,"column":70,"nodeType":"1152","messageId":"1153","endLine":156,"endColumn":72},{"ruleId":"1158","severity":1,"message":"1224","line":158,"column":9,"nodeType":"1160","endLine":158,"endColumn":29,"suggestions":"1306"},{"ruleId":"1138","severity":1,"message":"1220","line":11,"column":9,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1221","line":14,"column":7,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1198","line":23,"column":11,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1216","line":24,"column":11,"nodeType":"1140","messageId":"1141","endLine":24,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1222","line":34,"column":13,"nodeType":"1140","messageId":"1141","endLine":34,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1223","line":39,"column":13,"nodeType":"1140","messageId":"1141","endLine":39,"endColumn":23},{"ruleId":"1146","severity":1,"message":"1147","line":43,"column":28,"nodeType":"1148","messageId":"1149","endLine":43,"endColumn":30},{"ruleId":"1146","severity":1,"message":"1147","line":60,"column":37,"nodeType":"1148","messageId":"1149","endLine":60,"endColumn":39},{"ruleId":"1158","severity":1,"message":"1224","line":90,"column":80,"nodeType":"1160","endLine":90,"endColumn":100,"suggestions":"1307"},{"ruleId":"1138","severity":1,"message":"1308","line":8,"column":7,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":14},{"ruleId":"1146","severity":1,"message":"1188","line":30,"column":71,"nodeType":"1148","messageId":"1157","endLine":30,"endColumn":73},{"ruleId":"1150","severity":1,"message":"1171","line":40,"column":41,"nodeType":"1152","messageId":"1153","endLine":40,"endColumn":43},{"ruleId":"1146","severity":1,"message":"1147","line":41,"column":17,"nodeType":"1304","messageId":"1305","endLine":41,"endColumn":23},{"ruleId":"1146","severity":1,"message":"1147","line":46,"column":18,"nodeType":"1304","messageId":"1305","endLine":46,"endColumn":24},{"ruleId":"1146","severity":1,"message":"1147","line":63,"column":50,"nodeType":"1148","messageId":"1149","endLine":63,"endColumn":52},{"ruleId":"1158","severity":1,"message":"1309","line":78,"column":41,"nodeType":"1160","endLine":78,"endColumn":61,"suggestions":"1310"},{"ruleId":"1158","severity":1,"message":"1309","line":80,"column":41,"nodeType":"1160","endLine":80,"endColumn":45,"suggestions":"1311"},{"ruleId":"1146","severity":1,"message":"1147","line":16,"column":66,"nodeType":"1148","messageId":"1149","endLine":16,"endColumn":68},{"ruleId":"1158","severity":1,"message":"1229","line":63,"column":45,"nodeType":"1160","endLine":63,"endColumn":65,"suggestions":"1312"},{"ruleId":"1142","replacedBy":"1313"},{"ruleId":"1144","replacedBy":"1314"},{"ruleId":"1158","severity":1,"message":"1226","line":45,"column":7,"nodeType":"1160","endLine":45,"endColumn":13,"suggestions":"1315"},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":16,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1316","line":11,"column":12,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":19},{"ruleId":"1158","severity":1,"message":"1226","line":27,"column":7,"nodeType":"1160","endLine":27,"endColumn":13,"suggestions":"1317"},{"ruleId":"1138","severity":1,"message":"1318","line":2,"column":8,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":21},{"ruleId":"1146","severity":1,"message":"1147","line":15,"column":24,"nodeType":"1148","messageId":"1149","endLine":15,"endColumn":26},{"ruleId":"1319","severity":1,"message":"1320","line":56,"column":13,"nodeType":"1183","endLine":56,"endColumn":17},{"ruleId":"1146","severity":1,"message":"1147","line":88,"column":32,"nodeType":"1148","messageId":"1149","endLine":88,"endColumn":34},{"ruleId":"1158","severity":1,"message":"1321","line":90,"column":7,"nodeType":"1160","endLine":90,"endColumn":9,"suggestions":"1322"},{"ruleId":"1138","severity":1,"message":"1323","line":2,"column":21,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1308","line":14,"column":9,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":16},{"ruleId":"1146","severity":1,"message":"1147","line":31,"column":37,"nodeType":"1148","messageId":"1149","endLine":31,"endColumn":39},{"ruleId":"1146","severity":1,"message":"1147","line":79,"column":43,"nodeType":"1148","messageId":"1149","endLine":79,"endColumn":45},{"ruleId":"1158","severity":1,"message":"1324","line":92,"column":9,"nodeType":"1160","endLine":92,"endColumn":11,"suggestions":"1325"},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":28,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1326","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1327","line":4,"column":20,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1328","line":5,"column":8,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1198","line":13,"column":11,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":17},{"ruleId":"1150","severity":1,"message":"1171","line":30,"column":75,"nodeType":"1152","messageId":"1153","endLine":30,"endColumn":77},{"ruleId":"1150","severity":1,"message":"1171","line":43,"column":73,"nodeType":"1152","messageId":"1153","endLine":43,"endColumn":75},{"ruleId":"1158","severity":1,"message":"1329","line":53,"column":7,"nodeType":"1160","endLine":53,"endColumn":36,"suggestions":"1330"},{"ruleId":"1138","severity":1,"message":"1326","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1327","line":3,"column":20,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1331","line":14,"column":12,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1332","line":14,"column":22,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":33},{"ruleId":"1138","severity":1,"message":"1331","line":46,"column":12,"nodeType":"1140","messageId":"1141","endLine":46,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1332","line":46,"column":22,"nodeType":"1140","messageId":"1141","endLine":46,"endColumn":33},{"ruleId":"1138","severity":1,"message":"1333","line":6,"column":8,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1279","line":10,"column":13,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1334","line":12,"column":9,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1147","line":58,"column":39,"nodeType":"1148","messageId":"1149","endLine":58,"endColumn":41},{"ruleId":"1138","severity":1,"message":"1335","line":61,"column":21,"nodeType":"1140","messageId":"1141","endLine":61,"endColumn":31},{"ruleId":"1146","severity":1,"message":"1147","line":64,"column":70,"nodeType":"1148","messageId":"1149","endLine":64,"endColumn":72},{"ruleId":"1146","severity":1,"message":"1147","line":76,"column":52,"nodeType":"1148","messageId":"1149","endLine":76,"endColumn":54},{"ruleId":"1146","severity":1,"message":"1147","line":77,"column":62,"nodeType":"1148","messageId":"1149","endLine":77,"endColumn":64},{"ruleId":"1138","severity":1,"message":"1336","line":97,"column":11,"nodeType":"1140","messageId":"1141","endLine":97,"endColumn":18},{"ruleId":"1158","severity":1,"message":"1337","line":101,"column":43,"nodeType":"1160","endLine":101,"endColumn":45,"suggestions":"1338"},{"ruleId":"1158","severity":1,"message":"1226","line":102,"column":38,"nodeType":"1160","endLine":102,"endColumn":44,"suggestions":"1339"},{"ruleId":"1142","replacedBy":"1340"},{"ruleId":"1144","replacedBy":"1341"},{"ruleId":"1138","severity":1,"message":"1342","line":9,"column":18,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1174","line":3,"column":18,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1343","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":28},{"ruleId":"1138","severity":1,"message":"1344","line":4,"column":30,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":47},{"ruleId":"1138","severity":1,"message":"1212","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1215","line":1,"column":28,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1345","line":24,"column":11,"nodeType":"1140","messageId":"1141","endLine":24,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1289","line":4,"column":8,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1279","line":5,"column":9,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":10},{"ruleId":"1138","severity":1,"message":"1345","line":24,"column":11,"nodeType":"1140","messageId":"1141","endLine":24,"endColumn":15},{"ruleId":"1158","severity":1,"message":"1346","line":34,"column":7,"nodeType":"1160","endLine":34,"endColumn":11,"suggestions":"1347"},{"ruleId":"1158","severity":1,"message":"1348","line":24,"column":22,"nodeType":"1160","endLine":24,"endColumn":30,"suggestions":"1349"},{"ruleId":"1138","severity":1,"message":"1350","line":10,"column":8,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1351","line":12,"column":19,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":26},{"ruleId":"1150","severity":1,"message":"1171","line":17,"column":12,"nodeType":"1152","messageId":"1153","endLine":17,"endColumn":14},{"ruleId":"1150","severity":1,"message":"1171","line":27,"column":23,"nodeType":"1152","messageId":"1153","endLine":27,"endColumn":25},{"ruleId":"1146","severity":1,"message":"1188","line":51,"column":66,"nodeType":"1148","messageId":"1157","endLine":51,"endColumn":68},{"ruleId":"1138","severity":1,"message":"1216","line":69,"column":11,"nodeType":"1140","messageId":"1141","endLine":69,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1147","line":92,"column":62,"nodeType":"1148","messageId":"1149","endLine":92,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1188","line":99,"column":47,"nodeType":"1148","messageId":"1157","endLine":99,"endColumn":49},{"ruleId":"1146","severity":1,"message":"1147","line":128,"column":62,"nodeType":"1148","messageId":"1149","endLine":128,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":134,"column":52,"nodeType":"1156","messageId":"1149","endLine":134,"endColumn":60},{"ruleId":"1146","severity":1,"message":"1188","line":136,"column":57,"nodeType":"1148","messageId":"1157","endLine":136,"endColumn":59},{"ruleId":"1146","severity":1,"message":"1188","line":169,"column":62,"nodeType":"1148","messageId":"1157","endLine":169,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1147","line":176,"column":38,"nodeType":"1148","messageId":"1149","endLine":176,"endColumn":40},{"ruleId":"1146","severity":1,"message":"1147","line":197,"column":37,"nodeType":"1148","messageId":"1149","endLine":197,"endColumn":39},{"ruleId":"1138","severity":1,"message":"1216","line":231,"column":11,"nodeType":"1140","messageId":"1141","endLine":231,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1147","line":235,"column":62,"nodeType":"1148","messageId":"1149","endLine":235,"endColumn":64},{"ruleId":"1138","severity":1,"message":"1216","line":244,"column":11,"nodeType":"1140","messageId":"1141","endLine":244,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1147","line":248,"column":59,"nodeType":"1148","messageId":"1149","endLine":248,"endColumn":61},{"ruleId":"1146","severity":1,"message":"1193","line":250,"column":50,"nodeType":"1156","messageId":"1149","endLine":250,"endColumn":58},{"ruleId":"1146","severity":1,"message":"1147","line":251,"column":52,"nodeType":"1148","messageId":"1149","endLine":251,"endColumn":54},{"ruleId":"1146","severity":1,"message":"1188","line":274,"column":62,"nodeType":"1148","messageId":"1157","endLine":274,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1188","line":283,"column":43,"nodeType":"1148","messageId":"1157","endLine":283,"endColumn":45},{"ruleId":"1146","severity":1,"message":"1188","line":321,"column":62,"nodeType":"1148","messageId":"1157","endLine":321,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":331,"column":51,"nodeType":"1156","messageId":"1149","endLine":331,"endColumn":59},{"ruleId":"1146","severity":1,"message":"1188","line":334,"column":53,"nodeType":"1148","messageId":"1157","endLine":334,"endColumn":55},{"ruleId":"1146","severity":1,"message":"1188","line":379,"column":62,"nodeType":"1148","messageId":"1157","endLine":379,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":388,"column":51,"nodeType":"1156","messageId":"1149","endLine":388,"endColumn":59},{"ruleId":"1146","severity":1,"message":"1188","line":391,"column":53,"nodeType":"1148","messageId":"1157","endLine":391,"endColumn":55},{"ruleId":"1146","severity":1,"message":"1147","line":436,"column":62,"nodeType":"1148","messageId":"1149","endLine":436,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1188","line":437,"column":43,"nodeType":"1148","messageId":"1157","endLine":437,"endColumn":45},{"ruleId":"1146","severity":1,"message":"1147","line":467,"column":62,"nodeType":"1148","messageId":"1149","endLine":467,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1188","line":470,"column":43,"nodeType":"1148","messageId":"1157","endLine":470,"endColumn":45},{"ruleId":"1146","severity":1,"message":"1147","line":504,"column":22,"nodeType":"1148","messageId":"1149","endLine":504,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1216","line":514,"column":11,"nodeType":"1140","messageId":"1141","endLine":514,"endColumn":13},{"ruleId":"1146","severity":1,"message":"1188","line":532,"column":62,"nodeType":"1148","messageId":"1157","endLine":532,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":541,"column":48,"nodeType":"1156","messageId":"1149","endLine":541,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":544,"column":50,"nodeType":"1148","messageId":"1157","endLine":544,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1147","line":589,"column":62,"nodeType":"1148","messageId":"1149","endLine":589,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":590,"column":48,"nodeType":"1156","messageId":"1149","endLine":590,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1147","line":591,"column":50,"nodeType":"1148","messageId":"1149","endLine":591,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1188","line":610,"column":62,"nodeType":"1148","messageId":"1157","endLine":610,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":617,"column":48,"nodeType":"1156","messageId":"1149","endLine":617,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":618,"column":50,"nodeType":"1148","messageId":"1157","endLine":618,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1147","line":639,"column":24,"nodeType":"1148","messageId":"1149","endLine":639,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1188","line":653,"column":62,"nodeType":"1148","messageId":"1157","endLine":653,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":661,"column":48,"nodeType":"1156","messageId":"1149","endLine":661,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":662,"column":50,"nodeType":"1148","messageId":"1157","endLine":662,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1147","line":682,"column":24,"nodeType":"1148","messageId":"1149","endLine":682,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1188","line":695,"column":62,"nodeType":"1148","messageId":"1157","endLine":695,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":703,"column":48,"nodeType":"1156","messageId":"1149","endLine":703,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":704,"column":50,"nodeType":"1148","messageId":"1157","endLine":704,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1147","line":724,"column":24,"nodeType":"1148","messageId":"1149","endLine":724,"endColumn":26},{"ruleId":"1146","severity":1,"message":"1188","line":739,"column":62,"nodeType":"1148","messageId":"1157","endLine":739,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":748,"column":48,"nodeType":"1156","messageId":"1149","endLine":748,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":751,"column":50,"nodeType":"1148","messageId":"1157","endLine":751,"endColumn":52},{"ruleId":"1146","severity":1,"message":"1188","line":798,"column":62,"nodeType":"1148","messageId":"1157","endLine":798,"endColumn":64},{"ruleId":"1146","severity":1,"message":"1193","line":807,"column":48,"nodeType":"1156","messageId":"1149","endLine":807,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1188","line":810,"column":50,"nodeType":"1148","messageId":"1157","endLine":810,"endColumn":52},{"ruleId":"1158","severity":1,"message":"1346","line":29,"column":7,"nodeType":"1160","endLine":29,"endColumn":16,"suggestions":"1352"},{"ruleId":"1138","severity":1,"message":"1174","line":13,"column":20,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1345","line":27,"column":11,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1239","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":29},{"ruleId":"1158","severity":1,"message":"1353","line":47,"column":37,"nodeType":"1160","endLine":47,"endColumn":41,"suggestions":"1354"},{"ruleId":"1138","severity":1,"message":"1355","line":5,"column":9,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1241","line":8,"column":9,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1278","line":8,"column":12,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1279","line":8,"column":18,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":19},{"ruleId":"1150","severity":1,"message":"1151","line":21,"column":67,"nodeType":"1152","messageId":"1153","endLine":21,"endColumn":69},{"ruleId":"1158","severity":1,"message":"1356","line":23,"column":7,"nodeType":"1160","endLine":23,"endColumn":11,"suggestions":"1357"},{"ruleId":"1138","severity":1,"message":"1358","line":44,"column":11,"nodeType":"1140","messageId":"1141","endLine":44,"endColumn":40},{"ruleId":"1146","severity":1,"message":"1147","line":48,"column":66,"nodeType":"1148","messageId":"1149","endLine":48,"endColumn":68},{"ruleId":"1146","severity":1,"message":"1193","line":50,"column":52,"nodeType":"1156","messageId":"1149","endLine":50,"endColumn":60},{"ruleId":"1146","severity":1,"message":"1147","line":51,"column":54,"nodeType":"1148","messageId":"1149","endLine":51,"endColumn":56},{"ruleId":"1146","severity":1,"message":"1147","line":67,"column":28,"nodeType":"1148","messageId":"1149","endLine":67,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1359","line":12,"column":26,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1360","line":12,"column":32,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":40},{"ruleId":"1138","severity":1,"message":"1174","line":12,"column":47,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":51},{"ruleId":"1146","severity":1,"message":"1147","line":34,"column":39,"nodeType":"1148","messageId":"1149","endLine":34,"endColumn":41},{"ruleId":"1146","severity":1,"message":"1147","line":37,"column":43,"nodeType":"1148","messageId":"1149","endLine":37,"endColumn":45},{"ruleId":"1138","severity":1,"message":"1239","line":2,"column":9,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1174","line":13,"column":20,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1359","line":12,"column":26,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1360","line":12,"column":32,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":40},{"ruleId":"1138","severity":1,"message":"1174","line":12,"column":47,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":51},{"ruleId":"1146","severity":1,"message":"1147","line":34,"column":39,"nodeType":"1148","messageId":"1149","endLine":34,"endColumn":41},{"ruleId":"1146","severity":1,"message":"1147","line":37,"column":43,"nodeType":"1148","messageId":"1149","endLine":37,"endColumn":45},{"ruleId":"1138","severity":1,"message":"1361","line":26,"column":11,"nodeType":"1140","messageId":"1141","endLine":26,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1333","line":11,"column":30,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":38},{"ruleId":"1138","severity":1,"message":"1362","line":11,"column":40,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":43},{"ruleId":"1138","severity":1,"message":"1363","line":11,"column":44,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":50},{"ruleId":"1138","severity":1,"message":"1174","line":11,"column":60,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":64},{"ruleId":"1138","severity":1,"message":"1364","line":54,"column":7,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":20},"no-unused-vars","'JWTCHECK' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["1365"],"no-negated-in-lhs",["1366"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'WorkOrderCount' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useMemo has an unnecessary dependency: 'UX'. Either exclude it or remove the dependency array.","ArrayExpression",["1367"],"'MapParameters' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Expected '!==' and instead saw '!='.","React Hook useMemo has an unnecessary dependency: 'SCAN'. Either exclude it or remove the dependency array.",["1368"],"'Cell' is defined but never used.",["1365"],["1366"],"'ChartGroupArrayData' is assigned a value but never used.","'Removeinteriors' is assigned a value but never used.","'JobTypes' is assigned a value but never used.","'checkResourceCount' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","Array.prototype.map() expects a value to be returned at the end of arrow function.","'GetSites' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Pushhistory'. Either include it or remove the dependency array.",["1369"],["1370"],"Array.prototype.map() expects a return value from function.","React Hook useEffect has a missing dependency: 'checkDataStatus'. Either include it or remove the dependency array.",["1371"],"React Hook useEffect has a missing dependency: 'Fetch'. Either include it or remove the dependency array.",["1372"],"'STRAPI' is assigned a value but never used.","'DataStatus' is assigned a value but never used.","'setDataStatus' is assigned a value but never used.",["1373"],"'ComponentAbout' is defined but never used.","'ComponentLanding' is defined but never used.","'ComponentContact' is defined but never used.","'ComponentUnAuth' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'AUTH'. Either exclude it or remove the dependency array.",["1374"],"'Divider' is defined but never used.","'Drawer' is defined but never used.","'PublicNavigation' is defined but never used.","'classes' is assigned a value but never used.","'useEffect' is defined but never used.","'withRouter' is defined but never used.",["1375"],"'useState' is defined but never used.","'UX' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Scan'. Either include it or remove the dependency array.",["1376"],"'RenderScamSites' is assigned a value but never used.","'uniqBy' is defined but never used.","'divStyle' is assigned a value but never used.","'ColorMe' is assigned a value but never used.","'FindMinMax' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateMarkers'. Either include it or remove the dependency array.",["1377"],"React Hook useEffect has a missing dependency: 'extractResults'. Either include it or remove the dependency array.",["1378"],["1379"],"React Hook useEffect has a missing dependency: 'CreateCenterpoints'. Either include it or remove the dependency array.",["1380"],"'setMultiplier' is assigned a value but never used.","'ClusterTotal' is assigned a value but never used.","'FindClusterTotal' is assigned a value but never used.","'scanID' is assigned a value but never used.","'HandleCompare' is assigned a value but never used.","'KeyboardTimePicker' is defined but never used.","'Processing' is assigned a value but never used.","'useContext_STRAPI_FULL' is defined but never used.","'useContext_SCAN_FULL' is defined but never used.","'FetchPreviousScans' is defined but never used.","'H1' is defined but never used.","'H3' is defined but never used.","'H4' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'COMPARE'. Either exclude it or remove the dependency array.",["1381"],"'setLimit' is assigned a value but never used.","'setModelsSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateSelects'. Either include it or remove the dependency array.",["1382"],"'runInContext' is defined but never used.","'setValues' is assigned a value but never used.","'numberWithCommas' is defined but never used.","'findClientName' is defined but never used.","react/jsx-pascal-case","Imported JSX component SubSection_Locations must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubSection_Trade must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubSection_Client must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubSection_Workorders must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubSection_FullMap must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SubSection_Clusters must be in PascalCase or SCREAMING_SNAKE_CASE","'makeStyles' is defined but never used.","'ULList' is assigned a value but never used.","Imported JSX component Locations_Basic_Stats must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Locations_Basic_Charts must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Locations_ByTier must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Location_ResourceSpread must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Location_WorkorderSpread must be in PascalCase or SCREAMING_SNAKE_CASE","'MenuIcon' is defined but never used.","'SearchIcon' is defined but never used.","'MoreIcon' is defined but never used.","Imported JSX component Map_Full_Main must be in PascalCase or SCREAMING_SNAKE_CASE","'sumBy' is defined but never used.","'groupBy' is defined but never used.","'chain' is defined but never used.","React Hook useEffect has a missing dependency: 'MODEL.SelectedModel.STOREMARKERCENTERPOINTS'. Either include it or remove the dependency array.",["1383"],"Imported JSX component Clusters_ResultsList must be in PascalCase or SCREAMING_SNAKE_CASE","'H2' is defined but never used.","'P' is defined but never used.","Imported JSX component WorkOrders_Basics must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component WorkOrder_Radial_Charts must be in PascalCase or SCREAMING_SNAKE_CASE","'Trade_Ratios' is defined but never used.","Imported JSX component Trade_ResourceAllocation must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Trade_Radial_Charts must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Trade_Radial_Clients must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TradeSpecific_Overview must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TradeSpecific_ClientBreakdown must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Trade_ResourceAllocationOverTime must be in PascalCase or SCREAMING_SNAKE_CASE","'Section' is defined but never used.","React Hook useEffect has a missing dependency: 'ByClient'. Either include it or remove the dependency array.",["1384"],["1385"],["1365"],["1366"],"React Hook useEffect has missing dependencies: 'SCAN.SelectedModel', 'SCAN.SelectedModelMeta.DateEnd', and 'SCAN.SelectedModelMeta.DateStart'. Either include them or remove the dependency array.",["1386"],"'setTradeAllocation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Model.STOREMARKERCENTERPOINTS'. Either include it or remove the dependency array.",["1387"],"Imported JSX component Map_SingleModelReview_FULLModel must be in PascalCase or SCREAMING_SNAKE_CASE","'useRef' is defined but never used.","'DisplayMarkers' is assigned a value but never used.","'setDisplayMarkers' is assigned a value but never used.","ReturnStatement","expectedReturnValue",["1388"],["1389"],"'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreatePolygons'. Either include it or remove the dependency array.",["1390"],["1391"],["1392"],["1365"],["1366"],["1393"],"'Results' is assigned a value but never used.",["1394"],"'NumberReducer' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'Trades'. Either include it or remove the dependency array.",["1395"],"'Circle' is defined but never used.","React Hook useEffect has missing dependencies: 'CreateMarkers' and 'CreatePolygon'. Either include them or remove the dependency array.",["1396"],"'orderBy' is defined but never used.","'remove' is defined but never used.","'ReviewSelectionBtn' is defined but never used.","React Hook useEffect has missing dependencies: 'STRAPI.UserData.Customers' and 'USERSCAN.UserScanSingleDataSets'. Either include them or remove the dependency array.",["1397"],"'Fetching' is assigned a value but never used.","'setFetching' is assigned a value but never used.","'PieChart' is defined but never used.","'find' is defined but never used.","'ClientPush' is assigned a value but never used.","'inScope' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'MODEL'. Either include it or remove the dependency array.",["1398"],["1399"],["1365"],["1366"],"'term' is assigned a value but never used.","'setMainMapLocation' is defined but never used.","'SetMapClusterType' is defined but never used.","'SCAN' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'MODELCENTER'. Either include it or remove the dependency array.",["1400"],"React Hook useMemo has an unnecessary dependency: 'SINGLE'. Either exclude it or remove the dependency array.",["1401"],"'axios' is defined but never used.","'partial' is defined but never used.",["1402"],"React Hook useEffect has a missing dependency: 'CategoryOccurance'. Either include it or remove the dependency array.",["1403"],"'colorArray' is defined but never used.","React Hook useEffect has a missing dependency: 'SCAN.SelectedModel.STOREMARKERCENTERPOINTS'. Either include it or remove the dependency array.",["1404"],"'Client_Split_by_Resourcesssss' is assigned a value but never used.","'Area' is defined but never used.","'BarChart' is defined but never used.","'MODEL' is assigned a value but never used.","'Pie' is defined but never used.","'Legend' is defined but never used.","'DisplayFunnel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1405","fix":"1406"},{"desc":"1405","fix":"1407"},{"desc":"1408","fix":"1409"},{"desc":"1408","fix":"1410"},{"desc":"1411","fix":"1412"},{"desc":"1413","fix":"1414"},{"desc":"1408","fix":"1415"},{"desc":"1405","fix":"1416"},{"desc":"1417","fix":"1418"},{"desc":"1419","fix":"1420"},{"desc":"1421","fix":"1422"},{"desc":"1423","fix":"1424"},{"desc":"1425","fix":"1426"},{"desc":"1427","fix":"1428"},{"desc":"1405","fix":"1429"},{"desc":"1430","fix":"1431"},{"desc":"1432","fix":"1433"},{"desc":"1434","fix":"1435"},{"desc":"1436","fix":"1437"},{"desc":"1438","fix":"1439"},{"desc":"1440","fix":"1441"},{"desc":"1442","fix":"1443"},{"desc":"1442","fix":"1444"},{"desc":"1445","fix":"1446"},{"desc":"1447","fix":"1448"},{"desc":"1449","fix":"1450"},{"desc":"1423","fix":"1451"},{"desc":"1423","fix":"1452"},{"desc":"1453","fix":"1454"},{"desc":"1455","fix":"1456"},{"desc":"1457","fix":"1458"},{"desc":"1459","fix":"1460"},{"desc":"1423","fix":"1461"},{"desc":"1462","fix":"1463"},{"desc":"1405","fix":"1464"},{"desc":"1465","fix":"1466"},{"desc":"1467","fix":"1468"},{"desc":"1469","fix":"1470"},"Update the dependencies array to be: []",{"range":"1471","text":"1472"},{"range":"1473","text":"1472"},"Update the dependencies array to be: [AUTH, Pushhistory]",{"range":"1474","text":"1475"},{"range":"1476","text":"1475"},"Update the dependencies array to be: [STRAPI.UserData, checkDataStatus]",{"range":"1477","text":"1478"},"Update the dependencies array to be: [Fetch]",{"range":"1479","text":"1480"},{"range":"1481","text":"1475"},{"range":"1482","text":"1472"},"Update the dependencies array to be: [Pushhistory, UX]",{"range":"1483","text":"1484"},"Update the dependencies array to be: [SCAN.active, Scan]",{"range":"1485","text":"1486"},"Update the dependencies array to be: [CreateMarkers, SCAN.MarkerScanResidual]",{"range":"1487","text":"1488"},"Update the dependencies array to be: [SCAN, extractResults]",{"range":"1489","text":"1490"},"Update the dependencies array to be: [CreateMarkers, SCAN.MarkerScanCenterPoints]",{"range":"1491","text":"1492"},"Update the dependencies array to be: [CreateCenterpoints, SCAN.MarkerScanCenterPoints]",{"range":"1493","text":"1494"},{"range":"1495","text":"1472"},"Update the dependencies array to be: [CreateSelects, ModelsSelected]",{"range":"1496","text":"1497"},"Update the dependencies array to be: [MODEL.SelectedModel.STOREMARKERCENTERPOINTS]",{"range":"1498","text":"1499"},"Update the dependencies array to be: [ByClient, MODEL]",{"range":"1500","text":"1501"},"Update the dependencies array to be: [ByClient, SCAN]",{"range":"1502","text":"1503"},"Update the dependencies array to be: [SCAN.SelectedModel, SCAN.SelectedModelMeta.DateEnd, SCAN.SelectedModelMeta.DateStart]",{"range":"1504","text":"1505"},"Update the dependencies array to be: [Model.STOREMARKERCENTERPOINTS]",{"range":"1506","text":"1507"},"Update the dependencies array to be: [CreateMarkers, SCAN.SelectedModel]",{"range":"1508","text":"1509"},{"range":"1510","text":"1509"},"Update the dependencies array to be: [CreatePolygons, SCAN.SelectedModel]",{"range":"1511","text":"1512"},"Update the dependencies array to be: [CreatePolygons, UX]",{"range":"1513","text":"1514"},"Update the dependencies array to be: [CreateCenterpoints, SCAN.SelectedModel]",{"range":"1515","text":"1516"},{"range":"1517","text":"1490"},{"range":"1518","text":"1490"},"Update the dependencies array to be: [Trades]",{"range":"1519","text":"1520"},"Update the dependencies array to be: [CreateMarkers, CreatePolygon]",{"range":"1521","text":"1522"},"Update the dependencies array to be: [STRAPI.UserData.Customers, USERSCAN.ScanOptionSelected, USERSCAN.UserScanSingleDataSets]",{"range":"1523","text":"1524"},"Update the dependencies array to be: [MODEL]",{"range":"1525","text":"1526"},{"range":"1527","text":"1490"},"Update the dependencies array to be: [MODELCENTER, UX]",{"range":"1528","text":"1529"},{"range":"1530","text":"1472"},"Update the dependencies array to be: [UX, SCAN, MODELCENTER]",{"range":"1531","text":"1532"},"Update the dependencies array to be: [CategoryOccurance, UX]",{"range":"1533","text":"1534"},"Update the dependencies array to be: [SCAN.SelectedModel.STOREMARKERCENTERPOINTS, UX]",{"range":"1535","text":"1536"},[493,497],"[]",[485,491],[467,473],"[AUTH, Pushhistory]",[2137,2143],[2468,2485],"[STRAPI.UserData, checkDataStatus]",[2907,2909],"[Fetch]",[4407,4413],[478,484],[414,418],"[Pushhistory, UX]",[1108,1121],"[SCAN.active, Scan]",[3034,3059],"[CreateMarkers, SCAN.MarkerScanResidual]",[1037,1043],"[SCAN, extractResults]",[3343,3372],"[CreateMarkers, SCAN.MarkerScanCenterPoints]",[2070,2099],"[CreateCenterpoints, SCAN.MarkerScanCenterPoints]",[496,505],[815,831],"[CreateSelects, ModelsSelected]",[623,625],"[MODEL.SelectedModel.STOREMARKERCENTERPOINTS]",[1709,1716],"[ByClient, MODEL]",[886,892],"[ByClient, SCAN]",[771,773],"[SCAN.SelectedModel, SCAN.SelectedModelMeta.DateEnd, SCAN.SelectedModelMeta.DateStart]",[855,857],"[Model.STOREMARKERCENTERPOINTS]",[4783,4803],"[CreateMarkers, SCAN.SelectedModel]",[3087,3107],[2464,2484],"[CreatePolygons, SCAN.SelectedModel]",[2569,2573],"[CreatePolygons, UX]",[2062,2082],"[CreateCenterpoints, SCAN.SelectedModel]",[1552,1558],[952,958],[2834,2836],"[Trades]",[2777,2779],"[CreateMarkers, CreatePolygon]",[1902,1931],"[STRAPI.UserData.Customers, USERSCAN.ScanOptionSelected, USERSCAN.UserScanSingleDataSets]",[3456,3458],"[MODEL]",[3499,3505],[1175,1179],"[MODELCENTER, UX]",[488,496],[1160,1169],"[UX, SCAN, MODELCENTER]",[1549,1553],"[CategoryOccurance, UX]",[860,864],"[SCAN.SelectedModel.STOREMARKERCENTERPOINTS, UX]"]