[{"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js":"1","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js":"2","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js":"3","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js":"4","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js":"5","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js":"6","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js":"7","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js":"8","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js":"9","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Login\\index.js":"10","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js":"11","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js":"12","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js":"13","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\PrimaryFeature.js":"14","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\DataDump\\index.js":"15","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\controls.js":"16","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\Header.js":"17","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\map.js":"18","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\ScanBox.js":"19","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\PerimeterBox.js":"20","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\LocationMarkers.js":"21","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\ScanResultsLayout.js":"22","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\SelectRegionLayout.js":"23","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js":"24","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js":"25","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js":"26","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateCountry.js":"27","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js":"28","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateState.js":"29","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateRegion.js":"30","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js":"31","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\ScanResults.js":"32","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\AddNewRegion.js":"33","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\ScanStateBtn.js":"34","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\Results.js":"35","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js":"36","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js":"37","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\clustermap.js":"38","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterMarkers.js":"39","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterScanRadius.js":"40","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterBoundary.js":"41","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ScannedRegionalBoundary.js":"42","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\DeleteClusterBtn.js":"43","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfo.js":"44","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\MapFilterControls.js":"45","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectRaduis.js":"46","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectGridSpacing.js":"47","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMinSitesPerScan.js":"48","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMinWorkOrders.js":"49","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMaxWorkOrders.js":"50","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\BacktoMapBtn.js":"51","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js":"52","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\ClusterResults.js":"53","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfoComponents\\ListSites.js":"54","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfoComponents\\ListTradeTypes.js":"55","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Loading\\Loading.js":"56","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js":"57","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Dashboard.js":"58","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Portfolio\\index.js":"59"},{"size":1017,"mtime":1609378703535,"results":"60","hashOfConfig":"61"},{"size":576,"mtime":1609659662895,"results":"62","hashOfConfig":"61"},{"size":362,"mtime":499162500000,"results":"63","hashOfConfig":"61"},{"size":344,"mtime":1608627476978,"results":"64","hashOfConfig":"61"},{"size":243,"mtime":1609209705044,"results":"65","hashOfConfig":"61"},{"size":2039,"mtime":1609296641569,"results":"66","hashOfConfig":"61"},{"size":87,"mtime":1608627826907,"results":"67","hashOfConfig":"61"},{"size":2655,"mtime":1609735965256,"results":"68","hashOfConfig":"61"},{"size":1668,"mtime":1609675416414,"results":"69","hashOfConfig":"61"},{"size":470,"mtime":1609677319555,"results":"70","hashOfConfig":"61"},{"size":1885,"mtime":1609633826966,"results":"71","hashOfConfig":"61"},{"size":1786,"mtime":1609675267188,"results":"72","hashOfConfig":"61"},{"size":12327,"mtime":1609737070541,"results":"73","hashOfConfig":"61"},{"size":773,"mtime":1609295865899,"results":"74","hashOfConfig":"61"},{"size":2119,"mtime":1609676795776,"results":"75","hashOfConfig":"61"},{"size":709,"mtime":1609215879631,"results":"76","hashOfConfig":"61"},{"size":2783,"mtime":1609674979594,"results":"77","hashOfConfig":"61"},{"size":5613,"mtime":1609464256255,"results":"78","hashOfConfig":"61"},{"size":4710,"mtime":1609479691658,"results":"79","hashOfConfig":"61"},{"size":896,"mtime":1609228919504,"results":"80","hashOfConfig":"61"},{"size":4185,"mtime":1609647493418,"results":"81","hashOfConfig":"61"},{"size":631,"mtime":1609675155513,"results":"82","hashOfConfig":"61"},{"size":427,"mtime":1609218167015,"results":"83","hashOfConfig":"61"},{"size":1986,"mtime":1609214716177,"results":"84","hashOfConfig":"61"},{"size":698,"mtime":1609215777391,"results":"85","hashOfConfig":"61"},{"size":1956,"mtime":1609392985907,"results":"86","hashOfConfig":"61"},{"size":2398,"mtime":1609214583384,"results":"87","hashOfConfig":"61"},{"size":4923,"mtime":1609658220627,"results":"88","hashOfConfig":"61"},{"size":2416,"mtime":1609647413221,"results":"89","hashOfConfig":"61"},{"size":2976,"mtime":1609647387668,"results":"90","hashOfConfig":"61"},{"size":702,"mtime":1609226083528,"results":"91","hashOfConfig":"61"},{"size":255,"mtime":1609312415883,"results":"92","hashOfConfig":"61"},{"size":3130,"mtime":1609647465538,"results":"93","hashOfConfig":"61"},{"size":1110,"mtime":1609675118060,"results":"94","hashOfConfig":"61"},{"size":1094,"mtime":1609678300382,"results":"95","hashOfConfig":"61"},{"size":1610,"mtime":1609678200319,"results":"96","hashOfConfig":"61"},{"size":959,"mtime":1609677692743,"results":"97","hashOfConfig":"61"},{"size":1193,"mtime":1609640157432,"results":"98","hashOfConfig":"61"},{"size":3337,"mtime":1609721569914,"results":"99","hashOfConfig":"61"},{"size":1196,"mtime":1609391549163,"results":"100","hashOfConfig":"61"},{"size":653,"mtime":1609377328531,"results":"101","hashOfConfig":"61"},{"size":472,"mtime":1609377131694,"results":"102","hashOfConfig":"61"},{"size":883,"mtime":1609679223425,"results":"103","hashOfConfig":"61"},{"size":2453,"mtime":1609721556042,"results":"104","hashOfConfig":"61"},{"size":1090,"mtime":1609394380269,"results":"105","hashOfConfig":"61"},{"size":2304,"mtime":1609391092968,"results":"106","hashOfConfig":"61"},{"size":2256,"mtime":1609391790103,"results":"107","hashOfConfig":"61"},{"size":2235,"mtime":1609393786441,"results":"108","hashOfConfig":"61"},{"size":2278,"mtime":1609393796425,"results":"109","hashOfConfig":"61"},{"size":2275,"mtime":1609393778330,"results":"110","hashOfConfig":"61"},{"size":646,"mtime":1609679215014,"results":"111","hashOfConfig":"61"},{"size":6221,"mtime":1609741078405,"results":"112","hashOfConfig":"61"},{"size":1925,"mtime":1609679609238,"results":"113","hashOfConfig":"61"},{"size":821,"mtime":1609641116942,"results":"114","hashOfConfig":"61"},{"size":853,"mtime":1609737355098,"results":"115","hashOfConfig":"61"},{"size":936,"mtime":1609658195584,"results":"116","hashOfConfig":"61"},{"size":257,"mtime":1609657333309,"results":"117","hashOfConfig":"61"},{"size":2534,"mtime":1609663720887,"results":"118","hashOfConfig":"61"},{"size":205,"mtime":1609675450368,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"i3jrvt",{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"122"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"122"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"122"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"122"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"122"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"122"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"122"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"122"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"122"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"122"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"122"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"122"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"122"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"122"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"122"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"122"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"122"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"122"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\index.js",[],["268","269"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\App.js",["270"],"import React, { useEffect } from 'react'\nimport './App.scss';\nimport {useContext_UX_FULL} from \"./Context/UX\";\nimport DashBoard from \"./Template/Dashboard\"\n// Components\nimport Loading from \"../src/Pages/Loading/Loading\"\nimport MainRoutes from \"./Navigation/index\"\n\n\nconst App =() => {\n  const UX = useContext_UX_FULL();\n  useEffect(()=>{ },[UX]);\n\n  if(UX.STRAPIRECEIVED === false){ return( <Loading /> )}\n  else\n  return( <EntryPoint />)\n   \n}\n\nexport default App;\n\n\nconst EntryPoint = ()=>{\n  return (\n      <div className=\"App\">\n         <MainRoutes />\n      </div>\n  );\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\reportWebVitals.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\UX.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\History.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\PrototypeLoader.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Login\\index.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Navigation\\SideBar.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\GeoLocationActions.js",["271","272","273","274","275","276","277"],"import { Circle } from '@react-google-maps/api';\r\nimport store from \"../store/index\"\r\nimport {ClusterAnalysis} from \"./ClusterAnalysis\";\r\n\r\n// find the distance in KM from 1 point to another\r\nexport function distancetoPoint(lat1, lon1, lat2, lon2, unit) {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1/180;\r\n        var radlat2 = Math.PI * lat2/180;\r\n        var theta = lon1-lon2;\r\n        var radtheta = Math.PI * theta/180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit==\"K\") { dist = dist * 1.609344 }\r\n        if (unit==\"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\n// use to find the scan box area.\r\n// this function return the corosponding lnglat to a given point\r\n\r\n\r\nexport  function llFromDistance(latitude, longitude, distance, bearing) {\r\n    // taken from: https://stackoverflow.com/a/46410871/13549 \r\n    // distance in KM, bearing in degrees\r\n  \r\n    const R = 6378.1; // Radius of the Earth\r\n    const brng = bearing * Math.PI / 180; // Convert bearing to radian\r\n    let lat = latitude * Math.PI / 180; // Current coords to radians\r\n    let lon = longitude * Math.PI / 180;\r\n  \r\n    // Do the math magic\r\n    lat = Math.asin(Math.sin(lat) * Math.cos(distance / R) + Math.cos(lat) * Math.sin(distance / R) * Math.cos(brng));\r\n    lon += Math.atan2(Math.sin(brng) * Math.sin(distance / R) * Math.cos(lat), Math.cos(distance / R) - Math.sin(lat) * Math.sin(lat));\r\n  \r\n    // Coords back to degrees and return\r\n    return [(lat * 180 / Math.PI), (lon * 180 / Math.PI)];\r\n  \r\n  }\r\n\r\n\r\n  export const TestBoundaries = (site, Area)=>{\r\n    let found=false;\r\n    if(site.lat <=  Area.north && site.lat >= Area.south && site.long >= Area.west && site.long <= Area.east ){found=true}\r\n    return found\r\n}\r\n\r\n\r\n\r\n\r\n\r\n \r\n// Main Scan Class\r\nexport function PreformScan(){\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Variables */\r\n    /* *************************************************************************************************************** */        \r\n    \r\n    //this.Area=.5\r\n    //this.ScanDistanceArea=this.Area;\r\n    //this.SearchRadius = .5\r\n    //this.minSites=2\r\n    //this.WorkOrderVariants = [500,1500];\r\n    this.FilterVariables=null\r\n\r\n\r\n    this.Boundaries=null;\r\n    this.setGridpoints=null;\r\n    this.setGridPointer=null;\r\n\r\n    this.TestAgainstSites=null;\r\n    this.ScanResults=[];\r\n    this.setScanResults=null\r\n    this.sleepFor=10;\r\n    this.NESW={ north: null, south: null, east: null,  west: null }\r\n    \r\n    \r\n    this.PointOptions={\r\n        strokeColor: '#FF0000',\r\n        strokeOpacity: 0.5,\r\n        strokeWeight: 1,\r\n        fillColor: '#FF0000',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 10,\r\n        zIndex: 1\r\n      }\r\n         \r\n     this.GridPointerOptions = {\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 100,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.GridResultOptions={\r\n        strokeColor: '#00ff00',\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 1,\r\n        fillColor: '#00ff00',\r\n        fillOpacity: 0.35,\r\n        clickable: false,\r\n        draggable: false,\r\n        editable: false,\r\n        visible: true,\r\n        radius: 1000,\r\n        zIndex: 10\r\n      }\r\n\r\n      this.recOptions={\r\n        strokeColor: '#6094ff',\r\n        strokeOpacity: 0.9,\r\n        strokeWeight: 1,\r\n        fillColor: '#6094ff',\r\n        fillOpacity: 0.15,\r\n      }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /*  AUX Functions*/\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.sleep = ()=>{  return new Promise(resolve => setTimeout(resolve, this.sleepFor)) }\r\n    \r\n    this.BreakBoundaries=(Boundaries)=>{\r\n        this.NESW = {  north: Boundaries[1], south: Boundaries[0], east: Boundaries[3], west: Boundaries[2] }\r\n    }\r\n\r\n    this.arePointsNear = (checkPoint, centerPoint, km) => {\r\n                var ky = 40000 / 360;\r\n                var kx = Math.cos(Math.PI * centerPoint.lat / 180.0) * ky;\r\n                var dx = Math.abs(centerPoint.lng - checkPoint.lng) * kx;\r\n                var dy = Math.abs(centerPoint.lat - checkPoint.lat) * ky;\r\n                return Math.sqrt(dx * dx + dy * dy) <= km;\r\n            }\r\n\r\n    this.RemoveDuplicates =()=>{\r\n\r\n    }\r\n\r\n    /* *************************************************************************************************************** */        \r\n    /* Process */\r\n    /* *************************************************************************************************************** */        \r\n\r\n    this.Scan=()=>{\r\n            console.log(\"START SCAN \")\r\n            console.log(\"Scan Start Result Num\", this.ScanResults.length)\r\n\r\n            console.log(\"Scan Filters\", this.FilterVariables)\r\n            this.BreakBoundaries(this.Boundaries)\r\n            //console.log(this.NESW)\r\n            \r\n            \r\n            //console.log(this.FilterVariables.Area, this.FilterVariables);\r\n            let Xiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.north, this.NESW.east,'K')/this.FilterVariables.GridSpacing;\r\n            let Yiterations = distancetoPoint(this.NESW.north,this.NESW.west, this.NESW.south, this.NESW.west,'K')/this.FilterVariables.GridSpacing;\r\n\r\n            console.log( Xiterations, Yiterations);\r\n            //let ScanBoxStartingPosition = llFromDistance(this.NESW.north, this.NESW.west, Math.sqrt(2)*this.Area, 135)\r\n            \r\n            //let LargestSurfaceArea = Math.max(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: this.NESW.north, lng: this.NESW.west }} />)\r\n            this.FindScanPoints(Math.ceil(Xiterations), Math.ceil(Yiterations))\r\n            \r\n        }\r\n\r\n\r\n\r\n    this.FindScanPoints = (Xiterations, Yiterations)=>{\r\n\r\n        console.log(Xiterations, Yiterations);\r\n\r\n        let LargestSurfaceArea = Math.max(Xiterations, Yiterations)\r\n        let i=0;\r\n        let Points = []\r\n        let ReturnedLngLat;\r\n\r\n      \r\n        while( i < LargestSurfaceArea){\r\n           \r\n            ReturnedLngLat = llFromDistance(this.NESW.north, this.NESW.west, (Math.sqrt(2)*(i*this.FilterVariables.GridSpacing)), 135)\r\n            //console.log(ReturnedLngLat[0],ReturnedLngLat[1])\r\n            Points.push([ReturnedLngLat[0],ReturnedLngLat[1]]) \r\n            \r\n            i++\r\n        }\r\n\r\n        console.log(Points);\r\n        this.MapScanPoints(Points, Xiterations, Yiterations)\r\n    }\r\n\r\n\r\n\r\n    this.MapScanPoints=(Points, Xiterations, Yiterations)=>{\r\n\r\n        let MapGrid=[]\r\n        let createCircles=[];\r\n\r\n\r\n        let ii=0;\r\n\r\n        while(ii < Yiterations){\r\n            let Row=0, Col=0, iii=0\r\n            while(iii < Xiterations){\r\n                Row=ii;\r\n                Col=iii\r\n                    //console.log([Row,Col])\r\n                    MapGrid.push([Points[Row][0], Points[Col][1]])\r\n                    createCircles.push(<Circle key={ii+iii} options={this.PointOptions}  center={{ lat: Points[Row][0], lng: Points[Col][1] }} />)\r\n                    iii++\r\n            }\r\n            ii++\r\n        }\r\n        //console.log(MapGrid);\r\n        this.setGridpoints(createCircles)\r\n        this.RunScanTest (MapGrid)\r\n    }\r\n\r\n\r\n    this.RunScanTest = async(MapGrid)=>{\r\n        \r\n        // Variables\r\n        this.setScanResults(null)\r\n        let i=0\r\n        // run loop to scan through Grid points\r\n        while(i<MapGrid.length){\r\n            // Hold scan point for FE show only\r\n            await this.sleep()\r\n            // find\r\n          //  let ScanBoxNewPosition = llFromDistance(MapGrid[i][0], MapGrid[i][1], Math.sqrt(2)*this.Area, 135)\r\n          //  south: ScanBoxNewPosition[0],east: ScanBoxNewPosition[1],\r\n            this.setGridPointer(<Circle options={this.GridPointerOptions}  center={{ lat: MapGrid[i][0], lng: MapGrid[i][1] }} />)\r\n            \r\n            // Create Circle Center point to scan in next function hand off.\r\n            let ScanBoundary = { north: MapGrid[i][0],  west: MapGrid[i][1] }\r\n            \r\n            this.scanTestDiameter(ScanBoundary)\r\n            \r\n            i++\r\n        }\r\n\r\n        this.setGridPointer(<Circle visible={false} options={this.GridPointerOptions}   />)\r\n        this.StoreResults()\r\n        ClusterAnalysis(this.ScanResults)\r\n        \r\n    }\r\n\r\n\r\n\r\n    this.scanTestDiameter = (ScanBoundary)=>{\r\n\r\n        // This function checks to see if a site is within the Radius of the center point in the scan\r\n        // it should check each site lng/lst. if true then calculate variables required and store in array this.ScanResults;\r\n       \r\n        // Outer Global Variables\r\n        let CollectSites=[];\r\n        let long=[],lat=[],GroupedBoxBoundaryLimits=[];\r\n       // Variables\r\n       let WorkOrderCount = 0;\r\n\r\n        // Loop known sites in this area for matches\r\n        this.TestAgainstSites.map((site,i)=>{\r\n            \r\n            \r\n            if(this.arePointsNear({ lat: site.lat, lng: site.long}, { lat: ScanBoundary.north, lng: ScanBoundary.west }, this.FilterVariables.SearchRadius)){\r\n\r\n                //console.log(site)\r\n\r\n                // Push Values into Arrays\r\n                long.push(site.long);\r\n                lat.push(site.lat)\r\n                CollectSites.push(site);\r\n                \r\n                //console.log(site)\r\n                if(site.count[0] !== null)\r\n                    WorkOrderCount = WorkOrderCount + site.count[0].WorkOrders;\r\n                //WorkOrderCount = WorkOrderCount + site.count[0].ParentItems;\r\n              \r\n            } // close if true\r\n           \r\n          })  // close Map\r\n\r\n            // Limit Boundaries to outer most\r\n            GroupedBoxBoundaryLimits.push([Math.max(...long), Math.min(...long), Math.max(...lat), Math.min(...lat)])\r\n            // if work orders !0 ship it off for processing\r\n            if( WorkOrderCount >= this.FilterVariables.MinWorkOrder \r\n                && WorkOrderCount <= this.FilterVariables.MaxOrderOrders \r\n                && CollectSites.length>=this.FilterVariables.minSites)\r\n                { this.ProcessGridBoundary(CollectSites, WorkOrderCount, GroupedBoxBoundaryLimits, ScanBoundary)}\r\n   \r\n        }\r\n\r\n \r\n\r\n    this.ProcessGridBoundary=(Sites, WorkOrderCount, GroupedBoxBoundaryLimits, ScanBoundary)=>{\r\n     \r\n        // Variables\r\n        let tmp = [];\r\n        let remove=[];\r\n        let removeDuplicateBoundaryLimits;\r\n        \r\n        // remove any dupliactes from arrays\r\n        removeDuplicateBoundaryLimits = GroupedBoxBoundaryLimits.filter(function (v, i) {\r\n            if (tmp.indexOf(v.toString()) < 0) \r\n                { \r\n                    tmp.push(v.toString());\r\n                    return v;\r\n                }else{\r\n                    remove.push(i)\r\n                }\r\n        });\r\n\r\n        remove.map((id,i)=>{ Sites.splice(id, 1);})\r\n\r\n        this.ScanResults.push({\r\n            Sites:Sites,\r\n            SiteCount:Sites.length,\r\n            Boundary:ScanBoundary,\r\n            WorkOrderCount:WorkOrderCount,\r\n            GroupedBoxBoundaryLimits:removeDuplicateBoundaryLimits[0]\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n\r\n    this.StoreResults = ()=>{\r\n\r\n\r\n        //console.log(\"Scan End Num\", this.ScanResults.length)\r\n        // Store Results\r\n        store.dispatch({ type:'SCANSTATE', payload:false}); \r\n        \r\n        \r\n        //store.dispatch({ type:'STORERESULTS', payload:this.ScanResults});        \r\n \r\n    }\r\n\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\PrimaryFeature.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\DataDump\\index.js",["278","279","280"],"import React, {useEffect, useState} from 'react'\r\nimport {useContext_UX_FULL} from \"../../Context/UX\";\r\nimport {useContext_STRAPI_FULL} from \"../../Context/STRAPI\";\r\nimport { Label } from '@material-ui/icons';\r\n\r\n\r\nconst Prototype = ()=>{\r\n     const STRAPI = useContext_STRAPI_FULL();\r\n     const UX = useContext_UX_FULL();\r\n\r\n     useEffect(()=>{\r\n         console.log(STRAPI)\r\n     },[STRAPI])\r\n  \r\n    return(\r\n        <>\r\n               <IntroText />\r\n               \r\n               <DisplayData Data={STRAPI.Regions} Label=\"by Region\"/>\r\n               \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Prototype \r\n\r\n\r\n\r\n\r\nconst IntroText = ()=>{\r\n    return(\r\n            <div className=\"DataCollection \">\r\n                <div className=\"Copy\">\r\n                <h1>Intact AnaltyiQ Prototype</h1>\r\n                <p>The following is a list of Parent Data collections pulled from strapi</p>\r\n                <p>This data is just for display only. It shouldnt be used for anything and wont do anything special. Yet!</p>\r\n                </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nconst DisplayData = (props)=>{\r\n    \r\n    const {Data, Label} = props\r\n    const STRAPI = useContext_STRAPI_FULL();\r\n    \r\n    useEffect(()=>{  console.log(STRAPI.Customers) },[STRAPI])\r\n  \r\n    return(\r\n      <div className=\"DataCollection\">\r\n         <h3>{Label}</h3>  \r\n        <div className=\"FlexTable\">\r\n            <div className=\"FlexTableRow head\">\r\n                <div>Name </div>\r\n                <div>Work Orders</div>\r\n                <div>Sites</div>\r\n            </div>\r\n                {  \r\n                Data.map((state,i)=>{\r\n     \r\n                    return(\r\n                        <div key={i} className=\"FlexTableRow\">\r\n                            <div>{state.name}</div>  \r\n                            <div>{\r\n                            state.count[0] !== undefined ? state.count[0].WorkOrders:<span>{\"!NULL!\"}</span>\r\n                            } </div> \r\n                            <div>{state.sites.length}</div> \r\n                        </div> )\r\n                }) } \r\n        </div>\r\n      </div>\r\n    )\r\n  }","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\controls.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\Header.js",["281","282","283","284","285"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {useContext_STRAPI_FULL} from \"../../../../Context/STRAPI\";\r\nimport {useContext_STRAPI_Regions} from \"../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {SelectedRegion, CreateMapParameters} from \"../../../../actions/HandleUX\"\r\nimport { findIndex} from 'lodash'; \r\nconst FeatureHeader = ()=>{\r\n    const STRAPI = useContext_STRAPI_FULL()\r\n    const Regions = useContext_STRAPI_Regions();\r\n\r\n    const UX = useContext_UX_FULL()\r\n    //const [SelectedRegion,setSelectedRegion] = useState(UX.SelectedArea);\r\n\r\n   const  [WorkOrderCount,setWorkOrderCount ] = useState(0)\r\n   const  [Sites,setSites ] = useState(0)\r\n   const  [Cities,setCities ] = useState(0)\r\n  \r\n    \r\n   const WorkorderCount =()=>{\r\n       let WO=0, Cities=0, Sites=0\r\n       \r\n        UX.SelectedArea.map((region,i)=>{\r\n           \r\n            WO = WO+region.count[0].WorkOrders\r\n            Cities = Cities + region.cities.length\r\n            Sites = Sites + region.sites.length\r\n        });\r\n        setWorkOrderCount(WO)\r\n        setSites(Sites)\r\n        setCities(Cities)\r\n   }\r\n   \r\n\r\n   const handleRemove = (item)=>{\r\n        console.log(\"Remove this item\", item.id, UX.SelectedArea)\r\n        let index = findIndex( UX.SelectedArea, function(o) { return o.id === item.id; })\r\n        UX.SelectedArea.splice(index, 1);\r\n        CreateMapParameters(UX.SelectedArea)\r\n   }\r\n\r\n\r\n   useEffect(()=>{\r\n        WorkorderCount()\r\n    },[UX.MapParameters])\r\n\r\n    return( \r\n        <>\r\n        <div>\r\n                <ul className=\"RegionRoundup\">\r\n                    <li><h2>{UX.SelectedArea.length}</h2><p>Regions</p> </li>\r\n                    <li><h2>{Sites}</h2><p>Sites</p> </li>\r\n                    <li><h2>{Cities}</h2><p>Cities</p> </li>\r\n                    <li><h2>{WorkOrderCount}</h2><p>Work orders</p></li>\r\n                </ul>\r\n            </div>\r\n            \r\n        <div id=\"FeatureHeader\">\r\n            <div className=\"SelectedCenter\">\r\n                <h2> Centered Region: </h2>\r\n                <h3> {UX.AreaSelectFilter.region.name} </h3>\r\n            </div>\r\n\r\n            <div className=\"AdditionalRegions\">\r\n                <h3>Regions Included in these results</h3>\r\n                <ul className=\"RegionsInScan\">\r\n                    { UX.SelectedArea.map((region,i)=>{\r\n                          return( <li key={i}>\r\n                                    <p>{region.name}</p> \r\n                                    <button onClick={()=>{handleRemove(region)}}>Remove</button>\r\n                                </li>)  \r\n                    })}\r\n                </ul>\r\n            </div>    \r\n           \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\nexport default FeatureHeader;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\map.js",["286","287","288","289","290","291"],"import React, {useEffect, useState} from 'react'\r\n\r\n//import {useContext_STRAPI_FULL} from \"../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {CreateMapParameters} from \"../../../../actions/HandleUX\"\r\n\r\nimport { GoogleMap, LoadScript ,Marker} from '@react-google-maps/api';\r\n\r\n// Components\r\nimport LocationMarkers from \"./LocationMarkers\";\r\nimport PerimeterBox from \"./PerimeterBox\";\r\nimport ScanBox from \"./ScanBox\"; \r\nimport AddNewRegion from \"./AddNewRegion\";\r\n\r\nlet _ = require('lodash');\r\nconst iconBase =\"/icons/\";\r\nconst containerStyle = { height: \"600px\", width: \"auto\" };\r\nlet Targeticon = {};   \r\n//let APIKEY='AIzaSyALF9F0ml86QsWwtB0bCC7mszlTsv6U8BE'\r\nconst MapSwitch = ()=>{\r\n    \r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    \r\n    // USe function pulls the Meta data from UX.SelectedArea. Its !IMPORTANT\r\n    useEffect(()=>{ CreateMapParameters(UX.SelectedArea) },[UX.AreaSelectFilter])\r\n\r\n    useEffect(()=>{ CreateMapParameters(UX.SelectedArea) },[UX.SelectedArea])\r\n    return( \r\n        <>\r\n            {\r\n                UX.MapParameters.SetMap ? <DisplayMap />:<div>Switch</div>\r\n            }\r\n        </>\r\n    )\r\n\r\n   \r\n}\r\n\r\n\r\nexport default MapSwitch;\r\n\r\n\r\n\r\nconst DisplayMap=()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const [MapParameters, setMapParameters] = useState(UX.MapParameters)\r\n    const onLoad = React.useCallback(function callback(map) {\r\n\r\n        Targeticon = {\r\n            url: iconBase + \"target.png\", // url\r\n            scaledSize: new window.google.maps.Size(50, 50), // scaled size\r\n            origin: new window.google.maps.Point(0,0), // origin\r\n            anchor: new window.google.maps.Point(25, 25) // anchor\r\n        }; \r\n\r\n                const bounds = new window.google.maps.LatLngBounds(\r\n                    //bottom left\r\n                    new window.google.maps.LatLng(MapParameters.LatLngBoundaries[0], MapParameters.LatLngBoundaries[2]),\r\n                    //top right\r\n                    new window.google.maps.LatLng(MapParameters.LatLngBoundaries[1], MapParameters.LatLngBoundaries[3])\r\n                    )\r\n                    map.fitBounds(bounds)\r\n                    //setMap(map);\r\n                \r\n      }, [])\r\n      \r\n      \r\n      const onUnmount = React.useCallback(function callback(map) {\r\n        //setMap(null)\r\n  }, []);\r\n\r\n\r\n  useEffect(()=>{setMapParameters(UX.MapParameters);},[UX.MapParameters])\r\n\r\n    return(\r\n       <div className=\"ScanMapMain\" id=\"MainMap\">\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={{\r\n                    lat: MapParameters.BoundaryCenterPoint[0],\r\n                    lng: MapParameters.BoundaryCenterPoint[1]\r\n                  }}\r\n                zoom={MapParameters.zoom}\r\n                onLoad={onLoad}\r\n                onUnmount={onUnmount}\r\n            >\r\n            { /* Child components, such as markers, info windows, etc. */ }\r\n            <PerimeterBox />\r\n            <LocationMarkers />\r\n            <ScanBox />\r\n            <AddNewRegion />\r\n        </GoogleMap>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n\r\n      \r\n             \r\n             \r\n\r\n\r\n      const ReverseGeoCode = (OBJ)=>{\r\n\r\n        axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${OBJ.lat},${OBJ.lng}&key=AIzaSyCfjTtkNqCy9J_CTva17nVpWqRff8CeCjI`)\r\n        .then((res)=>{ \r\n                console.log(res);\r\n                if(res.data.results.length > 0 ){\r\n                    console.log(res.formatted_address)\r\n                    setCenteredLocation(res.data.results[0].formatted_address)\r\n                }\r\n                else{\r\n                    setCenteredLocation(\"No Result Returned!\")\r\n                }\r\n                \r\n            })\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\nconst GeoSourceResources = (props)=>{\r\n\r\n\r\n\r\n    // collection infomation from Feature\r\n    const {SelectedRegion} = props\r\n    const [center,setCenter] = useState({ lat: 37.090240, lng: -95.712891 })\r\n    const [LatLngBounds, setLatLngBounds] = useState([])\r\n    const [zoom, setZoom] = useState(2)\r\n    const [Markerset, setMarkerset]= useState(null)\r\n    \r\n    // Display Map when true\r\n    const [LoadingMapDetails, setLoadingMapDetails] = useState(false)\r\n    \r\n\r\n    const findBoundary = (Data)=>{\r\n\r\n            let centerLatArray = [];\r\n            let centerLngArray = [];\r\n            Data.map((marker, i)=>{\r\n                if(!isNaN(parseFloat(marker.lat))){\r\n                    centerLatArray.push(parseFloat(marker.lat))\r\n                    centerLngArray.push(parseFloat(marker.long))\r\n                }\r\n            })\r\n\r\n            var centerLat = ((Math.min(...centerLatArray) + Math.max(...centerLatArray))/2)\r\n            var centerLng = ((Math.min(...centerLngArray) + Math.max(...centerLngArray))/2)\r\n\r\n            //console.log(centerLat);\r\n            //console.log(centerLng);\r\n            \r\n            setLatLngBounds([Math.min(...centerLatArray),Math.max(...centerLatArray),Math.min(...centerLngArray),Math.max(...centerLngArray)])\r\n            setZoom(14)\r\n            setCenter({lat:centerLat, lng:centerLng})\r\n            setLoadingMapDetails(true)\r\n          \r\n      }\r\n\r\n\r\n\r\n      useEffect(()=>{ \r\n          console.log(\"New Location Selected\")\r\n            findBoundary(SelectedRegion.sites); \r\n        }, [SelectedRegion])\r\n\r\n    return (\r\n        <div>\r\n            { LoadingMapDetails ? <DisplayMap LatLngBounds={LatLngBounds} center={center} zoom={zoom} {...props}/>: 'Loading Map'  }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\ScanBox.js",["292","293","294","295","296"],"import React, {useEffect, useState} from 'react'\r\n\r\n//import {useContext_STRAPI_FULL} from \"../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../Context/SCAN\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport {PreformScan} from \"../../../../actions/GeoLocationActions\";\r\nimport { Rectangle } from '@react-google-maps/api';\r\n\r\n\r\n//\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport DeleteCluster from \"../Controls/buttons/DeleteClusterBtn\";\r\nimport ClusterMap from \"../Map/clusterMap/clustermap\"\r\n//\r\nconst RenderScan = new PreformScan();\r\n\r\nconst recOptions={\r\n    strokeColor: '#6094ff',\r\n    strokeOpacity: 1,\r\n    strokeWeight: 1.5,\r\n    fillColor: '#6094ff',\r\n    fillOpacity: 0.35,\r\n  }\r\n\r\n  const Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nconst ScanBox = ()=>{\r\n\r\n    // Dialouge Box\r\n    const [open, setOpen] = useState(false);\r\n    const [clusterId, setclusterId]= useState(null)\r\n    const [DeleteClusterRow, setDeleteClusterRow] = useState(null)\r\n\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [ScanResults, setScanResults] = useState([])\r\n    \r\n    // Region Grid\r\n    const [Gridpoints, setGridpoints] = useState(null)\r\n    const [GridPointer, setGridPointer] = useState(null)\r\n\r\n\r\n\r\n\r\n\r\n    const ScrolltoCluster=()=>{\r\n        console.log(clusterId)\r\n       \r\n       \r\n        setOpen(false);\r\n        setTimeout(()=>{document.getElementById(clusterId).scrollIntoView({ behavior: 'smooth' });},500)\r\n    }\r\n    const handleClickOpen = (cluster, i) => {\r\n\r\n       \r\n        setDeleteClusterRow(SCAN.Results[i])\r\n        setclusterId(cluster)\r\n        setOpen(true);\r\n      };\r\n    \r\n      const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n   const TestScan = ()=>{\r\n            RenderScan.Boundaries=UX.MapParameters.LatLngBoundaries;\r\n            RenderScan.FilterVariables = SCAN.LocationFilter\r\n            RenderScan.setGridpoints= setGridpoints;\r\n            RenderScan.setGridPointer= setGridPointer\r\n            RenderScan.TestAgainstSites =  UX.MapParameters.markers;\r\n            RenderScan.ScanResults=[]\r\n            RenderScan.setScanResults= setScanResults\r\n            RenderScan.Scan();\r\n   }\r\n\r\n   const CreateBorders = (Data)=>{\r\n\r\n    let DisplayBorderResults=[];\r\n    Data.map((border,i)=>{\r\n        let position = border.GroupedBoxBoundaryLimits;\r\n        DisplayBorderResults.push(<Rectangle key={i} onClick={()=>{handleClickOpen(`Cluster${i}`, `${i}`)}} visible={true} options={recOptions} bounds={{north: position[3],south: position[2],east: position[0],west: position[1]}} />)\r\n    })\r\n        setScanResults(DisplayBorderResults)\r\n   }\r\n\r\n\r\n    useEffect(()=>{ \r\n        //console.log('SCAN', SCAN.active) \r\n        if(SCAN.active){TestScan() }\r\n     \r\n    },[SCAN])\r\n\r\n    useEffect(()=>{ \r\n        if(SCAN.Results.length != 0 ){ CreateBorders(SCAN.Results); } },[SCAN])\r\n\r\n    return(\r\n        <>\r\n            {Gridpoints}\r\n            {GridPointer}\r\n            {ScanResults}\r\n\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Selected Cluster\"}</DialogTitle>\r\n                <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    <ClusterMap Data={DeleteClusterRow} />\r\n                </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={()=>{ScrolltoCluster()}} color=\"primary\">\r\n                    View to Cluster\r\n                </Button>\r\n            \r\n                <DeleteCluster  Data={DeleteClusterRow}/>\r\n                \r\n                <Button onClick={handleClose} color=\"primary\">\r\n                   Close Box\r\n                </Button>\r\n                \r\n                </DialogActions>\r\n      </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ScanBox;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\PerimeterBox.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\LocationMarkers.js",["297","298","299","300","301","302"],"\r\nimport React, {useEffect, useState} from 'react'\r\n\r\n//import {useContext_STRAPI_FULL} from \"../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\n\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n//const iconBase =\"https://developers.google.com/maps/documentation/javascript/examples/full/images/\";\r\nimport {uniqBy} from 'lodash'; \r\n\r\n\r\nconst divStyle = {\r\n    background: `white`,\r\n    padding: 1\r\n  }\r\n \r\n\r\n/** Loop Markers */ \r\nconst LocationMarkers = ()=>{\r\n\r\n    //const STRAPI = useContext_STRAPI_FULL();\r\n    const UX = useContext_UX_FULL();\r\n    \r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n    const [StarMarker, setStarMarker] = useState(null)\r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[]\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              //console.log(marker.count[0])\r\n              //console.log(marker.count[0].WorkOrders)\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n        \r\n         let MinMax = FindMinMax(markers);\r\n         let NewMarkers =    uniqBy(markers, 'combined');\r\n         let StoreMarkers=[]\r\n         \r\n         console.log('CreateMarkers', markers.length, NewMarkers.length);\r\n         \r\n         NewMarkers.map((marker, i)=>{\r\n                     let fillVariable;\r\n         \r\n                    if(!isNaN(parseFloat(marker.lat)) && marker.count[0] != null){\r\n\r\n                            //Find the WO percetage value based on highest and lowest range\r\n                            let int = ((marker.count[0].WorkOrders - MinMax[0]) * 100) / (MinMax[1] - MinMax[0])\r\n                            fillVariable = ColorMe((int.toFixed(2)/10));\r\n\r\n                            Targeticon = {\r\n                                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                                fillColor: fillVariable,\r\n                                fillOpacity: .9,\r\n                                anchor: new window.google.maps.Point(0,0),\r\n                                strokeWeight: 0,\r\n                                scale: 1\r\n                            }; \r\n                               \r\n\r\n                            StoreMarkers.push( \r\n                                <>\r\n                                    <Marker\r\n                                        key={i}\r\n                                        onLoad={onLoadMarker}\r\n                                        title={marker.name}\r\n                                        label={marker.name}\r\n                                        icon={Targeticon}\r\n                                        onClick={()=>{OnMarkerClick(marker.name)}}\r\n                                        position={{\r\n                                                lat: parseFloat(marker.lat),\r\n                                                lng: parseFloat(marker.long)\r\n                                            }}\r\n                                    />\r\n                                </>\r\n                            )\r\n                    }                   \r\n            })\r\n            setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ CreateMarkers(UX.MapParameters.markers)},[UX.MapParameters])\r\n\r\n      return(  <>{DisplayMarkers} {StarMarker}</>)\r\n\r\n}\r\n\r\n\r\nexport default LocationMarkers;\r\n\r\n\r\n\r\nconst MarkerIcon  = ()=>{\r\n    return(<svg baseProfile=\"basic\" xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n<path d=\"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\"/>\r\n</svg>)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\ScanResultsLayout.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\SelectRegionLayout.js",["303","304"],"import React, {useEffect, useState} from 'react'\r\n//import { useSelector } from \"react-redux\";\r\n//import store from \"../../../../store/index\"\r\n\r\n\r\nimport Controls from \"../Controls/controls\"\r\n\r\nconst SelectARegion = ()=>{\r\n\r\n    return(\r\n        <div className=\"Main\">\r\n            <Controls />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectARegion;\r\n//\r\n//<Controls  STRAPI={STRAPI} Filters={Filters} onHandle={onHandle}/>","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\STRAPI.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\UX.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\store\\reducers\\SCANSTATE.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateCountry.js",["305","306"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_Countries} from \"../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const COUNTRIES= useContext_STRAPI_Countries();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.country);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Country')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n        AreaFilter('AREAFILTERCOUNTRY', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      COUNTRIES.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item.country} ({item.count[0].WorkOrders})</MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\HandleUX.js",["307","308","309","310","311","312","313","314","315","316","317","318","319"],"// Private Functions\r\nimport store from \"../store/index\"\r\n//import axios from 'axios';\r\nimport {distancetoPoint} from \"./GeoLocationActions\"\r\nimport { findIndex} from 'lodash'; \r\n\r\n\r\nexport function AreaFilter(type, value){\r\n    //console.log('AreaFilter', value)\r\n    store.dispatch({ type:type, payload:value});\r\n}\r\n\r\nexport function ScanState(value){\r\n    console.log('ScanState', value)\r\n    store.dispatch({ type:'SCANSTATE', payload:value});\r\n}\r\n\r\nexport function SelectedRegion(SelectedRegion){\r\n\r\n    console.log(SelectedRegion)\r\n    store.dispatch({ type:'STORESELECTEDAREA', payload:SelectedRegion});\r\n\r\n}\r\n\r\nexport function RemoveClusterItem(Haystack, Needle){ \r\n\r\n    console.log(\"Delete Cluster\");\r\n    console.log(Haystack, Needle);\r\n    let index = findIndex( Haystack, function(o) { return o.Boundary === Needle; })\r\n    console.log(index);\r\n\r\n    Haystack.splice(index, 1)\r\n    console.log(Haystack);\r\n    store.dispatch({ type:'STORERESULTS', payload:Haystack}); \r\n}\r\n\r\n \r\nexport function CreateMapParameters(DATA){\r\n\r\n            // USe this function to create ALL of the possible Map Data and Meta points.\r\n            // Try to limit the use on the UX.SelectedArea around the APP\r\n            // Instead focus on using UX.MapParameters\r\n\r\n            let centerLatArray = [];\r\n            let centerLngArray = [];\r\n            let Storesites=[]\r\n\r\n            console.log(DATA)\r\n            DATA.map((Region, i)=>{\r\n                //console.log(\"Region\", Region)\r\n                Region.sites.map((marker,i)=>{\r\n                    Storesites.push(marker)\r\n                    if(!isNaN(parseFloat(marker.lat))){\r\n                        centerLatArray.push(parseFloat(marker.lat))\r\n                        centerLngArray.push(parseFloat(marker.long))\r\n                    }\r\n                })\r\n                //return false\r\n            })\r\n\r\n\r\n            let centerLat = ((Math.min(...centerLatArray) + Math.max(...centerLatArray))/2)\r\n            let centerLng = ((Math.min(...centerLngArray) + Math.max(...centerLngArray))/2)\r\n            let LatLngBoundaries = [Math.min(...centerLatArray),Math.max(...centerLatArray),Math.min(...centerLngArray),Math.max(...centerLngArray)]\r\n            \r\n            let distance = distancetoPoint(LatLngBoundaries[0],LatLngBoundaries[2], LatLngBoundaries[1],LatLngBoundaries[3],'K')\r\n           \r\n           // console.log('distance', (distance*1000), setZoomLevel((distance*1000).toFixed(0)));\r\n           \r\n            let zoom = setZoomLevel((distance*1000).toFixed(0))\r\n            let SetMap = true\r\n            //console.log('Storesites', Storesites)\r\n            \r\n            let MapParameters = {\r\n                LatLngBoundaries:LatLngBoundaries,\r\n                BoundaryCenterPoint:[centerLat, centerLng],\r\n                zoom:zoom,\r\n                SetMap:SetMap,\r\n                markers:Storesites\r\n            }\r\n\r\n            //console.log(MapParameters)\r\n            store.dispatch({ type:'STOREMAPPARAMETERS', payload:MapParameters});\r\n}\r\n\r\n\r\n\r\nfunction setZoomLevel(meters) { \r\n    console.log(`Zoom level set meters: ${meters}`); \r\n\r\n    switch (meters) {\r\n        case (meters < 1128):\r\n            return 15;\r\n          break;\r\n        case ((meters > 1128) && (meters < 2256)):\r\n            return 14;\r\n          break;\r\n        case ((meters > 2256) && (meters < 4513)):\r\n            return 13;\r\n          break;\r\n        case ((meters > 4513) && (meters < 9027)):\r\n            return 12;\r\n          break; \r\n        case ((meters > 9027) && (meters < 18055)) :\r\n            return 11;\r\n          break;\r\n        case ((meters > 18055) && (meters < 36111)) :\r\n            return 10;\r\n          break; \r\n        case ((meters > 36111) && (meters < 72223)) :\r\n            return 9;\r\n          break;      \r\n        case ((meters > 72223) && (meters < 144447)) :\r\n            return 8;\r\n          break;   \r\n        case ((meters > 144447) && (meters < 288895)) :\r\n            return 7;\r\n          break;    \r\n        case ((meters > 288895) && (meters < 577790)) :\r\n            return 6;\r\n          break;  \r\n          case ((meters > 577790) && (meters < 1155581)) :\r\n            return 5;\r\n          break;     \r\n          default:\r\n            return 4;\r\n      }\r\n\r\n\r\n    //return zoomfactor;\r\n}\r\n\r\nexport function NumberReducer (labelValue) {\r\n\r\n    // Nine Zeroes for Billions\r\n    return Math.abs(Number(labelValue)) >= 1.0e+9\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+9 + \"B\"\r\n    // Six Zeroes for Millions \r\n    : Math.abs(Number(labelValue)) >= 1.0e+6\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+6 + \"M\"\r\n    // Three Zeroes for Thousands\r\n    : Math.abs(Number(labelValue)) >= 1.0e+3\r\n\r\n    ? Math.abs(Number(labelValue)) / 1.0e+3 + \"K\"\r\n\r\n    : Math.abs(Number(labelValue));\r\n\r\n}\r\n\r\n\r\nexport function HandleFilterChange(TYPE, VALUE){\r\n    console.log(TYPE, VALUE)\r\n    store.dispatch({ type:TYPE, payload:VALUE});\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateState.js",["320","321","322"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_States} from \"../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport {  orderBy} from 'lodash'; \r\nconst  MaterialUISelectState = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const STATES= useContext_STRAPI_States();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.state);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Select State')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n        AreaFilter('AREAFILTERSTATE', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n    useEffect(()=>{},[Value]);\r\n    useEffect(()=>{ console.log(STATES)},[])\r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n              labelId=\"demo\"\r\n              id=\"demo\"\r\n              open={open}\r\n              onClose={handleClose}\r\n              onOpen={handleOpen}\r\n              value={Value}\r\n              onChange={handleChange}\r\n              disabled={Disabled}\r\n          >\r\n              {\r\n                \r\n              orderBy(STATES, ['name'], ['asc', 'desc']).map((item, i)=>{\r\n                    return(<MenuItem key={i} value={item} >{item.name} ({item.count[0].WorkOrders})</MenuItem>)\r\n                  })\r\n                }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectState;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectStateRegion.js",["323","324"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_STRAPI_Regions} from \"../../../../../Context/STRAPI\";\r\nimport {useContext_UX_FULL} from \"../../../../../Context/UX\";\r\n\r\n// actions\r\nimport {AreaFilter, SelectedRegion} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { find, orderBy} from 'lodash'; \r\n\r\n\r\n/*  SWITCH ***************** */\r\nconst SwitchOnSelect = ()=>{\r\n    const UX = useContext_UX_FULL();\r\n  \r\n    const [Show, setShow]= useState(false);\r\n\r\n    useEffect(()=>{\r\n        UX.AreaSelectFilter.state === null ? setShow(false):setShow(true)\r\n    },[UX.AreaSelectFilter.state])\r\n\r\n    if(Show) return( <MaterialUISelectRegion />) \r\n   \r\n    return( <div> <p>Awaiting Regions.</p> </div>)    \r\n}\r\n\r\nexport default SwitchOnSelect;\r\n\r\n\r\n/* SELECT ********** */\r\n\r\nconst  MaterialUISelectRegion = () =>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const Regions = useContext_STRAPI_Regions();\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(UX.AreaSelectFilter.region);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Select Regions')\r\n  \r\n  \r\n    const handleChange = (event) => {\r\n      \r\n        let FindRegion = find(Regions, function(o) { return o.id === event.target.value.id; });\r\n        AreaFilter('AREAFILTERREGION', event.target.value);\r\n        \r\n        setValue(event.target.value);\r\n        SelectedRegion([FindRegion])\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n    useEffect(()=>{},[UX.AreaSelectFilter.state])\r\n    return (\r\n      <div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n              labelId=\"demo\"\r\n              id=\"demo\"\r\n              open={open}\r\n              onClose={handleClose}\r\n              onOpen={handleOpen}\r\n              value={Value}\r\n              onChange={handleChange}\r\n              disabled={Disabled}\r\n          >\r\n              {\r\n                \r\n                orderBy(UX.AreaSelectFilter.state.regions, ['name'], ['asc', 'desc']).map((item, i)=>{\r\n                    return(<MenuItem key={i} value={item} >{item.name} ({item.count[0].WorkOrders})</MenuItem>)\r\n                  })\r\n                }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Context\\SCAN.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\ScanResults.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\AddNewRegion.js",["325","326","327","328","329","330"],"import React, {useEffect, useMemo, useState} from 'react'\r\nimport {useContext_STRAPI_Regions} from \"../../../../Context/STRAPI\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\nimport {useContext_UX_FULL} from \"../../../../Context/UX\";\r\nimport {SelectedRegion, CreateMapParameters} from \"../../../../actions/HandleUX\"\r\nimport { find} from 'lodash'; \r\n\r\nconst AddNewRegion = ()=>{\r\n\r\n    const UX = useContext_UX_FULL();\r\n    const Regions = useContext_STRAPI_Regions();\r\n    const [NewRegions, setNewRegions] = useState(null)\r\n    const [markerRemoved,setmarkerRemoved] = useState([])\r\n    \r\n    const onLoadMarker=(name)=>{\r\n       // console.log(name)\r\n    }\r\n\r\n    const OnMarkerClick=(region,e)=>{\r\n        \r\n        \r\n        setNewRegions(null);\r\n        console.log(\"Add new Region : \", region.name, region.id)\r\n       \r\n        let FindRegion = find(Regions, function(o) { return o.id === region.id; });\r\n        UX.SelectedArea.push(FindRegion);\r\n\r\n        SelectedRegion(UX.SelectedArea);\r\n        CreateMapParameters(UX.SelectedArea);\r\n        \r\n    }\r\n\r\n    const CreateAddNewRegion = (Data)=>{\r\n          \r\n       \r\n        let StoreMarkers=[]\r\n        //console.log(UX.SelectedArea, StoreMarkers);\r\n\r\n            Data.map((region,i)=>{\r\n                if(find(UX.SelectedArea, {id: region.id}) === undefined){\r\n\r\n                let Targeticon = {\r\n                    path: \"M25 1c-13.234 0-24 10.766-24 24 0 13.233 10.766 24 24 24 13.233 0 24-10.767 24-24 0-13.234-10.767-24-24-24zm3 43.75v-8.75h-6v8.75c-8.625-1.307-15.443-8.125-16.75-16.75h8.75v-6h-8.75c1.307-8.625 8.125-15.443 16.75-16.75v8.75h6v-8.75c8.625 1.307 15.443 8.125 16.75 16.75h-8.75v6h8.75c-1.307 8.625-8.125 15.443-16.75 16.75z\",\r\n                    fillColor: '#FF0000',\r\n                    fillOpacity: .9,\r\n                    anchor: new window.google.maps.Point(0,0),\r\n                    strokeWeight: 0,\r\n                    scale: 1\r\n                }; \r\n                   \r\n\r\n                StoreMarkers.push( \r\n                    <>\r\n                        <Marker\r\n                            key={i}\r\n                            onLoad={onLoadMarker(region.name)}\r\n                            title={region.name}\r\n                            label={region.name}\r\n                            icon={Targeticon}\r\n                           \r\n                            onClick={OnMarkerClick.bind(this,region)}\r\n                            position={{\r\n                                    lat: parseFloat(region.lat),\r\n                                    lng: parseFloat(region.long)\r\n                                }}\r\n                                visible={true}\r\n                        />\r\n                    </>\r\n                )\r\n\r\n                } // close lodash if\r\n            })// close Map\r\n            setNewRegions(StoreMarkers)\r\n    }\r\n\r\n\r\n    useEffect(()=>{ CreateAddNewRegion(UX.AreaSelectFilter.state.regions); },[UX.AreaSelectFilter])\r\n    useEffect(()=>{ CreateAddNewRegion(UX.AreaSelectFilter.state.regions);},[UX.MapParameters])\r\n    return(<> {NewRegions} </>)\r\n}\r\n\r\nexport default AddNewRegion;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\ScanStateBtn.js",["331"],"import React, { useEffect,useState } from 'react'\r\nimport {ScanState} from \"../../../../../actions/HandleUX\";\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst btnPara={\r\n    label:'Scan Now',\r\n    disabled:''\r\n}\r\n\r\nconst btnActivePara={\r\n    label:'Scanning',\r\n    disabled:'disabled'\r\n}\r\n\r\nconst ScanSwitch = ()=>{\r\n    const SCAN = useContext_SCAN_FULL();\r\n    const [btn,setbtn] = useState(btnPara)\r\n    \r\n    const handle=()=>{  \r\n        ScanState(true);\r\n        console.log(\"Scan NOW!!!!! true\");\r\n    }\r\n\r\n    useEffect(()=>{ \r\n     \r\n        console.log(SCAN.active)\r\n        if(SCAN.active)\r\n            setbtn(btnActivePara)\r\n        if(!SCAN.active)\r\n            setbtn(btnPara)\r\n\r\n    },[SCAN])\r\n    return(\r\n        <div className=\"ScanBtnContainer\">\r\n             <Button variant=\"contained\" onClick={handle} disabled={btn.disabled} >\r\n                {btn.label}\r\n            </Button>\r\n        \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ScanSwitch;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\Results.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\SimplePie.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\venders\\apexCharts\\BarChart.js",["332"],"import React  from 'react';\r\nimport {\r\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,ResponsiveContainer\r\n} from 'recharts';\r\n\r\n/*\r\nexample\r\nconst data = [\r\n  {\r\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n  },\r\n];\r\n*/\r\n\r\nconst SimpleBarChart = (props)=>{\r\n\r\n    const {Data} = props\r\n    return (\r\n      <div style={{ width: '100%', height: 400 }}>\r\n      <ResponsiveContainer>\r\n          <BarChart\r\n            width={600}\r\n            height={400}\r\n            data={Data}\r\n            margin={{\r\n              top: 5, right: 30, left: 20, bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Bar dataKey=\"value\" fill=\"#ffbf00\" />\r\n          \r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default SimpleBarChart;\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\clustermap.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterMarkers.js",["333","334","335"],"import React, {useEffect, useState} from 'react'\r\nimport {interpolate} from \"d3-interpolate\";\r\nimport {  Marker  } from '@react-google-maps/api';\r\n\r\nimport {uniqBy} from 'lodash';\r\n\r\n\r\n/** Loop Markers */ \r\nconst LocationMarkers = (props)=>{ \r\n    const {Data} = props\r\n    const [DisplayMarkers,setDisplayMarkers] = useState(null)\r\n\r\n    let Targeticon = { };\r\n\r\n    const onLoadMarker = marker => {console.log('marker Created')}\r\n    const OnMarkerClick=(name)=>{console.log(\"Marker Clicked\", name) }\r\n\r\n\r\n      const ColorMe = (val)=>{\r\n        let color = interpolate(\"#466dfb\", \"#ff6d6d\")\r\n        return  color((val).toFixed(2))\r\n      }\r\n\r\n      const FindMinMax=(Data)=>{\r\n        let arr=[];\r\n        Data.map((marker,i)=>{ \r\n       \r\n            if(marker.count[0] != null){\r\n              arr.push(marker.count[0].WorkOrders) \r\n            }\r\n          })\r\n        return [Math.min(...arr),Math.max(...arr)]\r\n      }\r\n\r\n\r\n      const CreateMarkers = (markers)=>{\r\n        \r\n         let MinMax = FindMinMax(markers);\r\n         let NewMarkers = uniqBy(markers, 'combined');\r\n         let StoreMarkers=[]\r\n         \r\n         //console.log('CreateMarkers', markers.length, NewMarkers.length);\r\n         \r\n         NewMarkers.map((marker, i)=>{\r\n                     let fillVariable;\r\n         \r\n                    if(!isNaN(parseFloat(marker.lat)) && marker.count[0] != null){\r\n\r\n                            //Find the WO percetage value based on highest and lowest range\r\n                            let int = ((marker.count[0].WorkOrders - MinMax[0]) * 100) / (MinMax[1] - MinMax[0])\r\n                            fillVariable = ColorMe((int.toFixed(2)/10));\r\n\r\n                            Targeticon = {\r\n                                path: \"M0-48c-9.8 0-17.7 7.8-17.7 17.4 0 15.5 17.7 30.6 17.7 30.6s17.7-15.4 17.7-30.6c0-9.6-7.9-17.4-17.7-17.4z\",\r\n                                fillColor: fillVariable,\r\n                                fillOpacity: .9,\r\n                                anchor: new window.google.maps.Point(0,0),\r\n                                strokeWeight: 0,\r\n                                scale: 1\r\n                            }; \r\n                               \r\n\r\n                            StoreMarkers.push( \r\n                                <>\r\n                                    <Marker\r\n                                        key={i}\r\n                                        onLoad={onLoadMarker}\r\n                                        title={marker.name}\r\n                                        label={marker.name}\r\n                                        icon={Targeticon}\r\n                                        onClick={()=>{OnMarkerClick(marker.name)}}\r\n                                        position={{\r\n                                                lat: parseFloat(marker.lat),\r\n                                                lng: parseFloat(marker.long)\r\n                                            }}\r\n                                    />\r\n                                </>\r\n                            )\r\n                    }                   \r\n            })\r\n            setDisplayMarkers(StoreMarkers);\r\n        }\r\n\r\n      useEffect(()=>{ CreateMarkers(Data.Sites)},[Data])\r\n\r\n      return(  <>{DisplayMarkers}</>)\r\n\r\n}\r\n\r\n\r\nexport default LocationMarkers;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterScanRadius.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ClusterBoundary.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Map\\clusterMap\\ScannedRegionalBoundary.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\DeleteClusterBtn.js",["336"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\nimport {RemoveClusterItem} from \"../../../../../actions/HandleUX\";\r\n\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nconst ScanSwitch = (props)=>{\r\n    const {Data} = props\r\n    const SCAN = useContext_SCAN_FULL();\r\n    return(\r\n        <IconButton aria-label=\"delete\" className=\"DeleteCluster\" onClick={()=>{ RemoveClusterItem(SCAN.Results, Data.Boundary)}} >\r\n            <DeleteForeverIcon fontSize=\"inherit\" />\r\n        </IconButton>\r\n             \r\n    )\r\n}\r\n\r\nexport default ScanSwitch;\r\n\r\n/*\r\n<Button variant=\"contained\" onClick={()=>{ RemoveClusterItem(SCAN.Results, Data.Boundary)}}  >\r\n                   <DeleteForeverIcon />\r\n            </Button>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfo.js",["337"],"import React, { useEffect } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n// COmponents\r\nimport ClusterSites from \"./MoreInfoComponents/ListSites\"\r\nimport ClusterTradeTypes from \"./MoreInfoComponents/ListTradeTypes\";\r\n\r\n\r\nimport Piechart from \"../../../../venders/apexCharts/SimplePie\"\r\nimport BarChart from \"../../../../venders/apexCharts/BarChart\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst MoreInfo = (props)=>{\r\n\r\n    const {result} = props\r\n    const classes = useStyles();\r\n\r\n    useEffect(()=>{\r\n        //console.log(result)\r\n    },[result])\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n          <Accordion>\r\n            <AccordionSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n              className=\"MoreInfoCTA\"\r\n            >\r\n              <h3>Additional Cluster Information</h3>\r\n            </AccordionSummary>\r\n            \r\n\r\n            <AccordionDetails>\r\n                <div className=\"ListtheData\">\r\n                     <ClusterSites Data={result.Sites}/>\r\n                     <ClusterTradeTypes Data={result}/>\r\n                </div>\r\n              \r\n                <div className=\"ResultCharts\">\r\n                    <div>\r\n                        <h3>Occurances of Job type in cluster</h3>\r\n                        <Piechart Data={result.Charts.JobTypeName}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Work orders by Trade Type</h3>\r\n                        <Piechart Data={result.Charts.TradeType}/>\r\n                    </div>\r\n                    <div>\r\n                        <h3>Job type totals over the year</h3>\r\n                        <BarChart Data={result.Charts.JobTypeWorkOrderCount}/>\r\n                    </div>\r\n                </div>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </div>\r\n      );\r\n}\r\nexport default MoreInfo;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Layout\\MapFilterControls.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectRaduis.js",["338","339"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    //const {STRAPI, Filters, onHandle} = props\r\n    const classes = useStyles();\r\n  \r\n    const [Value, setValue] = useState(SCAN.LocationFilter.SearchRadius);\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n    const [Label, setLabel]= useState('Scan Radius')\r\n  \r\n  \r\n    const Radui=[.5,1,1.5,2,2.5,3,3.5,4,4.5,5]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGERADIUS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectGridSpacing.js",["340","341"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.GridSpacing);\r\n    const [Label, setLabel]= useState('Set Grid Spacing')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[.5,1,1.5,2,2.5,3,3.5,4,4.5,5]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEGRIDSPACING', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMinSitesPerScan.js",["342","343"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.minSites);\r\n    const [Label, setLabel]= useState('Min Sites')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[1,2,5,10,20,30,40,50]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMINSITES', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMinWorkOrders.js",["344","345"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.MinWorkOrder);\r\n    const [Label, setLabel]= useState('W/O Min')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[0, 1,20,50,100,150,200,500,1000, 2000, 3000, 5000, 10000]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMINWORKORDERS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\inputs\\SelectMaxWorkOrders.js",["346","347"],"import React, {useEffect, useState} from 'react'\r\n\r\n// Context\r\nimport {useContext_SCAN_FULL} from \"../../../../../Context/SCAN\";\r\n// actions\r\nimport {HandleFilterChange} from \"../../../../../actions/HandleUX\";\r\n\r\n// UI 3rd Party\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst  MaterialUISelectCountry = () =>{\r\n\r\n    const SCAN= useContext_SCAN_FULL();\r\n\r\n    const classes = useStyles();\r\n    const [Value, setValue] = useState(SCAN.LocationFilter.MaxOrderOrders);\r\n    const [Label, setLabel]= useState('W/O Max')\r\n    const [Disabled, setDisabled] = useState(false)\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    const Radui=[500,1000, 2000, 3000, 5000, 10000, 100000, 10000000]\r\n\r\n    const handleChange = (event) => {\r\n        HandleFilterChange('CHANGEMAXWORKORDERS', event.target.value)\r\n        setValue(event.target.value)\r\n    };\r\n  \r\n    const handleClose = () => { setOpen(false); };\r\n    const handleOpen = () => { setOpen(true); };\r\n   \r\n  useEffect(()=>{},[Value]);\r\n \r\n    return (\r\n      <div>\r\n       \r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo\">{Label}</InputLabel>\r\n          <Select\r\n            labelId=\"demo\"\r\n            id=\"demo\"\r\n            open={open}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            value={Value}\r\n            onChange={handleChange}\r\n            disabled={Disabled}\r\n          >\r\n              {\r\n                      Radui.map((item, i)=>{\r\n                          return(\r\n                              <MenuItem key={i} value={item} >{item} </MenuItem>\r\n                             \r\n                          )\r\n                      })\r\n                  }\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default MaterialUISelectCountry;\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: 'block',\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Controls\\buttons\\BacktoMapBtn.js",["348"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nconst ScanSwitch = ()=>{\r\n    const BacktoMap = ()=>{setTimeout(()=>{document.getElementById(\"MainMap\").scrollIntoView({ behavior: 'smooth' });},500)}\r\n    return( \r\n    \r\n    <IconButton aria-label=\"To Top\" className=\"BackToTop\" onClick={()=>{ BacktoMap()}} >\r\n        <ArrowUpwardIcon fontSize=\"inherit\" />\r\n    </IconButton>\r\n    )\r\n}\r\n\r\nexport default ScanSwitch;\r\n//<Button variant=\"contained\" onClick={()=>{ BacktoMap()}}  >Back to Map</Button>\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\actions\\ClusterAnalysis.js",["349","350","351","352","353","354","355","356","357"],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\ClusterResults.js",["358","359","360"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport{NumberReducer} from \"../../../../actions/HandleUX\";\r\n\r\nimport DeleteClusterBtn from \"../Controls/buttons/DeleteClusterBtn\";\r\nimport BacktoMap from \"../Controls/buttons/BacktoMapBtn\";\r\nimport ClusterMap from \"../Map/clusterMap/clustermap\";\r\nimport MoreInfo from \"./MoreInfo\";\r\n\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nconst ClusterResult = (props)=>{\r\n\r\n    const {result, i} = props;\r\n    const [Multiplier, setMultiplier]= useState(1000)\r\n    const [ClusterTotal, setClusterTotal] = useState(0)\r\n\r\n\r\n    const FindClusterTotal = (result)=>{\r\n        let total=0;\r\n        result.ClusterCost.map((type,i)=>{ total = total + type[1] })\r\n        \r\n        setClusterTotal(NumberReducer(parseFloat((total*Multiplier).toFixed(2))))\r\n    }\r\n\r\n\r\n    useEffect(()=>{ FindClusterTotal(result) },[result])\r\n\r\n    return(\r\n        <>\r\n        <h3><LocationCityIcon /> Cluster { (i+1) }</h3> \r\n        <h3>Resources Required : <strong>{result.TradeTypeCount[0].length}</strong></h3>\r\n        <h3>est Cluster Cost : <strong>${ClusterTotal}</strong></h3>\r\n        <div className=\"ListResultContainer\">\r\n                <div className=\"Title\">\r\n                    \r\n                    <div className=\"metaData\">\r\n                        <BacktoMap />\r\n                        <h3> Work order Count : <strong>{result.WorkOrderCount}</strong></h3>\r\n                        <h3> Sites in this Region : <strong>{result.SiteCount}</strong></h3>\r\n                        <DeleteClusterBtn Data={result}/> \r\n                    </div>\r\n                    \r\n                </div>\r\n              \r\n                <ClusterMap Data={result}/>\r\n                <MoreInfo result={result}/>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClusterResult;\r\n\r\n/*\r\n  <div className=\"ClusterOverview\">\r\n                    \r\n                    </div>\r\n*/","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfoComponents\\ListSites.js",["361","362"],"import React, { useEffect, useState } from 'react'\r\n\r\nconst ClusterSites = (props)=>{\r\n\r\n    const {Data} = props;\r\n\r\n    return(\r\n        <div className=\"LocationList\">\r\n            <h3>Cluster Locations vs Work orders</h3>\r\n                <ul className=\"SiteBreakdown\">\r\n                        {\r\n                            Data.map((site,i)=>{\r\n                                return(\r\n                                    <li key={i}>\r\n                                        <div>{site.name}</div>\r\n                                        <div><strong>{site.count[0].WorkOrders}</strong></div>\r\n                                    </li>\r\n                                    )\r\n                            })\r\n                        }\r\n                </ul> \r\n        </div>\r\n    )\r\n}\r\nexport default ClusterSites;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Prototype\\Components\\Results\\MoreInfoComponents\\ListTradeTypes.js",["363","364"],"import React, { useEffect, useState } from 'react'\r\nimport Piechart from \"../../../../../venders/apexCharts/SimplePie\"\r\nconst ClusterTradeTypes = (props)=>{\r\n\r\n    const {Data} = props;\r\n\r\n    useEffect(()=>{ },[Data])\r\n    return(\r\n        <div className=\"LocationList\">\r\n            <h3>Work orders by Trade Type</h3>\r\n            <ul className=\"SiteBreakdown\">\r\n                {\r\n                    Data.SplitTradeTypeCount.map((trade,i)=>{\r\n                        return(\r\n                            <li key={i}>\r\n                                <div>{trade.name}</div>\r\n                                <div><strong>{ trade.count}</strong></div>\r\n                            </li>\r\n                            )\r\n                    })\r\n                }\r\n            </ul> \r\n            \r\n    </div>\r\n    )\r\n}\r\nexport default ClusterTradeTypes;","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Loading\\Loading.js",[],"D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Assets\\logo.js",["365","366"],"\r\nimport React  from 'react'\r\n\r\nexport const LogoMain=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group.png\" />)\r\n}\r\n\r\nexport const LogoMainWhite=()=>{\r\n    return( <img className=\"MainLogo\" src=\"/img/png/intact-group-white.png\" />)\r\n}","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Template\\Dashboard.js",["367"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport SideBar from \"../Navigation/SideBar\";\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n   // width: `calc(100% - ${drawerWidth}px)`,\r\n    //marginLeft: drawerWidth,\r\n    zIndex:999\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    backgroundColor:'#ffc20e',\r\n    zIndex:99\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor:'#ffc20e'\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function PermanentDrawerRight(props) {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n            <h1>Intact AnaltyiQ </h1>\r\n            <p>Front end Portal</p>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n    \r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"left\"\r\n      >\r\n        <div className={classes.toolbar} />\r\n      \r\n        <SideBar />\r\n       \r\n      </Drawer>\r\n      \r\n      <main className={classes.content}>  \r\n        <div className={classes.toolbar} />\r\n            {props.children}\r\n      </main>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n/*\r\n\r\n <List>\r\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n*/\r\n","D:\\htdoc\\Intact AnaltyiQ\\analtyiq\\src\\Pages\\Portfolio\\index.js",[],{"ruleId":"368","replacedBy":"369"},{"ruleId":"370","replacedBy":"371"},{"ruleId":"372","severity":1,"message":"373","line":4,"column":8,"nodeType":"374","messageId":"375","endLine":4,"endColumn":17},{"ruleId":"376","severity":1,"message":"377","line":7,"column":15,"nodeType":"378","messageId":"379","endLine":7,"endColumn":17},{"ruleId":"376","severity":1,"message":"377","line":7,"column":33,"nodeType":"378","messageId":"379","endLine":7,"endColumn":35},{"ruleId":"376","severity":1,"message":"377","line":22,"column":17,"nodeType":"378","messageId":"379","endLine":22,"endColumn":19},{"ruleId":"376","severity":1,"message":"377","line":23,"column":17,"nodeType":"378","messageId":"379","endLine":23,"endColumn":19},{"ruleId":"380","severity":1,"message":"381","line":282,"column":43,"nodeType":"382","messageId":"383","endLine":282,"endColumn":45},{"ruleId":"380","severity":1,"message":"384","line":323,"column":73,"nodeType":"385","messageId":"386","endLine":323,"endColumn":82},{"ruleId":"380","severity":1,"message":"381","line":333,"column":26,"nodeType":"382","messageId":"383","endLine":333,"endColumn":28},{"ruleId":"372","severity":1,"message":"387","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":35},{"ruleId":"372","severity":1,"message":"388","line":4,"column":10,"nodeType":"374","messageId":"375","endLine":4,"endColumn":15},{"ruleId":"372","severity":1,"message":"389","line":9,"column":12,"nodeType":"374","messageId":"375","endLine":9,"endColumn":14},{"ruleId":"372","severity":1,"message":"390","line":6,"column":9,"nodeType":"374","messageId":"375","endLine":6,"endColumn":23},{"ruleId":"372","severity":1,"message":"391","line":9,"column":11,"nodeType":"374","messageId":"375","endLine":9,"endColumn":17},{"ruleId":"372","severity":1,"message":"392","line":10,"column":11,"nodeType":"374","messageId":"375","endLine":10,"endColumn":18},{"ruleId":"380","severity":1,"message":"381","line":23,"column":39,"nodeType":"382","messageId":"383","endLine":23,"endColumn":41},{"ruleId":"393","severity":1,"message":"394","line":45,"column":7,"nodeType":"395","endLine":45,"endColumn":25,"suggestions":"396"},{"ruleId":"372","severity":1,"message":"397","line":7,"column":21,"nodeType":"374","messageId":"375","endLine":7,"endColumn":31},{"ruleId":"372","severity":1,"message":"398","line":7,"column":33,"nodeType":"374","messageId":"375","endLine":7,"endColumn":39},{"ruleId":"372","severity":1,"message":"399","line":15,"column":5,"nodeType":"374","messageId":"375","endLine":15,"endColumn":6},{"ruleId":"393","severity":1,"message":"400","line":26,"column":60,"nodeType":"395","endLine":26,"endColumn":81,"suggestions":"401"},{"ruleId":"372","severity":1,"message":"402","line":51,"column":9,"nodeType":"374","messageId":"375","endLine":51,"endColumn":19},{"ruleId":"393","severity":1,"message":"403","line":67,"column":10,"nodeType":"395","endLine":67,"endColumn":12,"suggestions":"404"},{"ruleId":"372","severity":1,"message":"405","line":7,"column":10,"nodeType":"374","messageId":"375","endLine":7,"endColumn":21},{"ruleId":"380","severity":1,"message":"381","line":91,"column":24,"nodeType":"382","messageId":"383","endLine":91,"endColumn":26},{"ruleId":"393","severity":1,"message":"406","line":103,"column":7,"nodeType":"395","endLine":103,"endColumn":13,"suggestions":"407"},{"ruleId":"376","severity":1,"message":"408","line":106,"column":32,"nodeType":"378","messageId":"379","endLine":106,"endColumn":34},{"ruleId":"393","severity":1,"message":"409","line":106,"column":73,"nodeType":"395","endLine":106,"endColumn":79,"suggestions":"410"},{"ruleId":"372","severity":1,"message":"411","line":13,"column":7,"nodeType":"374","messageId":"375","endLine":13,"endColumn":15},{"ruleId":"372","severity":1,"message":"412","line":26,"column":24,"nodeType":"374","messageId":"375","endLine":26,"endColumn":37},{"ruleId":"380","severity":1,"message":"381","line":40,"column":28,"nodeType":"382","messageId":"383","endLine":40,"endColumn":30},{"ruleId":"380","severity":1,"message":"381","line":60,"column":36,"nodeType":"382","messageId":"383","endLine":60,"endColumn":38},{"ruleId":"393","severity":1,"message":"413","line":100,"column":64,"nodeType":"395","endLine":100,"endColumn":82,"suggestions":"414"},{"ruleId":"372","severity":1,"message":"415","line":111,"column":7,"nodeType":"374","messageId":"375","endLine":111,"endColumn":17},{"ruleId":"372","severity":1,"message":"416","line":1,"column":16,"nodeType":"374","messageId":"375","endLine":1,"endColumn":25},{"ruleId":"372","severity":1,"message":"387","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":35},{"ruleId":"372","severity":1,"message":"417","line":27,"column":22,"nodeType":"374","messageId":"375","endLine":27,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":29,"column":19,"nodeType":"374","messageId":"375","endLine":29,"endColumn":27},{"ruleId":"380","severity":1,"message":"381","line":49,"column":33,"nodeType":"382","messageId":"383","endLine":49,"endColumn":35},{"ruleId":"380","severity":1,"message":"381","line":51,"column":44,"nodeType":"382","messageId":"383","endLine":51,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":94,"column":11,"nodeType":"421","messageId":"422","endLine":94,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":97,"column":11,"nodeType":"421","messageId":"422","endLine":97,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":100,"column":11,"nodeType":"421","messageId":"422","endLine":100,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":103,"column":11,"nodeType":"421","messageId":"422","endLine":103,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":106,"column":11,"nodeType":"421","messageId":"422","endLine":106,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":109,"column":11,"nodeType":"421","messageId":"422","endLine":109,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":112,"column":11,"nodeType":"421","messageId":"422","endLine":112,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":115,"column":11,"nodeType":"421","messageId":"422","endLine":115,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":118,"column":11,"nodeType":"421","messageId":"422","endLine":118,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":121,"column":11,"nodeType":"421","messageId":"422","endLine":121,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":124,"column":11,"nodeType":"421","messageId":"422","endLine":124,"endColumn":17},{"ruleId":"372","severity":1,"message":"417","line":26,"column":22,"nodeType":"374","messageId":"375","endLine":26,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":28,"column":19,"nodeType":"374","messageId":"375","endLine":28,"endColumn":27},{"ruleId":"393","severity":1,"message":"423","line":40,"column":42,"nodeType":"395","endLine":40,"endColumn":44,"suggestions":"424"},{"ruleId":"372","severity":1,"message":"417","line":47,"column":22,"nodeType":"374","messageId":"375","endLine":47,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":49,"column":19,"nodeType":"374","messageId":"375","endLine":49,"endColumn":27},{"ruleId":"372","severity":1,"message":"425","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":34},{"ruleId":"372","severity":1,"message":"426","line":13,"column":12,"nodeType":"374","messageId":"375","endLine":13,"endColumn":25},{"ruleId":"372","severity":1,"message":"427","line":13,"column":26,"nodeType":"374","messageId":"375","endLine":13,"endColumn":42},{"ruleId":"380","severity":1,"message":"381","line":39,"column":32,"nodeType":"382","messageId":"383","endLine":39,"endColumn":34},{"ruleId":"393","severity":1,"message":"428","line":77,"column":78,"nodeType":"395","endLine":77,"endColumn":99,"suggestions":"429"},{"ruleId":"393","severity":1,"message":"430","line":78,"column":77,"nodeType":"395","endLine":78,"endColumn":95,"suggestions":"431"},{"ruleId":"372","severity":1,"message":"432","line":5,"column":10,"nodeType":"374","messageId":"375","endLine":5,"endColumn":20},{"ruleId":"372","severity":1,"message":"433","line":3,"column":18,"nodeType":"374","messageId":"375","endLine":3,"endColumn":22},{"ruleId":"380","severity":1,"message":"381","line":26,"column":28,"nodeType":"382","messageId":"383","endLine":26,"endColumn":30},{"ruleId":"380","severity":1,"message":"381","line":44,"column":36,"nodeType":"382","messageId":"383","endLine":44,"endColumn":38},{"ruleId":"393","severity":1,"message":"413","line":84,"column":50,"nodeType":"395","endLine":84,"endColumn":56,"suggestions":"434"},{"ruleId":"372","severity":1,"message":"435","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":14},{"ruleId":"372","severity":1,"message":"436","line":7,"column":8,"nodeType":"374","messageId":"375","endLine":7,"endColumn":18},{"ruleId":"372","severity":1,"message":"417","line":24,"column":22,"nodeType":"374","messageId":"375","endLine":24,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":26,"column":19,"nodeType":"374","messageId":"375","endLine":26,"endColumn":27},{"ruleId":"372","severity":1,"message":"418","line":22,"column":19,"nodeType":"374","messageId":"375","endLine":22,"endColumn":27},{"ruleId":"372","severity":1,"message":"417","line":23,"column":22,"nodeType":"374","messageId":"375","endLine":23,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":22,"column":19,"nodeType":"374","messageId":"375","endLine":22,"endColumn":27},{"ruleId":"372","severity":1,"message":"417","line":23,"column":22,"nodeType":"374","messageId":"375","endLine":23,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":22,"column":19,"nodeType":"374","messageId":"375","endLine":22,"endColumn":27},{"ruleId":"372","severity":1,"message":"417","line":23,"column":22,"nodeType":"374","messageId":"375","endLine":23,"endColumn":33},{"ruleId":"372","severity":1,"message":"418","line":22,"column":19,"nodeType":"374","messageId":"375","endLine":22,"endColumn":27},{"ruleId":"372","severity":1,"message":"417","line":23,"column":22,"nodeType":"374","messageId":"375","endLine":23,"endColumn":33},{"ruleId":"372","severity":1,"message":"435","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":14},{"ruleId":"380","severity":1,"message":"381","line":32,"column":40,"nodeType":"382","messageId":"383","endLine":32,"endColumn":42},{"ruleId":"376","severity":1,"message":"408","line":35,"column":19,"nodeType":"378","messageId":"379","endLine":35,"endColumn":21},{"ruleId":"380","severity":1,"message":"381","line":54,"column":29,"nodeType":"382","messageId":"383","endLine":54,"endColumn":31},{"ruleId":"380","severity":1,"message":"381","line":79,"column":34,"nodeType":"382","messageId":"383","endLine":79,"endColumn":36},{"ruleId":"380","severity":1,"message":"381","line":83,"column":37,"nodeType":"382","messageId":"383","endLine":83,"endColumn":39},{"ruleId":"376","severity":1,"message":"377","line":100,"column":94,"nodeType":"378","messageId":"379","endLine":100,"endColumn":96},{"ruleId":"376","severity":1,"message":"408","line":102,"column":30,"nodeType":"378","messageId":"379","endLine":102,"endColumn":32},{"ruleId":"380","severity":1,"message":"381","line":146,"column":28,"nodeType":"382","messageId":"383","endLine":146,"endColumn":30},{"ruleId":"380","severity":1,"message":"381","line":157,"column":28,"nodeType":"382","messageId":"383","endLine":157,"endColumn":30},{"ruleId":"372","severity":1,"message":"437","line":15,"column":24,"nodeType":"374","messageId":"375","endLine":15,"endColumn":37},{"ruleId":"380","severity":1,"message":"381","line":21,"column":40,"nodeType":"382","messageId":"383","endLine":21,"endColumn":42},{"ruleId":"393","severity":1,"message":"438","line":27,"column":48,"nodeType":"395","endLine":27,"endColumn":56,"suggestions":"439"},{"ruleId":"372","severity":1,"message":"416","line":1,"column":17,"nodeType":"374","messageId":"375","endLine":1,"endColumn":26},{"ruleId":"372","severity":1,"message":"387","line":1,"column":28,"nodeType":"374","messageId":"375","endLine":1,"endColumn":36},{"ruleId":"372","severity":1,"message":"387","line":1,"column":28,"nodeType":"374","messageId":"375","endLine":1,"endColumn":36},{"ruleId":"372","severity":1,"message":"440","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":16},{"ruleId":"441","severity":1,"message":"442","line":5,"column":13,"nodeType":"443","endLine":5,"endColumn":73},{"ruleId":"441","severity":1,"message":"442","line":9,"column":13,"nodeType":"443","endLine":9,"endColumn":79},{"ruleId":"372","severity":1,"message":"444","line":8,"column":8,"nodeType":"374","messageId":"375","endLine":8,"endColumn":15},"no-native-reassign",["445"],"no-negated-in-lhs",["446"],"no-unused-vars","'DashBoard' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'useState' is defined but never used.","'Label' is defined but never used.","'UX' is assigned a value but never used.","'SelectedRegion' is defined but never used.","'STRAPI' is assigned a value but never used.","'Regions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'WorkorderCount'. Either include it or remove the dependency array.","ArrayExpression",["447"],"'LoadScript' is defined but never used.","'Marker' is defined but never used.","'_' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UX.SelectedArea'. Either include it or remove the dependency array.",["448"],"'Targeticon' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'MapParameters.LatLngBoundaries'. Either include it or remove the dependency array.",["449"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'TestScan'. Either include it or remove the dependency array.",["450"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'CreateBorders'. Either include it or remove the dependency array.",["451"],"'divStyle' is assigned a value but never used.","'setStarMarker' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateMarkers'. Either include it or remove the dependency array.",["452"],"'MarkerIcon' is assigned a value but never used.","'useEffect' is defined but never used.","'setDisabled' is assigned a value but never used.","'setLabel' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has a missing dependency: 'STATES'. Either include it or remove the dependency array.",["453"],"'useMemo' is defined but never used.","'markerRemoved' is assigned a value but never used.","'setmarkerRemoved' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'CreateAddNewRegion'. Either include it or remove the dependency array.",["454"],"React Hook useEffect has missing dependencies: 'CreateAddNewRegion' and 'UX.AreaSelectFilter.state.regions'. Either include them or remove the dependency array.",["455"],"'makeStyles' is defined but never used.","'Cell' is defined but never used.",["456"],"'Button' is defined but never used.","'Typography' is defined but never used.","'setMultiplier' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'FindClusterTotal'. Either include it or remove the dependency array.",["457"],"'Piechart' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},"Update the dependencies array to be: [UX.MapParameters, WorkorderCount]",{"range":"480","text":"481"},"Update the dependencies array to be: [UX.AreaSelectFilter, UX.SelectedArea]",{"range":"482","text":"483"},"Update the dependencies array to be: [MapParameters.LatLngBoundaries]",{"range":"484","text":"485"},"Update the dependencies array to be: [SCAN, TestScan]",{"range":"486","text":"487"},"Update the dependencies array to be: [CreateBorders, SCAN]",{"range":"488","text":"489"},"Update the dependencies array to be: [CreateMarkers, UX.MapParameters]",{"range":"490","text":"491"},"Update the dependencies array to be: [STATES]",{"range":"492","text":"493"},"Update the dependencies array to be: [CreateAddNewRegion, UX.AreaSelectFilter]",{"range":"494","text":"495"},"Update the dependencies array to be: [CreateAddNewRegion, UX.AreaSelectFilter.state.regions, UX.MapParameters]",{"range":"496","text":"497"},"Update the dependencies array to be: [CreateMarkers, Data]",{"range":"498","text":"499"},"Update the dependencies array to be: [FindClusterTotal, result]",{"range":"500","text":"501"},[1506,1524],"[UX.MapParameters, WorkorderCount]",[971,992],"[UX.AreaSelectFilter, UX.SelectedArea]",[2287,2289],"[MapParameters.LatLngBoundaries]",[3342,3348],"[SCAN, TestScan]",[3447,3453],"[CreateBorders, SCAN]",[3791,3809],"[CreateMarkers, UX.MapParameters]",[1373,1375],"[STATES]",[2943,2964],"[CreateAddNewRegion, UX.AreaSelectFilter]",[3043,3061],"[CreateAddNewRegion, UX.AreaSelectFilter.state.regions, UX.MapParameters]",[3247,3253],"[CreateMarkers, Data]",[876,884],"[FindClusterTotal, result]"]